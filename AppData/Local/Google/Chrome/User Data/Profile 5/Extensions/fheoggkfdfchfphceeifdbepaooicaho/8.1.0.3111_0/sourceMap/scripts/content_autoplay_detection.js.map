{"version":3,"file":"scripts/content_autoplay_detection.js","mappings":"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","sources":["webpack:///./extension/scripts/content_base.js","webpack:///./WABrowserExtension-Common/AutoPlay-Detection-Package/MutationObserver/mutation_ready_state.js","webpack:///./WABrowserExtension-Common/AutoPlay-Detection-Package/MutationObserver/auto_play_video_mutation.js","webpack:///./WABrowserExtension-Common/AutoPlay-Detection-Package/index.js","webpack:///./extension/common/commands.js","webpack:///./extension/common/handle_promise.js","webpack:///./extension/scripts/content_autoplay_detection.js"],"sourcesContent":["export default class ScriptBase\r\n{\r\n  constructor(pingCommand)\r\n  {\r\n    this.pingCommand = pingCommand;\r\n    this.basePingListener();\r\n  }\r\n\r\n  basePingListener(callback = null)\r\n  {\r\n    chrome.runtime.onMessage.addListener((request, sender, responseCb) =>\r\n    {\r\n      if (sender.id !== chrome.runtime.id)\r\n      {\r\n        return;\r\n      }\r\n\r\n      const { command } = request;\r\n      if (command === this.pingCommand)\r\n      {\r\n        responseCb({ content: true });\r\n        if (typeof callback === 'function') callback();\r\n      }\r\n    });\r\n  }\r\n}\r\n","export const MUTATION_READY_STATE = {\r\n  haveNothing: 0,\r\n  haveMetadata: 1,\r\n  haveCurrentData: 2,\r\n  haveFutureData: 3,\r\n  haveEnoughData: 4\r\n};\r\n","// The class to handle mutation object notifications for Web Boost\r\n// Checks whether there are auto play videos in the page and if there are any such\r\n// then notifies background process of such videos in the page.\r\n\r\n// Mutation observer\r\nimport { MUTATION_READY_STATE } from './mutation_ready_state';\r\n\r\nexport default class AutoPlayVideoMutation\r\n{\r\n  constructor()\r\n  {\r\n    this.autoplayDetectedfn = null;\r\n    this.getLastSavedTimeFn = null;\r\n    this.setLastSavedTimeFn = null;\r\n\r\n    this.USER_PLAYED = 'mcafee_wa_userplayed';\r\n    this.PROCESSED_VIDEO = 'mcafee_wa_processedvideo';\r\n    this.CLICK_PLAY_INTERVAL = 4000;\r\n  }\r\n\r\n  init(autoplayDetectedfn = null, setLastSavedTimeFn = null, getLastSavedTimeFn = null)\r\n  {\r\n    if (!autoplayDetectedfn)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    this.autoplayDetectedfn = autoplayDetectedfn;\r\n    this.getLastSavedTimeFn = getLastSavedTimeFn;\r\n    this.setLastSavedTimeFn = setLastSavedTimeFn;\r\n\r\n    if (document.defaultView === document.defaultView.top)\r\n    {\r\n      window.addEventListener('click', this._setLastClickedTime.bind(this), true);\r\n    }\r\n\r\n    this._processLoadedElements();\r\n    return true;\r\n  }\r\n\r\n  _handlePlay(videoElement)\r\n  {\r\n    videoElement.addEventListener('play', () =>\r\n    {\r\n      this._onplay(videoElement);\r\n    });\r\n  }\r\n\r\n  async _onplay(videoElement)\r\n  {\r\n    const videoSrc = videoElement.src.length > 0 ? videoElement.src : videoElement.currentSrc;\r\n\r\n    // If user initiated, let it play\r\n    const strUserPlayed = videoElement.getAttribute(this.USER_PLAYED);\r\n    if (strUserPlayed === 'true')\r\n    {\r\n      return;\r\n    }\r\n\r\n    // Get last clicked time and check if that is within 4 seconds of current time. If so it is user initiated play\r\n    let lastClickedTime = await this._getLastClickedTime();\r\n    lastClickedTime = !lastClickedTime ? 0 : lastClickedTime;\r\n    const timeLapsedAfterLastClick = Date.now() - lastClickedTime;\r\n    if (timeLapsedAfterLastClick <= this.CLICK_PLAY_INTERVAL)\r\n    {\r\n      videoElement.setAttribute(this.USER_PLAYED, 'true');\r\n      return;\r\n    }\r\n\r\n    this.autoplayDetectedfn(videoSrc);\r\n  }\r\n\r\n  _getLastClickedTime()\r\n  {\r\n    return this.getLastSavedTimeFn();\r\n  }\r\n\r\n  _setLastClickedTime()\r\n  {\r\n    this.setLastSavedTimeFn(Date.now());\r\n  }\r\n\r\n  _processVideoElement(element)\r\n  {\r\n    // the same video element could be processed multiple times\r\n    // so we check to make sure we don't process same video element twice\r\n    const strProcessed = element.getAttribute(this.PROCESSED_VIDEO);\r\n    if (strProcessed === 'true')\r\n    {\r\n      return;\r\n    }\r\n\r\n    element.setAttribute(this.PROCESSED_VIDEO, 'true');\r\n\r\n    if (\r\n      (element.currentTime > 0\r\n        && element.paused === false\r\n        && element.ended === false\r\n        && element.readyState > MUTATION_READY_STATE.haveCurrentData)\r\n      || element.autoplay === true\r\n    )\r\n    {\r\n      this._onplay(element);\r\n    }\r\n    this._handlePlay(element);\r\n  }\r\n\r\n  _recursiveProcess(element)\r\n  {\r\n    for (let index = 0; index < element.childNodes.length; ++index)\r\n    {\r\n      this._recursiveProcess(element.childNodes[index]);\r\n    }\r\n\r\n    if (element instanceof HTMLMediaElement)\r\n    {\r\n      this._processVideoElement(element);\r\n    }\r\n  }\r\n\r\n  nodeAdded(node)\r\n  {\r\n    this._recursiveProcess(node);\r\n  }\r\n\r\n  _processLoadedElements()\r\n  {\r\n    // Provide another 3 seconds for video to start and refresh that video started playing.\r\n    // Since we are not pausing here, it should be ok for a delay to show checklist for\r\n    // cross-sell\r\n    setTimeout(() =>\r\n    {\r\n      const mediaElems = document.querySelectorAll('audio, video');\r\n      for (let index = 0; index < mediaElems.length; ++index)\r\n      {\r\n        this._processVideoElement(mediaElems[index]);\r\n      }\r\n    }, 3000);\r\n  }\r\n}\r\n","import AutoPlayVideoMutation from './MutationObserver/auto_play_video_mutation';\r\n\r\nexport default class AutoPlayDetection\r\n{\r\n  constructor()\r\n  {\r\n    this.mutationHandler = null;\r\n  }\r\n\r\n  /*\r\n  Usage:\r\n  autoplayDetectedFn (callback fn):\r\n          - description: upon detecting an autoplay video, this function will be called with a response argument\r\n          - response: videosrc - details of the video src being detected as an auto play video\r\n          Ex:\r\n          const autoplayDetectedFn = (videoSrc) => BackgroundIPC.AutoPlayVideo(videoSrc)\r\n          init(autoplayDetectedFn, ..., ...)\r\n\r\n  setLastSavedTimeFn (callback fn)\r\n          - description: This function will be call in the \"content\" not in the \"iframe\", to inidicate the time the user\r\n                        clicked on the window. This is to distinguish if the video was auto-play or played by the user.\r\n                        A response argument will be returned, in which the function will have to save\r\n                        this as a session in the background. This will later be retrieved by \"getLastSavedTimeFn\"\r\n          - response: date - returns a \"Date.now()\"\r\n          Ex:\r\n          const setLastSavedTimeFn = (date) => BackgroundIPC.SetLastSavedTime(date)\r\n          init(..., setLastSavedTimeFn, ...)\r\n\r\n  getLastSavedTimeFn (promise fn)\r\n          - description: This function will be called by both \"content\" and \"iframe\" (if set in the iframe) to retrieve\r\n                         the previously saved \"Date.now()\" (call from setLastSavedTimeFn). Note, You should return a \"promise\"\r\n                         and upon the promise completion, \"resolve\" with the reponse (ie, resolve(response))\r\n          - return: promise with a resolve of the \"savedDate\"\r\n          Ex:\r\n          const getLastSavedTimeFn = () => return new Promise((resolve) => {\r\n            const savedDate = BackgroundIPC.GetLastSavedTime();\r\n            resolve(savedDate);\r\n          })\r\n          init(..., ..., getLastSavedTimeFn)\r\n  */\r\n  init(autoplayDetectedFn, setLastSavedTimeFn, getLastSavedTimeFn)\r\n  {\r\n    this.mutationHandler = new AutoPlayVideoMutation();\r\n    this.mutationHandler.init(autoplayDetectedFn, setLastSavedTimeFn, getLastSavedTimeFn);\r\n\r\n    const observer = new MutationObserver(this.handleMutations.bind(this));\r\n\r\n    observer.observe(document, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n\r\n  handleMutations(records)\r\n  {\r\n    records.forEach((record) =>\r\n    {\r\n      // Iterate through all added nodes\r\n      for (const addedElement of record.addedNodes)\r\n      {\r\n        this.mutationHandler.nodeAdded(addedElement);\r\n      }\r\n    });\r\n  }\r\n}\r\n","/**\r\n * The command ids supported for IPC between content process and chrome/background process.\r\n */\r\n\r\nexport const BackgroundCommands = {\r\n  // Generic Commands\r\n  CACHE_STORE: 'CACHE_STORE',\r\n  CONTENT_HANDLER: 'CONTENT_HANDLER',\r\n  EXECUTE_COMMAND: 'EXECUTE_COMMAND',\r\n  FOCUS_OR_CREATE_TAB: 'FOCUS_OR_CREATE_TAB',\r\n  GET_BK_GLOBALS: 'GET_BK_GLOBALS',\r\n  GET_EXTENSION_STATUS: 'GET_EXTENSION_STATUS',\r\n  GET_TAB_DATA: 'GET_TAB_DATA',\r\n  TI_REQUEST: 'TI_REQUEST',\r\n  INSTALL_EXTENSION: 'INSTALL_EXTENSION',\r\n  PLACEHOLDER_TEXT: 'PLACEHOLDER_TEXT',\r\n  REMOVE_TAB: 'REMOVE_TAB',\r\n  SEND_TELEMETRY: 'SEND_TELEMETRY',\r\n  SET_VIEWPORT: 'SET_VIEWPORT',\r\n  WHITELIST: 'WHITELIST',\r\n  RESET_NATIVE_SETTING: 'RESET_NATIVE_SETTING',\r\n  UPDATE_BK_NATIVE_SETTINGS: 'UPDATE_BK_NATIVE_SETTINGS',\r\n\r\n  // Options Menu / Settings Page\r\n  SHOW_SIDEBAR_MAIN: 'SHOW_SIDEBAR_MAIN',\r\n  GET_POPUP_DATA: 'GET_POPUP_DATA',\r\n  GET_SETTINGS_DATA: 'GET_SETTINGS_DATA',\r\n  RESET_SETTINGS: 'RESET_SETTINGS',\r\n\r\n  // Autoplay video\r\n  AUTO_RUN_VIDEO_SITE: 'AUTO_RUN_VIDEO_SITE',\r\n  GET_CLICK_EVENT_TIME: 'GET_CLICK_EVENT_TIME',\r\n  SAVE_CLICK_EVENT_TIME: 'SAVE_CLICK_EVENT_TIME',\r\n\r\n  // Typosquatting\r\n  GET_TYPOSQUATTING_DATA: 'GET_TYPOSQUATTING_DATA',\r\n\r\n  // Block Page / Iframe / Site Report\r\n  IS_FRAME_BLOCKED: 'IS_FRAME_BLOCKED',\r\n  IS_WHITELISTED: 'IS_WHITELISTED',\r\n  ANY_BLOCKED_IFRAMES: 'ANY_BLOCKED_IFRAMES',\r\n  ANY_BLOCKED_CRYPTOSCRIPTS: 'ANY_BLOCKED_CRYPTOSCRIPTS',\r\n  UNBLOCK_ALL_IFRAMES: 'UNBLOCK_ALL_IFRAMES',\r\n  VIEW_SITE_REPORT: 'VIEW_SITE_REPORT',\r\n\r\n  // Annotations\r\n  SEARCH_ANNOTATION: 'SEARCH_ANNOTATION',\r\n  UPDATE_ENGINE_STATS: 'UPDATE_ENGINE_STATS',\r\n\r\n  // SMA\r\n  SOCIAL_MEDIA_ANNOTATION: 'SOCIAL_MEDIA_ANNOTATION',\r\n\r\n  // RAT Detection\r\n  UPDATE_RAT_DETECTION_SHOWING_FLAG: 'UPDATE_RAT_DETECTION_SHOWING_FLAG',\r\n\r\n  // Search Suggestion\r\n  SEARCH_SUGGEST: 'SEARCH_SUGGEST',\r\n\r\n  // Form detection\r\n  SAVE_FORM_INFO: 'SAVE_FORM_INFO',\r\n  GET_FORM_INFO_CACHE: 'GET_FORM_INFO_CACHE',\r\n  CLEAR_FORM_INFO_CACHE: 'CLEAR_FORM_INFO_CACHE',\r\n  SAVE_MULTISTEP_LOGIN: 'SAVE_MULTISTEP_LOGIN',\r\n  GET_FD_WEIGHTS: 'GET_FD_WEIGHTS',\r\n  GET_FD_EXCEPTIONS: 'GET_FD_EXCEPTIONS',\r\n  GET_FD_CRF_PARAMS: 'GET_FD_CRF_PARAMS',\r\n\r\n  // DWS\r\n  CLEAR_CACHED_DWS_INFO: 'CLEAR_DWS_INFO',\r\n  GET_CACHED_DWS_INFO: 'GET_CACHED_DWS_INFO',\r\n  UPDATE_DWS_WHITELIST: 'UPDATE_DWS_WHITELIST',\r\n  LAUNCH_IDPS_LOGIN: 'LAUNCH_IDPS_LOGIN',\r\n  UPDATE_DWS_SHOWN: 'UPDATE_DWS_SHOWN',\r\n\r\n  // APS\r\n  GET_APS_DETAILS: 'GET_APS_DETAILS',\r\n  FORM_PRE_CHECK_PASSED: 'FORM_PRE_CHECK_PASSED',\r\n  SIGN_UP_FORM_DETECTED: 'SIGN_UP_FORM_DETECTED',\r\n\r\n  // Firefox Policy Consent\r\n  SET_FF_POLICY_COLLECTION: 'SET_FF_POLICY_COLLECTION',\r\n  SET_FF_POLICY_LAST_SHOWN: 'SET_FF_POLICY_LAST_SHOWN',\r\n};\r\n\r\nexport const ContentCommands = {\r\n  // Commands handled by iframes\r\n  UNBLOCK_IFRAME: 'UNBLOCK_IFRAME',\r\n\r\n  // Content UI Handler Commands\r\n  BALLOON_MESSAGE: 'BALLOON_MESSAGE',\r\n  PAGE_OVERLAY: 'PAGE_OVERLAY',\r\n  SIDEBAR: 'SIDEBAR',\r\n  TOPBAR: 'TOPBAR',\r\n\r\n  // Ping\r\n  PING_CONTENT_ANNOTATION: 'PING_CONTENT_ANNOTATION',\r\n  PING_CONTENT_RAT_DETECTION: 'PING_CONTENT_RAT_DETECTION',\r\n  PING_CONTENT_IFRAME_BANNER: 'PING_CONTENT_IFRAME_BANNER',\r\n  PING_CONTENT_AUTOPLAY_DETECTION: 'PING_CONTENT_AUTOPLAY_DETECTION',\r\n  PING_CONTENT_SIDEBAR_MAIN: 'PING_CONTENT_SIDEBAR_MAIN',\r\n  PING_CONTENT_FF_DL_OVERLAY: 'PING_CONTENT_FF_DL_OVERLAY',\r\n  PING_CONTENT_CRYPTO_BLOCK: 'PING_CONTENT_CRYPTO_BLOCK',\r\n  PING_CONTENT_FF_VIEWPORTS: 'PING_CONTENT_FF_VIEWPORTS',\r\n  PING_CONTENT_IDPS: 'PING_CONTENT_IDPS',\r\n  PING_CONTENT_APS_TOAST: 'PING_CONTENT_APS_TOAST',\r\n  PING_CONTENT_APS_BALLOON: 'PING_CONTENT_APS_BALLOON',\r\n  PING_CONTENT_APS_OBSERVER: 'PING_CONTENT_APS_OBSERVER',\r\n  PING_CONTENT_SITE_LISTENER: 'PING_CONTENT_SITE_LISTENER',\r\n  PING_IFRAME_FORM_CHECK: 'PING_IFRAME_FORM_CHECK',\r\n  PING_IFRAME_FORM_DETECTION: 'PING_IFRAME_FORM_DETECTION',\r\n  PING_IFRAME_BLOCK: 'PING_IFRAME_BLOCK',\r\n\r\n  // APS\r\n  APS_REGISTRATION_PAGE: 'APS_REGISTRATION_PAGE',\r\n\r\n  // Broadcast to foreground\r\n  BROADCAST_TO_FOREGROUND: 'BROADCAST_TO_FOREGROUND',\r\n\r\n  // Annotation Journey Toast\r\n  TRIGGER_AJ_TOAST: 'TRIGGER_AJ_TOAST'\r\n};\r\n\r\n// **********************************************\r\n// SUB-COMMANDS USED BY CONTENT HANDLER COMMANDS:\r\n// **********************************************\r\n\r\nexport const SideBarCommands = {\r\n  MAIN: 'MAIN',\r\n  RELOAD: 'RELOAD',\r\n  SMA: 'SMA',\r\n  RAT_DETECTION: 'RAT_DETECTION',\r\n};\r\n\r\nexport const BalloonMessageCommands = {\r\n  ADVANCED_PROTECTION_SIGNAL: 'ADVANCED_PROTECTION_SIGNAL',\r\n  ADVANCED_PROTECTION_SIGNAL_TOAST: 'ADVANCED_PROTECTION_SIGNAL_TOAST',\r\n  DWS: 'DWS',\r\n};\r\n\r\nexport const TopBarCommands = {\r\n  CRYPTO_BLOCK: 'CRYPTO_BLOCK',\r\n  IFRAME_BLOCK: 'IFRAME_BLOCK',\r\n  TRIGGER_ALLOW: 'TRIGGER_ALLOW',\r\n};\r\n\r\nexport const PageOverlayCommands = {\r\n  SEARCH_EXTENSION_OVERLAY: 'SEARCH_EXTENSION_OVERLAY',\r\n  FINISH_DOWNLOAD: 'FINISH_DOWNLOAD',\r\n};\r\n\r\nexport const ExternalCommands = {\r\n  // Legacy\r\n  PING: 0,\r\n  DISCONNECT_NATIVE: 1,\r\n  SET_PROPERTY_EX: 2, //  For automation\r\n  SET_PROPERTY: 3, // For automation\r\n  GET_PROPERTY: 4, // For automation\r\n  CLEAR_GTI_CACHE: 5, // For automation\r\n  RESET_CRYPTO: 6, // For automation\r\n  CLEAN_TYPOSQUATING_WHITELIST: 7, // For automation\r\n  CLEAR_TYPOSQUATING_CACHE: 8, // For automation\r\n  CLEAN_CRYPTO_WHITELIST: 10, // For automation\r\n  CLEAN_RAT_WHITELIST: 12, // For automation\r\n  CLEAN_RAT_CACHE: 13, // For automation\r\n  REPLACE_TRUSTED_DOMAIN: 15, // For automation\r\n  VERIFY_GTI_REQUEST: 17, // For automation\r\n  VERIFY_TYPOSQUAT_SERVER: 18, // For watchdog automation\r\n  GET_ALL_WA_SETTINGS: 19, // For automation extension\r\n  SET_STORAGE_PROPERTY: 20, // Set a local storage property within WA\r\n  GET_STORAGE_PROPERTY: 21, // Get a local storage property within WA (for automation)\r\n  REINIT_SCHEDULED_TASKS: 22,\r\n  OPEN_SETTINGS: 23, // For personal protection hub\r\n  OPEN_ACTION_PANEL: 24, // For personal protection hub\r\n  GET_MEMORY_FOOTPRINT: 26, // For automation, endurance run\r\n  ENDURANCE_TEST_RESET: 27, // For automation, endurance run\r\n  FORM_DETECTION_RESULT: 28,\r\n  SHOW_UNUSED_SELECTORS: 29, // For automation\r\n  SET_MTI_GLOBALS: 30\r\n};\r\n\r\nexport const ExternalResponse = {\r\n  PONG: 0,\r\n};\r\n","export default class HandlePromise\r\n{\r\n  static handlePromiseMessage(message, customCallback = null)\r\n  {\r\n    const defaultCallback = (resolve, reject, data) =>\r\n    {\r\n      if (chrome.runtime.lastError) reject(chrome.runtime.lastError.message);\r\n      resolve(data);\r\n    };\r\n\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n      chrome.runtime.sendMessage(message, (data) =>\r\n      {\r\n        if (typeof customCallback === 'function') customCallback(resolve, reject, data);\r\n        else defaultCallback(resolve, reject, data);\r\n      });\r\n    });\r\n  }\r\n}\r\n","import ScriptBase from '@extension/scripts/content_base';\r\nimport AutoPlayDetection from '@mcafee/autoplay-detection/index';\r\nimport { BackgroundCommands, ContentCommands } from '@extension/common/commands';\r\nimport HandlePromise from '@extension/common/handle_promise';\r\n\r\nexport default class ContentAutoPlayDetection extends ScriptBase\r\n{\r\n  constructor()\r\n  {\r\n    super(ContentCommands.PING_CONTENT_AUTOPLAY_DETECTION);\r\n  }\r\n\r\n  autoRunVideo(url)\r\n  {\r\n    const command = BackgroundCommands.AUTO_RUN_VIDEO_SITE;\r\n    chrome.runtime.sendMessage({ command, url });\r\n  }\r\n\r\n  saveLastClickedTime(time)\r\n  {\r\n    const command = BackgroundCommands.SAVE_CLICK_EVENT_TIME;\r\n    chrome.runtime.sendMessage({ command, last_event: time });\r\n  }\r\n\r\n  getLastClickedTime()\r\n  {\r\n    const command = BackgroundCommands.GET_CLICK_EVENT_TIME;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n\r\n  main()\r\n  {\r\n    const autoplayDetectedFn = (videoSrc) => this.autoRunVideo(videoSrc);\r\n    const setLastSavedTimeFn = (time) => this.saveLastClickedTime(time);\r\n    const getLastSavedTimeFn = () => this.getLastClickedTime();\r\n\r\n    const autoplaydetection = new AutoPlayDetection();\r\n    autoplaydetection.init(autoplayDetectedFn, setLastSavedTimeFn, getLastSavedTimeFn);\r\n  }\r\n}\r\n\r\nconst contentAutoPlayDetection = new ContentAutoPlayDetection();\r\ncontentAutoPlayDetection.main();\r\n"],"names":["ScriptBase","constructor","pingCommand","this","basePingListener","callback","chrome","runtime","onMessage","addListener","request","sender","responseCb","id","command","content","MUTATION_READY_STATE","AutoPlayVideoMutation","autoplayDetectedfn","getLastSavedTimeFn","setLastSavedTimeFn","USER_PLAYED","PROCESSED_VIDEO","CLICK_PLAY_INTERVAL","init","document","defaultView","top","window","addEventListener","_setLastClickedTime","bind","_processLoadedElements","_handlePlay","videoElement","_onplay","async","videoSrc","src","length","currentSrc","getAttribute","lastClickedTime","_getLastClickedTime","Date","now","setAttribute","_processVideoElement","element","currentTime","paused","ended","readyState","autoplay","_recursiveProcess","index","childNodes","HTMLMediaElement","nodeAdded","node","setTimeout","mediaElems","querySelectorAll","AutoPlayDetection","mutationHandler","autoplayDetectedFn","MutationObserver","handleMutations","observe","childList","subtree","records","forEach","record","addedElement","addedNodes","BackgroundCommands","ContentCommands","HandlePromise","static","message","customCallback","Promise","resolve","reject","sendMessage","data","lastError","defaultCallback","super","autoRunVideo","url","saveLastClickedTime","time","last_event","getLastClickedTime","handlePromiseMessage","main"],"sourceRoot":""}
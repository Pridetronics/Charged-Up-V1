{"version":3,"file":"scripts/content_site_listener.js","mappings":"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","sources":["webpack:///./extension/common/commands.js","webpack:///./extension/scripts/content_base.js","webpack:///./extension/common/webextension.js","webpack:///./extension/common/handle_promise.js","webpack:///./extension/common/background_ipc.js","webpack:///./extension/scripts/content_site_listener.js"],"sourcesContent":["/**\r\n * The command ids supported for IPC between content process and chrome/background process.\r\n */\r\n\r\nexport const BackgroundCommands = {\r\n  // Generic Commands\r\n  CACHE_STORE: 'CACHE_STORE',\r\n  CONTENT_HANDLER: 'CONTENT_HANDLER',\r\n  EXECUTE_COMMAND: 'EXECUTE_COMMAND',\r\n  FOCUS_OR_CREATE_TAB: 'FOCUS_OR_CREATE_TAB',\r\n  GET_BK_GLOBALS: 'GET_BK_GLOBALS',\r\n  GET_EXTENSION_STATUS: 'GET_EXTENSION_STATUS',\r\n  GET_TAB_DATA: 'GET_TAB_DATA',\r\n  TI_REQUEST: 'TI_REQUEST',\r\n  INSTALL_EXTENSION: 'INSTALL_EXTENSION',\r\n  PLACEHOLDER_TEXT: 'PLACEHOLDER_TEXT',\r\n  REMOVE_TAB: 'REMOVE_TAB',\r\n  SEND_TELEMETRY: 'SEND_TELEMETRY',\r\n  SET_VIEWPORT: 'SET_VIEWPORT',\r\n  WHITELIST: 'WHITELIST',\r\n  RESET_NATIVE_SETTING: 'RESET_NATIVE_SETTING',\r\n  UPDATE_BK_NATIVE_SETTINGS: 'UPDATE_BK_NATIVE_SETTINGS',\r\n\r\n  // Options Menu / Settings Page\r\n  SHOW_SIDEBAR_MAIN: 'SHOW_SIDEBAR_MAIN',\r\n  GET_POPUP_DATA: 'GET_POPUP_DATA',\r\n  GET_SETTINGS_DATA: 'GET_SETTINGS_DATA',\r\n  RESET_SETTINGS: 'RESET_SETTINGS',\r\n\r\n  // Autoplay video\r\n  AUTO_RUN_VIDEO_SITE: 'AUTO_RUN_VIDEO_SITE',\r\n  GET_CLICK_EVENT_TIME: 'GET_CLICK_EVENT_TIME',\r\n  SAVE_CLICK_EVENT_TIME: 'SAVE_CLICK_EVENT_TIME',\r\n\r\n  // Typosquatting\r\n  GET_TYPOSQUATTING_DATA: 'GET_TYPOSQUATTING_DATA',\r\n\r\n  // Block Page / Iframe / Site Report\r\n  IS_FRAME_BLOCKED: 'IS_FRAME_BLOCKED',\r\n  IS_WHITELISTED: 'IS_WHITELISTED',\r\n  ANY_BLOCKED_IFRAMES: 'ANY_BLOCKED_IFRAMES',\r\n  ANY_BLOCKED_CRYPTOSCRIPTS: 'ANY_BLOCKED_CRYPTOSCRIPTS',\r\n  UNBLOCK_ALL_IFRAMES: 'UNBLOCK_ALL_IFRAMES',\r\n  VIEW_SITE_REPORT: 'VIEW_SITE_REPORT',\r\n\r\n  // Annotations\r\n  SEARCH_ANNOTATION: 'SEARCH_ANNOTATION',\r\n  UPDATE_ENGINE_STATS: 'UPDATE_ENGINE_STATS',\r\n\r\n  // SMA\r\n  SOCIAL_MEDIA_ANNOTATION: 'SOCIAL_MEDIA_ANNOTATION',\r\n\r\n  // RAT Detection\r\n  UPDATE_RAT_DETECTION_SHOWING_FLAG: 'UPDATE_RAT_DETECTION_SHOWING_FLAG',\r\n\r\n  // Search Suggestion\r\n  SEARCH_SUGGEST: 'SEARCH_SUGGEST',\r\n\r\n  // Form detection\r\n  SAVE_FORM_INFO: 'SAVE_FORM_INFO',\r\n  GET_FORM_INFO_CACHE: 'GET_FORM_INFO_CACHE',\r\n  CLEAR_FORM_INFO_CACHE: 'CLEAR_FORM_INFO_CACHE',\r\n  SAVE_MULTISTEP_LOGIN: 'SAVE_MULTISTEP_LOGIN',\r\n  GET_FD_WEIGHTS: 'GET_FD_WEIGHTS',\r\n  GET_FD_EXCEPTIONS: 'GET_FD_EXCEPTIONS',\r\n  GET_FD_CRF_PARAMS: 'GET_FD_CRF_PARAMS',\r\n\r\n  // DWS\r\n  CLEAR_CACHED_DWS_INFO: 'CLEAR_DWS_INFO',\r\n  GET_CACHED_DWS_INFO: 'GET_CACHED_DWS_INFO',\r\n  UPDATE_DWS_WHITELIST: 'UPDATE_DWS_WHITELIST',\r\n  LAUNCH_IDPS_LOGIN: 'LAUNCH_IDPS_LOGIN',\r\n  UPDATE_DWS_SHOWN: 'UPDATE_DWS_SHOWN',\r\n\r\n  // APS\r\n  GET_APS_DETAILS: 'GET_APS_DETAILS',\r\n  FORM_PRE_CHECK_PASSED: 'FORM_PRE_CHECK_PASSED',\r\n  SIGN_UP_FORM_DETECTED: 'SIGN_UP_FORM_DETECTED',\r\n\r\n  // Firefox Policy Consent\r\n  SET_FF_POLICY_COLLECTION: 'SET_FF_POLICY_COLLECTION',\r\n  SET_FF_POLICY_LAST_SHOWN: 'SET_FF_POLICY_LAST_SHOWN',\r\n};\r\n\r\nexport const ContentCommands = {\r\n  // Commands handled by iframes\r\n  UNBLOCK_IFRAME: 'UNBLOCK_IFRAME',\r\n\r\n  // Content UI Handler Commands\r\n  BALLOON_MESSAGE: 'BALLOON_MESSAGE',\r\n  PAGE_OVERLAY: 'PAGE_OVERLAY',\r\n  SIDEBAR: 'SIDEBAR',\r\n  TOPBAR: 'TOPBAR',\r\n\r\n  // Ping\r\n  PING_CONTENT_ANNOTATION: 'PING_CONTENT_ANNOTATION',\r\n  PING_CONTENT_RAT_DETECTION: 'PING_CONTENT_RAT_DETECTION',\r\n  PING_CONTENT_IFRAME_BANNER: 'PING_CONTENT_IFRAME_BANNER',\r\n  PING_CONTENT_AUTOPLAY_DETECTION: 'PING_CONTENT_AUTOPLAY_DETECTION',\r\n  PING_CONTENT_SIDEBAR_MAIN: 'PING_CONTENT_SIDEBAR_MAIN',\r\n  PING_CONTENT_FF_DL_OVERLAY: 'PING_CONTENT_FF_DL_OVERLAY',\r\n  PING_CONTENT_CRYPTO_BLOCK: 'PING_CONTENT_CRYPTO_BLOCK',\r\n  PING_CONTENT_FF_VIEWPORTS: 'PING_CONTENT_FF_VIEWPORTS',\r\n  PING_CONTENT_IDPS: 'PING_CONTENT_IDPS',\r\n  PING_CONTENT_APS_TOAST: 'PING_CONTENT_APS_TOAST',\r\n  PING_CONTENT_APS_BALLOON: 'PING_CONTENT_APS_BALLOON',\r\n  PING_CONTENT_APS_OBSERVER: 'PING_CONTENT_APS_OBSERVER',\r\n  PING_CONTENT_SITE_LISTENER: 'PING_CONTENT_SITE_LISTENER',\r\n  PING_IFRAME_FORM_CHECK: 'PING_IFRAME_FORM_CHECK',\r\n  PING_IFRAME_FORM_DETECTION: 'PING_IFRAME_FORM_DETECTION',\r\n  PING_IFRAME_BLOCK: 'PING_IFRAME_BLOCK',\r\n\r\n  // APS\r\n  APS_REGISTRATION_PAGE: 'APS_REGISTRATION_PAGE',\r\n\r\n  // Broadcast to foreground\r\n  BROADCAST_TO_FOREGROUND: 'BROADCAST_TO_FOREGROUND',\r\n\r\n  // Annotation Journey Toast\r\n  TRIGGER_AJ_TOAST: 'TRIGGER_AJ_TOAST'\r\n};\r\n\r\n// **********************************************\r\n// SUB-COMMANDS USED BY CONTENT HANDLER COMMANDS:\r\n// **********************************************\r\n\r\nexport const SideBarCommands = {\r\n  MAIN: 'MAIN',\r\n  RELOAD: 'RELOAD',\r\n  SMA: 'SMA',\r\n  RAT_DETECTION: 'RAT_DETECTION',\r\n};\r\n\r\nexport const BalloonMessageCommands = {\r\n  ADVANCED_PROTECTION_SIGNAL: 'ADVANCED_PROTECTION_SIGNAL',\r\n  ADVANCED_PROTECTION_SIGNAL_TOAST: 'ADVANCED_PROTECTION_SIGNAL_TOAST',\r\n  DWS: 'DWS',\r\n};\r\n\r\nexport const TopBarCommands = {\r\n  CRYPTO_BLOCK: 'CRYPTO_BLOCK',\r\n  IFRAME_BLOCK: 'IFRAME_BLOCK',\r\n  TRIGGER_ALLOW: 'TRIGGER_ALLOW',\r\n};\r\n\r\nexport const PageOverlayCommands = {\r\n  SEARCH_EXTENSION_OVERLAY: 'SEARCH_EXTENSION_OVERLAY',\r\n  FINISH_DOWNLOAD: 'FINISH_DOWNLOAD',\r\n};\r\n\r\nexport const ExternalCommands = {\r\n  // Legacy\r\n  PING: 0,\r\n  DISCONNECT_NATIVE: 1,\r\n  SET_PROPERTY_EX: 2, //  For automation\r\n  SET_PROPERTY: 3, // For automation\r\n  GET_PROPERTY: 4, // For automation\r\n  CLEAR_GTI_CACHE: 5, // For automation\r\n  RESET_CRYPTO: 6, // For automation\r\n  CLEAN_TYPOSQUATING_WHITELIST: 7, // For automation\r\n  CLEAR_TYPOSQUATING_CACHE: 8, // For automation\r\n  CLEAN_CRYPTO_WHITELIST: 10, // For automation\r\n  CLEAN_RAT_WHITELIST: 12, // For automation\r\n  CLEAN_RAT_CACHE: 13, // For automation\r\n  REPLACE_TRUSTED_DOMAIN: 15, // For automation\r\n  VERIFY_GTI_REQUEST: 17, // For automation\r\n  VERIFY_TYPOSQUAT_SERVER: 18, // For watchdog automation\r\n  GET_ALL_WA_SETTINGS: 19, // For automation extension\r\n  SET_STORAGE_PROPERTY: 20, // Set a local storage property within WA\r\n  GET_STORAGE_PROPERTY: 21, // Get a local storage property within WA (for automation)\r\n  REINIT_SCHEDULED_TASKS: 22,\r\n  OPEN_SETTINGS: 23, // For personal protection hub\r\n  OPEN_ACTION_PANEL: 24, // For personal protection hub\r\n  GET_MEMORY_FOOTPRINT: 26, // For automation, endurance run\r\n  ENDURANCE_TEST_RESET: 27, // For automation, endurance run\r\n  FORM_DETECTION_RESULT: 28,\r\n  SHOW_UNUSED_SELECTORS: 29, // For automation\r\n  SET_MTI_GLOBALS: 30\r\n};\r\n\r\nexport const ExternalResponse = {\r\n  PONG: 0,\r\n};\r\n","export default class ScriptBase\r\n{\r\n  constructor(pingCommand)\r\n  {\r\n    this.pingCommand = pingCommand;\r\n    this.basePingListener();\r\n  }\r\n\r\n  basePingListener(callback = null)\r\n  {\r\n    chrome.runtime.onMessage.addListener((request, sender, responseCb) =>\r\n    {\r\n      if (sender.id !== chrome.runtime.id)\r\n      {\r\n        return;\r\n      }\r\n\r\n      const { command } = request;\r\n      if (command === this.pingCommand)\r\n      {\r\n        responseCb({ content: true });\r\n        if (typeof callback === 'function') callback();\r\n      }\r\n    });\r\n  }\r\n}\r\n","export const extension = WEBPACK_BROWSER_NAME === 'chrome' || WEBPACK_BROWSER_NAME === 'edge' ? chrome : browser; // eslint-disable-line no-undef\r\n","export default class HandlePromise\r\n{\r\n  static handlePromiseMessage(message, customCallback = null)\r\n  {\r\n    const defaultCallback = (resolve, reject, data) =>\r\n    {\r\n      if (chrome.runtime.lastError) reject(chrome.runtime.lastError.message);\r\n      resolve(data);\r\n    };\r\n\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n      chrome.runtime.sendMessage(message, (data) =>\r\n      {\r\n        if (typeof customCallback === 'function') customCallback(resolve, reject, data);\r\n        else defaultCallback(resolve, reject, data);\r\n      });\r\n    });\r\n  }\r\n}\r\n","import { extension } from '@extension/common/webextension';\r\nimport { BackgroundCommands, ContentCommands } from '@extension/common/commands';\r\nimport HandlePromise from '@extension/common/handle_promise';\r\n\r\n/**\r\n * Handles communication from content process to the background process.\r\n */\r\nexport default class BackgroundIPC\r\n{\r\n  static cacheStore(action, data)\r\n  {\r\n    const command = BackgroundCommands.CACHE_STORE;\r\n    return HandlePromise.handlePromiseMessage({ command, action, data });\r\n  }\r\n\r\n  static isFrameBlocked(url)\r\n  {\r\n    const command = BackgroundCommands.IS_FRAME_BLOCKED;\r\n    return HandlePromise.handlePromiseMessage({ command, url });\r\n  }\r\n\r\n  static makeMTIRequest(requestData, referer)\r\n  {\r\n    const command = BackgroundCommands.TI_REQUEST;\r\n    const request = { command, requestData, referer };\r\n    return HandlePromise.handlePromiseMessage(request);\r\n  }\r\n\r\n  static executeCommand(commandId, params)\r\n  {\r\n    const command = BackgroundCommands.EXECUTE_COMMAND;\r\n    extension.runtime.sendMessage({ command, commandId, params });\r\n  }\r\n\r\n  static focusOrCreateTab(url)\r\n  {\r\n    const command = BackgroundCommands.FOCUS_OR_CREATE_TAB;\r\n    extension.runtime.sendMessage({ command, url });\r\n  }\r\n\r\n  static closeTab()\r\n  {\r\n    const command = BackgroundCommands.REMOVE_TAB;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  static whitelist(action, type, data)\r\n  {\r\n    const command = BackgroundCommands.WHITELIST;\r\n    return HandlePromise.handlePromiseMessage({ action, command, type, data });\r\n  }\r\n\r\n  static getPopupData()\r\n  {\r\n    const command = BackgroundCommands.GET_POPUP_DATA;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n\r\n  static getSettingsData()\r\n  {\r\n    const command = BackgroundCommands.GET_SETTINGS_DATA;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n\r\n  static searchAnnotation(action, data)\r\n  {\r\n    const command = BackgroundCommands.SEARCH_ANNOTATION;\r\n    return HandlePromise.handlePromiseMessage({ action, data, command });\r\n  }\r\n\r\n  static socialMediaAnnotation(action, data)\r\n  {\r\n    const command = BackgroundCommands.SOCIAL_MEDIA_ANNOTATION;\r\n    return HandlePromise.handlePromiseMessage({ action, data, command });\r\n  }\r\n\r\n  static async getBkGlobals(bIncludeSearchEngines = false)\r\n  {\r\n    return new Promise((resolve) =>\r\n    {\r\n      const command = BackgroundCommands.GET_BK_GLOBALS;\r\n      const promise = HandlePromise.handlePromiseMessage({ command, bIncludeSearchEngines });\r\n      promise.then((val) => { resolve(JSON.parse(val)); });\r\n    });\r\n  }\r\n\r\n  static viewSiteReport(url = null, showInNewTab = false)\r\n  {\r\n    const command = BackgroundCommands.VIEW_SITE_REPORT;\r\n    extension.runtime.sendMessage({ command, url, showInNewTab });\r\n  }\r\n\r\n  static getTypoSquattingData(domain)\r\n  {\r\n    const command = BackgroundCommands.GET_TYPOSQUATTING_DATA;\r\n    return HandlePromise.handlePromiseMessage({ command, domain });\r\n  }\r\n\r\n  static getPlaceholderText(id)\r\n  {\r\n    const command = BackgroundCommands.PLACEHOLDER_TEXT;\r\n    return HandlePromise.handlePromiseMessage({ command, id });\r\n  }\r\n\r\n  static setViewPort(x, y)\r\n  {\r\n    const command = BackgroundCommands.SET_VIEWPORT;\r\n    extension.runtime.sendMessage({ command, x, y });\r\n  }\r\n\r\n  static sendTelemetry(telemetry)\r\n  {\r\n    const command = BackgroundCommands.SEND_TELEMETRY;\r\n    extension.runtime.sendMessage({ command, telemetry });\r\n  }\r\n\r\n  static anyBlockedIframes(frameUrls)\r\n  {\r\n    const command = BackgroundCommands.ANY_BLOCKED_IFRAMES;\r\n    return HandlePromise.handlePromiseMessage({ command, frameUrls });\r\n  }\r\n\r\n  static anyBlockedCryptoScripts()\r\n  {\r\n    const command = BackgroundCommands.ANY_BLOCKED_CRYPTOSCRIPTS;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n\r\n  static resetSettings()\r\n  {\r\n    const command = BackgroundCommands.RESET_SETTINGS;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  static sendEngineStat(engine)\r\n  {\r\n    extension.runtime.sendMessage({ command: BackgroundCommands.UPDATE_ENGINE_STATS, engine });\r\n  }\r\n\r\n  static contentHandler(message)\r\n  {\r\n    const command = BackgroundCommands.CONTENT_HANDLER;\r\n    extension.runtime.sendMessage({ command, message });\r\n  }\r\n\r\n  static getTabData(payload = {})\r\n  {\r\n    const command = BackgroundCommands.GET_TAB_DATA;\r\n    const request = { command, ...payload };\r\n    return HandlePromise.handlePromiseMessage(request);\r\n  }\r\n\r\n  static isWhitelisted(url)\r\n  {\r\n    const command = BackgroundCommands.IS_WHITELISTED;\r\n    const request = { command, url };\r\n    return HandlePromise.handlePromiseMessage(request);\r\n  }\r\n\r\n  static getExtensionStatus(id)\r\n  {\r\n    return HandlePromise.handlePromiseMessage({ command: BackgroundCommands.GET_EXTENSION_STATUS, extension_id: id });\r\n  }\r\n\r\n  static unblockAllIframes()\r\n  {\r\n    const command = BackgroundCommands.UNBLOCK_ALL_IFRAMES;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  static updateRatDetectionShowingFlag(showed)\r\n  {\r\n    const command = BackgroundCommands.UPDATE_RAT_DETECTION_SHOWING_FLAG;\r\n    extension.runtime.sendMessage({ command, showed });\r\n  }\r\n\r\n  /**\r\n   * Send a message to the background to retrieve the results from Search Suggestion for the search term\r\n   *\r\n   * @param {String} searchTerm\r\n   */\r\n  static getSearchSuggest(searchTerm)\r\n  {\r\n    const command = BackgroundCommands.SEARCH_SUGGEST;\r\n    const request = { command, searchTerm };\r\n    return HandlePromise.handlePromiseMessage(request);\r\n  }\r\n\r\n  static resetNativeSetting(setting)\r\n  {\r\n    const command = BackgroundCommands.RESET_NATIVE_SETTING;\r\n    extension.runtime.sendMessage({ command, setting });\r\n  }\r\n\r\n  /**\r\n   * Save form info (logging info)\r\n   * @param {string} username - username entered in the form.\r\n   * @param {string} hostname - hostname of the page the form was submitted on.\r\n   */\r\n  static saveFormInfo(username, hostname)\r\n  {\r\n    const command = BackgroundCommands.SAVE_FORM_INFO;\r\n    extension.runtime.sendMessage({ command, username, hostname });\r\n  }\r\n\r\n  /**\r\n   * Send message to the backend to save login from multi-step detection\r\n   * @param {Object} data - Object containing the neccesary info from the form.\r\n   * @param {string} data.username - (optional) username entered into the form. Only supplied if login not complete, ie first step of multistep form.\r\n   * @param {string} data.hostanme - hostname of the page the form was submitted on.\r\n   * @param {Boolean} completeLogin - Whether or not the multistep login process is completed or not.\r\n   */\r\n  static saveMultiStepLogin(data, completeLogin)\r\n  {\r\n    const command = BackgroundCommands.SAVE_MULTISTEP_LOGIN;\r\n    extension.runtime.sendMessage({ command, data, completeLogin });\r\n  }\r\n\r\n  static getFormInfoCache()\r\n  {\r\n    const command = BackgroundCommands.GET_FORM_INFO_CACHE;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n\r\n  static clearFormInfoCache()\r\n  {\r\n    const command = BackgroundCommands.CLEAR_FORM_INFO_CACHE;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  /**\r\n   * Update list of emails to be excluded from DWS offering.\r\n   * The email is whitelisted either because the user said not to offer it again, or because the user\r\n   * added it to be monitored in the web portal.\r\n   * @param {*} email\r\n   */\r\n  static updateDWSWhitelist(email)\r\n  {\r\n    const command = BackgroundCommands.UPDATE_DWS_WHITELIST;\r\n    extension.runtime.sendMessage({ command, email });\r\n  }\r\n\r\n  static getCachedDWSInfo(email)\r\n  {\r\n    const command = BackgroundCommands.GET_CACHED_DWS_INFO;\r\n    const request = { command, email };\r\n    return HandlePromise.handlePromiseMessage(request);\r\n  }\r\n\r\n  static clearCachedDWSInfo(email)\r\n  {\r\n    const command = BackgroundCommands.CLEAR_CACHED_DWS_INFO;\r\n    extension.runtime.sendMessage({ command, email });\r\n  }\r\n\r\n  static updateDWSShown(email)\r\n  {\r\n    const command = BackgroundCommands.UPDATE_DWS_SHOWN;\r\n    extension.runtime.sendMessage({ command, email });\r\n  }\r\n\r\n  static getAPSDetails()\r\n  {\r\n    const command = BackgroundCommands.GET_APS_DETAILS;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n\r\n  static signUpFormDetected()\r\n  {\r\n    const command = BackgroundCommands.SIGN_UP_FORM_DETECTED;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  static updateBkNativeSettings(name, value)\r\n  {\r\n    const command = BackgroundCommands.UPDATE_BK_NATIVE_SETTINGS;\r\n    extension.runtime.sendMessage({ command, name, value });\r\n  }\r\n\r\n  static launchIDPSLogin()\r\n  {\r\n    const command = BackgroundCommands.LAUNCH_IDPS_LOGIN;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  static showSidebarMain()\r\n  {\r\n    const command = BackgroundCommands.SHOW_SIDEBAR_MAIN;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  static setFFPolicyCollection({ personal, activity })\r\n  {\r\n    const command = BackgroundCommands.SET_FF_POLICY_COLLECTION;\r\n    extension.runtime.sendMessage({ command, personal, activity });\r\n  }\r\n\r\n  static setFFPolicyLastShown()\r\n  {\r\n    const command = BackgroundCommands.SET_FF_POLICY_LAST_SHOWN;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  // This will broadcast a sendMessage to all page owned by us\r\n  // For example, to all foreground pages. A message will be sent to\r\n  // background as well but it will not be processed\r\n  static broadcastToForeground(payload)\r\n  {\r\n    const command = ContentCommands.BROADCAST_TO_FOREGROUND;\r\n    extension.runtime.sendMessage({ command, payload });\r\n  }\r\n\r\n  static getFDWeights()\r\n  {\r\n    const command = BackgroundCommands.GET_FD_WEIGHTS;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n\r\n  static getFDExceptions()\r\n  {\r\n    const command = BackgroundCommands.GET_FD_EXCEPTIONS;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n\r\n  static getFDCrfParams()\r\n  {\r\n    const command = BackgroundCommands.GET_FD_CRF_PARAMS;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n}\r\n","import { ContentCommands, ExternalCommands, ExternalResponse } from '@extension/common/commands';\r\nimport ScriptBase from '@extension/scripts/content_base';\r\nimport BackgroundIPC from '@extension/common/background_ipc';\r\n\r\nexport default class ContentSiteListener extends ScriptBase\r\n{\r\n  constructor()\r\n  {\r\n    super(ContentCommands.PING_CONTENT_SITE_LISTENER);\r\n  }\r\n\r\n  main()\r\n  {\r\n    const messageHandler = (res) =>\r\n    {\r\n      if (!res)\r\n      {\r\n        return;\r\n      }\r\n\r\n      const { data } = res;\r\n      if (!data)\r\n      {\r\n        return;\r\n      }\r\n\r\n      const { request_type: requestType, payload } = data;\r\n      if (requestType === undefined || payload === undefined)\r\n      {\r\n        return;\r\n      }\r\n\r\n      if (requestType === ExternalCommands.PING && !payload.done)\r\n      {\r\n        window.postMessage({ request_type: ExternalResponse.PONG, payload: { done: true } }, res.origin);\r\n      }\r\n\r\n      if (requestType === ExternalCommands.OPEN_SETTINGS)\r\n      {\r\n        const url = chrome.runtime.getURL('html/settings.html');\r\n        BackgroundIPC.focusOrCreateTab(url);\r\n      }\r\n\r\n      if (requestType === ExternalCommands.OPEN_ACTION_PANEL)\r\n      {\r\n        BackgroundIPC.showSidebarMain();\r\n      }\r\n    };\r\n\r\n    // Add listener to open settings\r\n    window.addEventListener('message', messageHandler, false);\r\n  }\r\n}\r\n\r\nconst contentSiteListener = new ContentSiteListener();\r\ncontentSiteListener.main();\r\n"],"names":["BackgroundCommands","ContentCommands","ExternalCommands","ExternalResponse","ScriptBase","constructor","pingCommand","this","basePingListener","callback","chrome","runtime","onMessage","addListener","request","sender","responseCb","id","command","content","extension","HandlePromise","static","message","customCallback","Promise","resolve","reject","sendMessage","data","lastError","defaultCallback","BackgroundIPC","action","handlePromiseMessage","url","requestData","referer","commandId","params","type","bIncludeSearchEngines","then","val","JSON","parse","showInNewTab","domain","x","y","telemetry","frameUrls","engine","payload","extension_id","showed","searchTerm","setting","username","hostname","completeLogin","email","name","value","personal","activity","super","main","window","addEventListener","res","request_type","requestType","undefined","done","postMessage","origin","getURL","focusOrCreateTab","showSidebarMain"],"sourceRoot":""}
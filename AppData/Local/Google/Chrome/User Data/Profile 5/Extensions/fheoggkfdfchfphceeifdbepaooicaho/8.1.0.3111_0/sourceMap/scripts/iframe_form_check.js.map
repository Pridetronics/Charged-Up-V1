{"version":3,"file":"scripts/iframe_form_check.js","mappings":";;;;;;;;;;;;;;;;;;;;;;uBAsEwB,IAtET,MAEbA,cAEEC,KAAKC,YAAc,yBACnBD,KAAKE,kBACP,CAEAA,iBAAiBC,EAAW,MAE1BC,OAAOC,QAAQC,UAAUC,aAAY,CAACC,EAASC,EAAQC,KAErD,GAAID,EAAOE,KAAOP,OAAOC,QAAQM,GAE/B,OAEF,MAAM,QAAEC,GAAYJ,EAChBI,IAAYZ,KAAKC,cAEnBS,EAAW,CAAEG,SAAS,IACE,mBAAbV,GAAyBA,IACtC,GAEJ,CAMAW,qBAGE,IAAIC,EAAY,IADDC,SAASC,qBAAqB,UAe7C,OAZAF,EAAYA,EAAUG,QAAQC,KAAWA,EAAMC,KAAKC,cAAcC,SAAS,YAClEH,EAAMI,UAAYJ,EAAMI,UAAUF,cAAgB,IAAIC,SAAS,WAChEH,EAAMR,GAAGU,cAAcC,SAAS,WAChCH,EAAMK,UAAUH,cAAcC,SAAS,WACvCH,EAAMM,aAAaJ,cAAcC,SAAS,WAC1CH,EAAMO,MAAML,cAAcC,SAAS,WACP,WAA7BH,EAAMQ,KAAKN,eACkB,aAA7BF,EAAMQ,KAAKN,eACkB,WAA7BF,EAAMQ,KAAKN,eACkB,WAA7BF,EAAMQ,KAAKN,eACkB,SAA7BF,EAAMQ,KAAKN,eACkB,WAA7BF,EAAMQ,KAAKN,iBACXN,EAAUa,OAAS,CAC5B,CAEAC,OAEE,GAAI7B,KAAKc,qBAEPV,OAAOC,QAAQyB,YAAY,CAAElB,QAAS,8BAGxC,CACE,MAAMmB,EAAW,IAAIC,kBAAiB,KAEhChC,KAAKc,uBAEPV,OAAOC,QAAQyB,YAAY,CAAElB,QAAS,0BACtCmB,EAASE,aACX,IAEIC,EAAS,CAAEC,WAAW,EAAMC,SAAS,GAC3CL,EAASM,QAAQrB,SAAUkB,EAC7B,CACF,IAGcL,M","sources":["webpack:///./extension/scripts/iframe_form_check.js"],"sourcesContent":["export default class IframeFormCheck\r\n{\r\n  constructor()\r\n  {\r\n    this.pingCommand = 'PING_IFRAME_FORM_CHECK';\r\n    this.basePingListener();\r\n  }\r\n\r\n  basePingListener(callback = null)\r\n  {\r\n    chrome.runtime.onMessage.addListener((request, sender, responseCb) =>\r\n    {\r\n      if (sender.id !== chrome.runtime.id)\r\n      {\r\n        return;\r\n      }\r\n      const { command } = request;\r\n      if (command === this.pingCommand)\r\n      {\r\n        responseCb({ content: true });\r\n        if (typeof callback === 'function') callback();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks for inputs on the current page or frame, to determine whether or not it may contain a form.\r\n   * @returns True if page or frame contains possible form fields, False otherwise.\r\n   */\r\n  isPossibleFormPage()\r\n  {\r\n    const inputs = document.getElementsByTagName('input');\r\n    let inputsArr = [...inputs];\r\n    // filter out search inputs and inputs that aren't considered by the form detection library.\r\n    inputsArr = inputsArr.filter((input) => !input.name.toLowerCase().includes('search')\r\n        && !(input.ariaLabel ? input.ariaLabel.toLowerCase() : '').includes('search')\r\n        && !input.id.toLowerCase().includes('search')\r\n        && !input.className.toLowerCase().includes('search')\r\n        && !input.defaultValue.toLowerCase().includes('search')\r\n        && !input.value.toLowerCase().includes('search')\r\n        && input.type.toLowerCase() !== 'hidden'\r\n        && input.type.toLowerCase() !== 'checkbox'\r\n        && input.type.toLowerCase() !== 'submit'\r\n        && input.type.toLowerCase() !== 'search'\r\n        && input.type.toLowerCase() !== 'file'\r\n        && input.type.toLowerCase() !== 'button');\r\n    return inputsArr.length > 0;\r\n  }\r\n\r\n  main()\r\n  {\r\n    if (this.isPossibleFormPage())\r\n    {\r\n      chrome.runtime.sendMessage({ command: 'FORM_PRE_CHECK_PASSED' });\r\n    }\r\n    else\r\n    {\r\n      const observer = new MutationObserver(() =>\r\n      {\r\n        if (this.isPossibleFormPage())\r\n        {\r\n          chrome.runtime.sendMessage({ command: 'FORM_PRE_CHECK_PASSED' });\r\n          observer.disconnect();\r\n        }\r\n      });\r\n      const config = { childList: true, subtree: true };\r\n      observer.observe(document, config);\r\n    }\r\n  }\r\n}\r\nconst iframeFormCheck = new IframeFormCheck();\r\niframeFormCheck.main();\r\n"],"names":["constructor","this","pingCommand","basePingListener","callback","chrome","runtime","onMessage","addListener","request","sender","responseCb","id","command","content","isPossibleFormPage","inputsArr","document","getElementsByTagName","filter","input","name","toLowerCase","includes","ariaLabel","className","defaultValue","value","type","length","main","sendMessage","observer","MutationObserver","disconnect","config","childList","subtree","observe"],"sourceRoot":""}
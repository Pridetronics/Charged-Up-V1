{"version":3,"file":"background.js","mappings":"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BACA,2BACA,6BACA,2BACA,qBACA,+BACA,iCACA,2CACA,8BACA,6BACA,sCACA,0CACA,4BACA,2BACA,+BACA,2BACA,oCACA,0BACA,uBACA,qCACA,+BACA,+BACA,6BACA,yBACA,uBACA,qCACA,2BACA,4BACA,yBACA,6BACA,2BACA,6BACA,8BACA,2BACA,2BACA,sDACA,4BACA,8BACA,sBACA,0BACA,0BACA,0BACA,yBACA,+BACA,yBACA,6BACA,gCACA,4BACA,6CACA,wBACA,2BACA,2BACA,uBACA,iDACA,4BACA,oCACA,yBACA,4BACA,wCACA,yBACA,8BACA,wBACA,qBACA,0BACA,yBACA,0BACA,qCACA,uBACA,2BACA,2BACA,sCACA,6BACA,uBACA,kCACA,2BACA,wCACA,yBACA,yBACA,yBACA,8BACA,2BACA,0BACA,iCACA,kCACA,kCACA,wCACA,yBACA,4CACA,2CACA,yCACA,6CACA,gDACA,6CACA,+BACA,6BACA,+BACA,+CACA,2BACA,6BACA,wBACA,gCExJAC,eAAgBhG,EAChBiG,eAAgB9E,EAChB+E,cAAe,KACfC,aFwJ0B,CAC1B,CACEC,OAAQ,yBACRC,KAAM,IAER,CACED,OAAQ,sBACRC,KAAM,CACJ,4DAGJ,CACED,OAAQ,qBACRC,KAAM,IAER,CACED,OAAQ,6BACRC,KAAM,IAER,CACED,OAAQ,cACRC,KAAM,IAER,CACED,OAAQ,iBACRC,KAAM,IAER,CACED,OAAQ,gBACRC,KAAM,IAER,CACED,OAAQ,qBACRC,KAAM,IAER,CACED,OAAQ,gBACRC,KAAM,KE5LRC,iBAAiB,EAGjBC,qBAAsB,KACtBC,gBAAiB,KACjBC,eAAe,EACfC,gBAAgB,EAGhBC,cAAe,KACfC,kBAAmB7G,EACnB8G,oBAAqB,MACrBhN,gBAAiB2E,EAAc3E,gBAG/BiN,gCAAgC,EAGhCC,iBAAiB,EAGjBC,cAAe,6CACfC,sBAAuB,gEACvBC,mBAAoB,KACpBC,kBAAkB,EAClBC,kBAAmB,KACnBC,kBAAmB,gCAGnBC,UAAW,KAGXC,wBAAyB,IACzBC,qBAAsB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","sources":["webpack:///webpack/runtime/create fake namespace object","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./extension/common/sma_variables.js","webpack:///./extension/common/annotation_variables.js","webpack:///./extension/common/cache_store_variables.js","webpack:///./extension/common/tab_data.js","webpack:///./extension/common/constants.js","webpack:///./extension/common/background_constants.js","webpack:///./extension/background/dispatchers/native/native_settings.js","webpack:///./extension/background/background_globals.js","webpack:///./extension/common/url_parser.js","webpack:///./extension/ui/foreground/foreground_globals.js","webpack:///./extension/common/logger.js","webpack:///./extension/background/whitelist_wrapper.js","webpack:///./extension/background/feature_stats.js","webpack:///./extension/common/webextension.js","webpack:///./extension/background/block_page_common.js","webpack:///./extension/background/content_injector/injector_common.js","webpack:///./extension/background/content_injector/injector.js","webpack:///./extension/common/commands.js","webpack:///./extension/background/content_injector/inject_base.js","webpack:///./extension/background/content_injector/inject_crypto_block.js","webpack:///./WABrowserExtension-Common/Annotations-Package/Common/globals.js","webpack:///./WABrowserExtension-Common/Annotations-Package/Common/resource_manager.js","webpack:///./extension/common/background_common.js","webpack:///./extension/background/listeners/cryptojacking_listener.js","webpack:///./extension/background/browser_action.js","webpack:///./extension/common/http_service.js","webpack:///./extension/background/typosquatting.js","webpack:///./coreengine/search_engine.js","webpack:///./extension/telemetry/common_telemetry.js","webpack:///./extension/telemetry/telemetry_message_modifiers.js","webpack:///./extension/common/handle_promise.js","webpack:///./extension/common/background_ipc.js","webpack:///./extension/utilities/utils.js","webpack:///./extension/telemetry/context_telemetry.js","webpack:///./extension/background/dispatchers/native/native_set_values.js","webpack:///./extension/background/background_utils.js","webpack:///./extension/background/dispatchers/native/native_generic_request.js","webpack:///./extension/background/feature_settings.js","webpack:///./extension/common/external_extensions.js","webpack:///./WABrowserExtension-Common/Common-Utils-Package/logger/logger_settings.js","webpack:///./WABrowserExtension-Common/Common-Utils-Package/logger/logger.js","webpack:///./WABrowserExtension-Common/GTI-Package/gti/gti_commands.js","webpack:///./WABrowserExtension-Common/GTI-Package/gti/gti_contants.js","webpack:///./WABrowserExtension-Common/GTI-Package/gti/gti_globals.js","webpack:///./WABrowserExtension-Common/GTI-Package/gti/gti_background_listener.js","webpack:///./WABrowserExtension-Common/Common-Utils-Package/utils/utils.js","webpack:///./WABrowserExtension-Common/Common-Utils-Package/storage/storage.js","webpack:///./WABrowserExtension-Common/Common-Utils-Package/http_service/http_service.js","webpack:///./WABrowserExtension-Common/GTI-Package/gti/gti_response.js","webpack:///./WABrowserExtension-Common/GTI-Package/gti/gti_response_builder.js","webpack:///./WABrowserExtension-Common/GTI-Package/gti/gti_body.js","webpack:///./WABrowserExtension-Common/GTI-Package/gti/gti_storage_variables.js","webpack:///./WABrowserExtension-Common/GTI-Package/gti/gti_cache.js","webpack:///./WABrowserExtension-Common/GTI-Package/gti/gti_requestor.js","webpack:///./WABrowserExtension-Common/GTI-Package/background_gti_requestor.js","webpack:///./WABrowserExtension-Common/HTI-Package/hti/hti_commands.js","webpack:///./WABrowserExtension-Common/HTI-Package/hti/hti_contants.js","webpack:///./WABrowserExtension-Common/HTI-Package/hti/hti_globals.js","webpack:///./WABrowserExtension-Common/HTI-Package/hti/hti_background_listener.js","webpack:///./WABrowserExtension-Common/Common-Utils-Package/scheduler/scheduler_manager.js","webpack:///./WABrowserExtension-Common/HTI-Package/hti/hti_response.js","webpack:///./WABrowserExtension-Common/HTI-Package/hti/hti_response_builder.js","webpack:///./WABrowserExtension-Common/HTI-Package/hti/hti_storage_variables.js","webpack:///./WABrowserExtension-Common/HTI-Package/hti/hti_cache_logic.js","webpack:///./WABrowserExtension-Common/HTI-Package/hti/hti_cache.js","webpack:///./WABrowserExtension-Common/HTI-Package/hti/hti_headers.js","webpack:///./WABrowserExtension-Common/Common-Utils-Package/scheduler/scheduled_task_base.js","webpack:///./WABrowserExtension-Common/HTI-Package/hti/schedulers/schedulers.js","webpack:///./WABrowserExtension-Common/HTI-Package/hti/schedulers/csp_token_refresh.js","webpack:///./WABrowserExtension-Common/HTI-Package/hti/schedulers/ever_green_urls_refresh.js","webpack:///./WABrowserExtension-Common/HTI-Package/hti/hti_requestor.js","webpack:///./WABrowserExtension-Common/HTI-Package/background_hti_requestor.js","webpack:///./extension/background/mti_initializer.js","webpack:///./BrowserHostFramework/jslib/smartnativeclient.js","webpack:///./extension/background/dispatchers/native/native_message_dispatcher_v1.js","webpack:///./WABrowserExtension-Common/Annotations-Package/Annotation/annotation_variables.js","webpack:///./extension/background/content_injector/inject_annotations.js","webpack:///./extension/common/whitelist_variables.js","webpack:///./extension/background/content_injector/inject_rat_detection.js","webpack:///./extension/background/content_injector/inject_iframe_banner.js","webpack:///./extension/background/content_injector/inject_iframe_block.js","webpack:///./extension/background/content_injector/inject_autoplay_detection.js","webpack:///./extension/background/content_injector/inject_form_check.js","webpack:///./extension/background/content_injector/inject_form_detection.js","webpack:///./extension/background/content_injector/inject_idps.js","webpack:///./extension/ui/balloon_message/advanced_protection_signal.js","webpack:///./extension/background/content_injector/inject_aps_balloon.js","webpack:///./extension/background/content_injector/inject_site_listener.js","webpack:///./extension/background/content_injector/inject_aps_toast.js","webpack:///./extension/background/content_injector/inject_aps_observer.js","webpack:///./extension/background/dispatchers/webrequest_dispatcher.js","webpack:///./extension/background/listeners/external_message_listener.js","webpack:///./extension/background/UnifiedAuthClient.js","webpack:///./extension/background/content_globals.js","webpack:///./WABrowserExtension-Common/Form-Detection-Package/crfParams.js","webpack:///./extension/background/form_detection.js","webpack:///./extension/background/listeners/message_listener.js","webpack:///./extension/background/listeners/onchanged_download_listener.js","webpack:///./extension/background/listeners/tab_listener.js","webpack:///./extension/background/listeners/webrequest_listener.js","webpack:///./extension/background/listeners/browser_action_listener.js","webpack:///./extension/background/listeners/listener_manager.js","webpack:///./webassembly/wasm-lib/pkg/snippets/wasm-lib-422e0d39f39ae3db/src/js-lib/js_lib.js","webpack:///./webassembly/wasm-lib/pkg/wasm_lib.js","webpack:///./extension/background/wasm/wasm_generator.js","webpack:///./extension/background/dispatchers/native/native_wss_message_dispatcher.js","webpack:///./extension/background/content_injector/inject_sidebar_main.js","webpack:///./extension/background/dispatchers/local_dispatcher.js","webpack:///./extension/background/schedulers/scheduledtaskbase.js","webpack:///./extension/background/schedulers/enginedownloadtask.js","webpack:///./extension/background/schedulers/schedulers.js","webpack:///./extension/background/schedulers/telemetryheartbeattask.js","webpack:///./extension/background/schedulers/schedulemanager.js","webpack:///./extension/background/cache_store.js","webpack:///./extension/background/garbage_collector.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/telemetry_globals.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/logger.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/utils.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/operations_manager.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/data_collector.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/dictionary_mapper.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/dataset_manager.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/event_manager.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/Transport/transport_base.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/emitter.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/Transport/transport_event_hub.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/Transport/transport_aws_api_gateway.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/priority_config.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/base_transmitter.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/transport_error.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/transport.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/event_handler.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/rules_manager.js","webpack:///./WABrowserExtension-Common/Telemetry-Package/index.js","webpack:///./extension/background/standAloneTelemetryWrapper.js","webpack:///./WABrowserExtension-Common/Search-Suggestion-Package/constants.js","webpack:///./WABrowserExtension-Common/Search-Suggestion-Package/index.js","webpack:///./node_modules/uuid/dist/esm-browser/native.js","webpack:///./node_modules/uuid/dist/esm-browser/rng.js","webpack:///./node_modules/uuid/dist/esm-browser/stringify.js","webpack:///./node_modules/uuid/dist/esm-browser/v4.js","webpack:///./extension/background/typosquatting_cache.js","webpack:///./extension/background/background.js"],"sourcesContent":["var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const SocialMediaTypes = {\r\n  NONE: 0,\r\n  LINKEDIN: 1,\r\n  INSTAGRAM: 2,\r\n  YOUTUBE: 4,\r\n  FACEBOOK: 8,\r\n  TWITTER: 16,\r\n  REDDIT: 32\r\n};\r\n\r\n// Sum of all Social Media Types\r\nexport const SocialMediaAllTypes = Object.values(SocialMediaTypes).reduce((sum, value) => sum + value);\r\n\r\nexport const SocialMediaActions = {\r\n  TOGGLE_ON: 'TOGGLE_ON',\r\n  TOGGLE_OFF: 'TOGGLE_OFF',\r\n  ANNOTATION_ENABLE_ALL: 'ANNOTATION_ENABLE_ALL',\r\n  ANNOTATION_DISABLE_ALL: 'ANNOTATION_DISABLE_ALL',\r\n  ANNOTATION_ENABLE: 'ANNOTATION_ENABLE',\r\n  ANNOTATION_DISABLE: 'ANNOTATION_DISABLE',\r\n  GET: 'GET',\r\n};\r\n","export const SearchAnnotationActions = {\r\n  GET: 'GET',\r\n  SET: 'SET',\r\n};\r\n\r\nexport const AnnotationOptions = {\r\n  NONE: 'NONE',\r\n  ONLY_SECURE_SEARCH: 'ONLY_SECURE_SEARCH',\r\n  ALL: 'ALL',\r\n  * [Symbol.iterator]() // Override the iterable protocol to allow spreading of keys (...AnnotationOptions)\r\n  {\r\n    for (const key of Object.keys(this))\r\n    {\r\n      yield key;\r\n    }\r\n  }\r\n};\r\n\r\n// DO NOT CHANGE the number for the search engine types\r\n// Some of these numbers are mapped to native's search providers\r\nexport const SearchEngineTypes = {\r\n  UNKNOWN: 0,\r\n  // Search engine annotations\r\n  GOOGLE: 1,\r\n  YAHOO: 2,\r\n  AOL: 3,\r\n  ASK: 4,\r\n  UOL: 5,\r\n  GOO: 6,\r\n  MYWAY: 7,\r\n  TERRA: 8,\r\n  WEB: 9,\r\n  BIGLOBE: 10,\r\n  GMX: 11,\r\n  EXCITE: 12,\r\n  SKY: 13,\r\n  NAVER: 14,\r\n  NIFTY: 15,\r\n  RAKUTEN: 16,\r\n  IXQUICK: 17,\r\n  XFINITY: 18,\r\n  SOGOU: 19,\r\n  DOGPILE: 20,\r\n  SEARCH: 21,\r\n  WEBCRAWLER: 22,\r\n  BING: 23,\r\n  INFO: 24,\r\n  YANDEX: 25,\r\n  YIPPY: 26, // No longer supported\r\n  WOW: 27,\r\n  HAOSO: 28,\r\n  DUCKDUCKGO: 30,\r\n  ONESEARCH: 31,\r\n  // Social media annotations\r\n  LINKEDIN: 100,\r\n  FACEBOOK: 101,\r\n  YOUTUBE: 102,\r\n  INSTAGRAM: 103,\r\n  REDDIT: 104,\r\n  TWITTER: 105,\r\n};\r\n\r\nexport const EngineType = {\r\n  SEARCH: 0,\r\n  SOCIALMEDIA: 1,\r\n};\r\n","import { SocialMediaTypes } from '@extension/common/sma_variables';\r\nimport { AnnotationOptions } from '@extension/common/annotation_variables';\r\n\r\nconst { NONE, ...NonZeroSocialMediaTypes } = SocialMediaTypes;\r\n\r\nexport const CacheStoreActions = {\r\n  SET: 'SET',\r\n  GET: 'GET',\r\n  CLEAR: 'CLEAR',\r\n};\r\n\r\n// All keys must be same as value\r\n// Stored in browser storage\r\nexport const LocalStorageVariables = {\r\n  // Number of times the first variant of yellow block page sidebar has been shown\r\n  BLOCK_PAGE_PHISHING_FIRST_VARIANT_COUNT: {\r\n    name: 'BLOCK_PAGE_PHISHING_FIRST_VARIANT_COUNT',\r\n    type: 'number'\r\n  },\r\n  // Did user accept SS in the past\r\n  // Sidebar Action Panels related\r\n  BLOCK_PAGE_RED_FIRST_VARIANT_COUNT: {\r\n    name: 'BLOCK_PAGE_RED_FIRST_VARIANT_COUNT',\r\n    type: 'number'\r\n  },\r\n  // Whitelist related\r\n  BLOCK_PAGE_WHITELIST: {\r\n    name: 'BLOCK_PAGE_WHITELIST',\r\n    type: 'array'\r\n  },\r\n  // Number of times the first variant of red block page sidebar has been shown\r\n  BLOCK_PAGE_YELLOW_FIRST_VARIANT_COUNT: {\r\n    name: 'BLOCK_PAGE_YELLOW_FIRST_VARIANT_COUNT',\r\n    type: 'number'\r\n  },\r\n  // blockpage whitelisted sites\r\n  CRYPTO_WHITELIST: {\r\n    name: 'CRYPTO_WHITELIST',\r\n    type: 'array'\r\n  },\r\n  // Telemetry related\r\n  ENGINE_DOWNLOAD_TASK: {\r\n    name: 'ENGINE_DOWNLOAD_TASK',\r\n    type: 'object'\r\n  },\r\n  // Engine JSON\r\n  ENGINES: {\r\n    name: 'ENGINES',\r\n    type: 'object'\r\n  },\r\n  ENGINES_FUTURE_TIME: { // TODO: Might not need - not being used\r\n    name: 'ENGINES_FUTURE_TIME',\r\n    type: 'object'\r\n  },\r\n  ENGINES_VERSION: {\r\n    name: 'ENGINES_VERSION',\r\n    type: 'string'\r\n  },\r\n  EXTENSION_LOGGING: {\r\n    name: 'EXTENSION_LOGGING',\r\n    options: [0, 1, 2, 3, 4],\r\n    type: 'number'\r\n  },\r\n  USE_NATIVE_LOGGER: {\r\n    name: 'USE_NATIVE_LOGGER',\r\n    type: 'boolean'\r\n  },\r\n  EXTN_UUID2: {\r\n    name: 'EXTN_UUID2',\r\n    type: 'string'\r\n  },\r\n\r\n  IFRAME_BLOCK_FIRST_TIME: {\r\n    name: 'IFRAME_BLOCK_FIRST_TIME',\r\n    type: 'boolean'\r\n  },\r\n  LAST_HEARTBEAT_SENT: { // TODO: Might not need - not being used\r\n    name: 'LAST_HEARTBEAT_SENT',\r\n    type: 'object'\r\n  },\r\n  POPUP_STATS: {\r\n    name: 'POPUP_STATS',\r\n    type: 'object'\r\n  },\r\n  POST_INSTALLATION_PAGE_SHOWED: { // TODO: Might not need - not being used\r\n    name: 'POST_INSTALLATION_PAGE_SHOWED',\r\n    type: 'object'\r\n  },\r\n  RAT_DETECTION_WHITELIST: {\r\n    name: 'RAT_DETECTION_WHITELIST',\r\n    type: 'array'\r\n  },\r\n  SEARCH_ANNOTATION_OPTION: {\r\n    name: 'SEARCH_ANNOTATION_OPTION',\r\n    options: [...AnnotationOptions],\r\n    type: 'string'\r\n  },\r\n  // Used as a flag to show SMA Notification for the first time only\r\n  SMA_ANNOTATION_OPTIONS: {\r\n    name: 'SMA_ANNOTATION_OPTIONS',\r\n    options: { ...NonZeroSocialMediaTypes }, // Objects signify checkboxes\r\n    type: 'number'\r\n  },\r\n  // SMA options the user has selected\r\n  SMA_USER_TOGGLE: {\r\n    name: 'SMA_USER_TOGGLE',\r\n    type: 'boolean'\r\n  },\r\n  TELEMETRY_HEARTBEAT_TASK: { // TODO: Complete definition\r\n    name: 'TELEMETRY_HEARTBEAT_TASK',\r\n    type: 'object'\r\n  },\r\n  TYPOSQUATTING_WHITELIST: {\r\n    name: 'TYPOSQUATTING_WHITELIST',\r\n    type: 'array'\r\n  },\r\n  CACHE_TYPOSQUATTING: {\r\n    name: 'CACHE_TYPOSQUATTING',\r\n    type: 'object'\r\n  },\r\n  CACHE_GTI: {\r\n    name: 'CACHE_GTI',\r\n    type: 'object'\r\n  },\r\n  CACHE_TAB_DATA: {\r\n    name: 'CACHE_TAB_DATA',\r\n    type: 'object'\r\n  },\r\n  // Flag to indicate whether to retrieve block page whitelist from native\r\n  USER_NATIVE_STATS: {\r\n    name: 'USER_NATIVE_STATS',\r\n    type: 'boolean'\r\n  },\r\n  // stats for what we have done for the user - shown on popup\r\n  WHITELIST_FLAG: {\r\n    name: 'WHITELIST_FLAG',\r\n    type: 'boolean'\r\n  },\r\n  // DWS Info\r\n  DWS_INFO: {\r\n    name: 'DWS_INFO',\r\n    type: 'object'\r\n  },\r\n  // list of emails already monitored or whitelisted by the user.\r\n  DWS_WHITELIST: {\r\n    name: 'DWS_WHITELIST',\r\n    type: 'array'\r\n  },\r\n  DWS_UNIQUE_EMAILS: {\r\n    name: 'DWS_UNIQUE_EMAILS',\r\n    type: 'array'\r\n  },\r\n  APS_TOAST_FIRST_TIME: {\r\n    name: 'APS_TOAST_FIRST_TIME',\r\n    type: 'boolean'\r\n  },\r\n  APS_FULL_MSG_SHOWN_ARRAY: {\r\n    name: 'APS_FULL_MSG_SHOWN_ARRAY',\r\n    type: 'array'\r\n  },\r\n  // Firefox user policy consent\r\n  FF_POLICY_PERSONAL_COLLECTION: {\r\n    name: 'FF_POLICY_PERSONAL_COLLECTION',\r\n    type: 'boolean'\r\n  },\r\n  FF_POLICY_ACTIVITY_COLLECTION: {\r\n    name: 'FF_POLICY_ACTIVITY_COLLECTION',\r\n    type: 'boolean'\r\n  },\r\n  FF_POLICY_LAST_SHOWN: {\r\n    name: 'FF_POLICY_LAST_SHOWN',\r\n    type: 'number'\r\n  },\r\n  // WA Affid\r\n  WA_AFFID: {\r\n    name: 'WA_AFFID',\r\n    type: 'number'\r\n  },\r\n  // APS TOGGLE SETTING\r\n  APS_TOGGLE_SETTING: {\r\n    name: 'APS_TOGGLE_SETTING',\r\n    type: 'boolean'\r\n  },\r\n  // ANNOTATION JOURNEY TOAST\r\n  AJ_TOAST: {\r\n    name: 'AJ_TOAST',\r\n    type: 'boolean'\r\n  },\r\n  AJ_APS_ENABLE: {\r\n    name: 'AJ_APS_ENABLE',\r\n    type: 'number'\r\n  },\r\n\r\n  HTI_THROTTLE: {\r\n    name: 'HTI_THROTTLE',\r\n    type: 'number'\r\n  },\r\n\r\n  IS_HTI: {\r\n    name: 'IS_HTI',\r\n    type: 'boolean'\r\n  },\r\n};\r\n\r\n// In memory only, not in browser storage, reset upon browser restart\r\nexport const CacheStorageVariables = {\r\n  // RAT Detection related:\r\n  RAT_DETECTION_SHOWING: {\r\n    name: 'RAT_DETECTION_SHOWING',\r\n    type: 'object'\r\n  },\r\n  // Form detection\r\n  FORM_INFO: {\r\n    name: 'FORM_INFO',\r\n    type: 'object'\r\n  },\r\n  SAVE_MULTI_STEP_LOGIN: {\r\n    name: 'SAVE_MULTI_STEP_LOGIN',\r\n    type: 'object'\r\n  },\r\n  APS_EMAIL_LINKS: {\r\n    name: 'APS_EMAIL_LINKS',\r\n    type: 'array'\r\n  },\r\n  WSS_EMAIL: {\r\n    name: 'WSS_EMAIL',\r\n    type: 'string'\r\n  }\r\n};\r\n","import { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport { LocalStorageVariables } from '@extension/common/cache_store_variables';\r\n\r\n/**\r\n * Tab data class and it's helper functions\r\n */\r\nexport default class TabData\r\n{\r\n  // Values that will get reset everytime we nativagate to a new page\r\n  static getResetValues()\r\n  {\r\n    return { blockedIframes: [], cryptoBlockData: null, tabDomainTrusted: false };\r\n  }\r\n\r\n  static getDefaultValues()\r\n  {\r\n    return TabData.getResetValues();\r\n  }\r\n\r\n  reset(tabId)\r\n  {\r\n    this.update(tabId, TabData.getResetValues());\r\n  }\r\n\r\n  get(tabId)\r\n  {\r\n    const cache = BackgroundGlobals.cacheStore.get(LocalStorageVariables.CACHE_TAB_DATA.name, {});\r\n    return cache[tabId] || TabData.getDefaultValues();\r\n  }\r\n\r\n  set(tabId, newTabData)\r\n  {\r\n    const cache = BackgroundGlobals.cacheStore.get(LocalStorageVariables.CACHE_TAB_DATA.name, {});\r\n    cache[tabId] = newTabData;\r\n    BackgroundGlobals.cacheStore.set(LocalStorageVariables.CACHE_TAB_DATA.name, cache);\r\n  }\r\n\r\n  delete(tabId)\r\n  {\r\n    const cache = BackgroundGlobals.cacheStore.get(LocalStorageVariables.CACHE_TAB_DATA.name, {});\r\n    delete (cache[tabId]);\r\n  }\r\n\r\n  update(tabId, newTabData)\r\n  {\r\n    const currentTabData = this.get(tabId);\r\n    this.set(tabId, { ...currentTabData, ...newTabData });\r\n  }\r\n\r\n  setTabBlockPageData(tabId, blockPageData)\r\n  {\r\n    const currentTabData = this.get(tabId);\r\n    this.set(tabId, { ...currentTabData, blockPageData });\r\n  }\r\n\r\n  addBlockedFrame(tabId, value)\r\n  {\r\n    const currentTabData = this.get(tabId);\r\n    currentTabData.blockedIframes.push(value);\r\n  }\r\n\r\n  getBlockedFrames(tabId)\r\n  {\r\n    const currentTabData = this.get(tabId);\r\n    return currentTabData.blockedIframes;\r\n  }\r\n\r\n  resetBlockedFrames(tabId)\r\n  {\r\n    const currentTabData = this.get(tabId);\r\n    currentTabData.blockedIframes = [];\r\n  }\r\n}\r\n","/**\r\n * The different webpage/url states that exists within WebAdvisor\r\n */\r\nexport const BlockState = {\r\n  GREEN: 0,\r\n  YELLOW: 1,\r\n  RED: 2,\r\n  UNKNOWN: 3,\r\n  HACKERSAFE: 4, // deprecated.\r\n  TYPOSQUATTING: 5,\r\n  PHISHING: 6,\r\n  * [Symbol.iterator]() // Create an iterable that returns all the \"bad\" states\r\n  {\r\n    for (const prop of Object.keys(this))\r\n    {\r\n      if (prop !== 'GREEN' && prop !== 'UNKNOWN')\r\n      {\r\n        yield this[prop];\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * The browsers that WebAdvisor supports\r\n */\r\nexport const BrowserType = {\r\n  UNKNOWN: -1,\r\n  FIREFOX: 1,\r\n  CHROME: 2,\r\n  EDGE: 3\r\n};\r\n\r\n/**\r\n * The default settings for extension. These settings are overrided at build time\r\n */\r\nexport const BuildSettings = {\r\n  /* eslint-disable no-undef */\r\n  BROWSER_TYPE: WEBPACK_BROWSER_TYPE,\r\n  DEBUG_MODE: WEBPACK_DEBUG_MODE,\r\n  EXTENSION_VERSION: WEBPACK_EXTN_VERSION,\r\n  LOG_LEVEL: WEBPACK_LOG_LEVEL,\r\n  ENGINES_VERSION: WEBPACK_ENGINES_VERSION,\r\n  YEAR: WEBPACK_YEAR,\r\n  /* eslint-enable no-undef */\r\n};\r\n\r\n/**\r\n * Values to let the native know which Block Page type was shown\r\n */\r\nexport const WPSBlockPageType = {\r\n  Red: 1,\r\n  Yellow: 2,\r\n  Phishing: 3,\r\n  Typoquatting: 4,\r\n  iFrame: 5,\r\n  Crypto: 6,\r\n};\r\n\r\n/**\r\n * Every possible color status shown on WebAdvisor\r\n */\r\nexport const Color = {\r\n  GREEN: 0,\r\n  YELLOW: 1,\r\n  RED: 2,\r\n  UNKNOWN: 3,\r\n  HACKERSAFE: 4, // deprecated.\r\n  DISABLED: 5,\r\n};\r\n\r\n/**\r\n * The different commands that can be executed in the application\r\n */\r\nexport const ExecuteCommands = {\r\n  RAISE_NEW_TAB_EVENT: 3,\r\n  UPDATE_CACHE_STATS: 4 // deprecated.\r\n};\r\n\r\n/**\r\n * The corresponding color values for browser action icon\r\n */\r\nexport const BrowseActionColors = {\r\n  [Color.GREEN]: 'GREEN',\r\n  [Color.YELLOW]: 'YELLOW',\r\n  [Color.RED]: 'RED',\r\n  [Color.UNKNOWN]: 'WHITE',\r\n  [Color.DISABLED]: 'DISABLED',\r\n};\r\n\r\n/**\r\n * The score value ranges that determine the outcome of a webpage's safety\r\n */\r\nexport const Score = {\r\n  CLEAN: 70, // Green\r\n  UNVERIFIED: 30, // Yellow\r\n  DIRTY: 1, // Red\r\n}; // Default Grey (0)\r\n\r\n/**\r\n * Constructs a new object with the object key and values swapped.\r\n * @param   {Object} original - The original object to swap the key and values\r\n * @returns {Object} - The new constructed object with the key and values swapped\r\n */\r\nexport const swapObjectPropertyAndValues = (original) =>\r\n{\r\n  const swapped = {};\r\n\r\n  Object.keys(original).forEach((prop) =>\r\n  {\r\n    swapped[original[prop]] = prop;\r\n  });\r\n\r\n  return swapped;\r\n};\r\n\r\nexport const SEARCH_EXTENSION_DOWNLOAD_URLS = {\r\n  FF: 'https://sadownload.mcafee.com/products/SA/Win/xpi/searchextension/searchextension.xpi',\r\n};\r\n\r\nexport const SEARCH_EXTENSION_STORE_URLS = {\r\n  CH: 'https://chrome.google.com/webstore/detail/mcafee%C2%AE-secure-search/enppghjcblldgigemljohkgpcompnjgh',\r\n  ED: 'https://microsoftedge.microsoft.com/addons/detail/dbghilognjpbmkdcpjgodiieiflmlaeb'\r\n};\r\n\r\n// generate a range of numbers for using in WhitelistedKeys' codes\r\nexport const KEY_CODES_RANGE = (start, end) => Array.from(Array(end + 1).keys()).slice(start);\r\n\r\nexport const SEARCH_URL = {\r\n  YAHOO: 'https://search.yahoo.com/search?fr=mcafee&type=C040US0D19700101&p=',\r\n  BING: 'https://www.bing.com/search?partnercode=MC99&q=',\r\n};\r\n","export const BackgroundConstants = {\r\n  MAX_CACHE_RECORDS: 1000,\r\n  MAX_RESERVED_CALLBACK_ID: 5,\r\n  PHISHING_CATEGORY: 'ph',\r\n  SITE_ADVISOR_URL: 'www.siteadvisor.com/',\r\n  GTI_SERVER: 'https://webadvisorc.rest.gti.mcafee.com/1',\r\n  TYPOSQUATTING_SERVER: 'https://mip.api.mcafeewebadvisor.com/v1/typosquatting?',\r\n  ENGINE_VERSION_URL: 'https://sadownload.mcafee.com/products/SA/Win/extensions/engines/update.json',\r\n  HTI_SERVER: 'https://threat.api.mcafee.com/',\r\n};\r\n\r\n// Add 'watlab1.mcafee.int' to the list for testing.\r\nexport const TrustedDomains = new Set([\r\n  'www.mcafee.com',\r\n]);\r\n\r\nexport const CryptoBlacklist = [\r\n  'wss://*.gasolina.ml/*',\r\n  '*://kissdoujin.com/Content/js/c-hive.js*',\r\n  'wss://*.sen-to-zdrowie.ml/*',\r\n  '*://cookiescript.info/libs/*',\r\n  '*://rocks.io/assets/*',\r\n  '*://coin-have.com/c/*',\r\n  '*://coinnebula.com/lib/*',\r\n  'wss://*.coin-have.com/',\r\n  'ws://digger.cryptobara.com/*',\r\n  'ws://*.webminepool.tk/*',\r\n  '*://*.lewd.ninja/static/m.js*',\r\n  '*://tokyodrift.ga/dropyoulike/a-o/*',\r\n  '*://*.2giga.link/hive/lib/*',\r\n  '*://papoto.com/lib/*',\r\n  '*://load.jsecoin.com/*',\r\n  'ws://*.1q2w3.fun/*',\r\n  '*://*/*plugins/ajcryptominer/assets/*',\r\n  '*://monerominer.rocks/miner.php*',\r\n  '*://minemytraffic.com/*',\r\n  '*://*.monerise.com/core/*',\r\n  '*://*.cookiescript.info/libs/*',\r\n  'ws://hive.tubetitties.com/*',\r\n  'wss://*.freecontent.racing/*',\r\n  'wss://*.hodling.faith/*',\r\n  'ws://gtg02.bestsecurepractice.com/proxy',\r\n  '*://cryptoloot.pro/lib/*',\r\n  '*://lmodr.biz/*',\r\n  '*://*.webminepool.com/lib/base.js',\r\n  'ws://*.sen-to-zdrowie.ml/*',\r\n  'ws://*.morningdigit.com/*',\r\n  '*://mine.nahnoji.cz/*',\r\n  '*://*.minescripts.info/*',\r\n  '*://jsecoin.com/server*',\r\n  '*://coinhive.com/lib*',\r\n  'wss://*.webminepool.tk/*',\r\n  'ws://*.monerise.com/proxy/*',\r\n  '*://kisshentai.net/Content/js/c-hive.js*',\r\n  '*://mataharirama.xyz/*',\r\n  '*://*.coinpirate.cf/*',\r\n  'ws://*.playerassets.info/*',\r\n  'wss://*.1q2w3.fun/*',\r\n  '*://*.1q2w3.fun/*',\r\n  '*://anime.reactor.cc/js/ch/cryptonight.wasm*',\r\n  '*://webmine.cz/miner*',\r\n  'wss://ws.l33tsite.info/*',\r\n  '*://coinhive.com/captcha*',\r\n  'wss://www.mutuza.win/proxy',\r\n  '*://*.morningdigit.com/*',\r\n  'ws://*.host.d-ns.ga/*',\r\n  '*://*.doubleclick5.xyz/*',\r\n  '*://miner.pr0gramm.com/xmr.min.js*',\r\n  '*://*.freecontent.bid/*',\r\n  'ws://lewd.ninja/comics/*',\r\n  'wss://*.monerise.com:9333/proxy/*',\r\n  '*://*.webminepool.com/lib/captcha.js',\r\n  '*://coinerra.com/lib/*',\r\n  '*://*.playerassets.info/*',\r\n  'wss://*.webmine.pro/*',\r\n  'wss://lewd.ninja/comics/*',\r\n  '*://*.doubleclick1.xyz/*',\r\n  'ws://*.freecontent.racing/*',\r\n  '*://*.googleanalytcs.com/*',\r\n  'wss://*.coinnebula.com/proxy*',\r\n  'ws://*.monerise.com:9333/proxy/*',\r\n  'ws://*.freecontent.loan/*',\r\n  '*://party-nngvitbizn.now.sh/*',\r\n  'wss://api.l33tsite.info/*',\r\n  '*://coinlab.biz/lib/coinlab.js*',\r\n  'wss://*.monerise.com/proxy/*',\r\n  'ws://www.mutuza.win/proxy',\r\n  '*://jscdndel.com/content/vidm.min.js*',\r\n  '*://listat.biz/*',\r\n  '*://minecrunch.co/web/*',\r\n  'ws://*.chainblock.science/*',\r\n  '*://baiduccdn1.com/lib/*',\r\n  '*://*.mutuza.win/worker.js',\r\n  '*://*.load.jsecoin.com/*',\r\n  '*://ppoi.org/lib/*',\r\n  'wss://*.chainblock.science/*',\r\n  'wss://*.crypto-loot.com/proxy*',\r\n  'wss://gtg02.bestsecurepractice.com/proxy',\r\n  'wss://*.coinhive.com/proxy*',\r\n  '*://coin-hive.com/captcha*',\r\n  '*://jsccnn.com/content/vidm.min.js*',\r\n  '*://monerominer.rocks/scripts/miner.js*',\r\n  '*://*.jsecoin.com/server*',\r\n  '*://server.jsecoin.com/*',\r\n  'wss://*.coin-hive.com/proxy*',\r\n  '*://*.doubleclick4.xyz/*',\r\n  '*://miner.cryptobara.com/client/*',\r\n  '*://*.rocks.io/assets/*',\r\n  '*://*.ppoi.org/lib/*',\r\n  '*://you.tubetitties.com/worker.js*',\r\n  'wss://*.googleanalytcs.com/*',\r\n  'wss://hive.tubetitties.com/*',\r\n  '*://static.reasedoper.pw/*',\r\n  '*://*.ppoi.org/token/*',\r\n  'ws://*.webmine.pro/*',\r\n  '*://you.tubetitties.com/hash.wasm*',\r\n  '*://*.doubleclick3.xyz/*',\r\n  '*://*.turnsocial.com/m.js',\r\n  'ws://*.hodling.faith/*',\r\n  'wss://*.morningdigit.com/*',\r\n  '*://*.ad-miner.com/lib/*',\r\n  'wss://*.2giga.link/wproxy*',\r\n  'ws://*.googleanalytcs.com/*',\r\n  '*://*.doubleclick6.xyz/*',\r\n  'ws://turnsocial.now.sh/*',\r\n  '*://cdn.cloudcoins.co/javascript/cloudcoins.min.js*',\r\n  '*://joyreactor.cc/ws/ch/*',\r\n  '*://minero.pw/miner.min.js*',\r\n  '*://*.webmine.pro/*',\r\n  '*://punchsub.net/chm.js',\r\n  'wss://mine.nahnoji.cz/*',\r\n  'wss://mine.torrent.pw/*',\r\n  '*://*.mutuza.win/lib/*',\r\n  '*://*.kickass.cd/power2/m.js',\r\n  'ws://*.cpu2cash.link/*',\r\n  '*://*.server.jsecoin.com/*',\r\n  '*://*.mutuza.win/processor.js',\r\n  'wss://turnsocial.now.sh/*',\r\n  '*://kiwifarms.net/js/Jawsh/xmr/xmr.min.js*',\r\n  '*://*.rocks.io/proxy*',\r\n  '*://crypto-loot.com/lib*',\r\n  '*://*.chmproxy.bid/lib/*',\r\n  'ws://*.gasolina.ml/*',\r\n  '*://*.stackpathdns.com/assets/javascript/cr.js',\r\n  '*://*.coinblind.com/lib/*',\r\n  '*://miner.pr0gramm.com/pm.min.js*',\r\n  '*://*.bewhoyouare.gq/*',\r\n  'wss://*.zlx.com.br/proxy*',\r\n  '*://a-o.ninja/apk-AO/kingofthenorth/*',\r\n  '*://ad-miner.com/lib/*',\r\n  '*://*.webminepool.com/api/*',\r\n  '*://*.cpu2cash.link/*',\r\n  '*://*.hemnes.win/*',\r\n  'wss://*.cpu2cash.link/*',\r\n  'ws://*.coinpirate.cf/*',\r\n  'ws://ws.l33tsite.info/*',\r\n  '*://digger.cryptobara.com/client/*',\r\n  '*://kickass.cd/m.js*',\r\n  'ws://*.zlx.com.br/proxy*',\r\n  '*://*.doubleclick2.xyz/*',\r\n  '*://*.amazonaws.com/doubleclick13/*',\r\n  'wss://*.freecontent.loan/*',\r\n  '*://*.host.d-ns.ga/*',\r\n  '*://*.candid.zone/youtube.com/*',\r\n  'ws://api.l33tsite.info/*',\r\n  '*://gtg2.bestsecurepractice.com/lib/*',\r\n  'wss://*.host.d-ns.ga/*',\r\n  '*://coin-hive.com/lib*',\r\n  'ws://mine.nahnoji.cz/*',\r\n  'wss://*.playerassets.info/*',\r\n  '*://*.afminer.com/code/*',\r\n  'wss://*.coinpirate.cf/*',\r\n  '*://cookiescriptcdn.pro/libs/*',\r\n  '*://*.goredirect.party/assets/*',\r\n  '*://*.ZLX.COM.BR/assets/min.js*',\r\n  '*://*.ZLX.COM.BR/assets/playermon.js*',\r\n  '*://p.hemnes.win/lib/*',\r\n  '*://gtg02.bestsecurepractice.com/proxy2/*',\r\n  '*://gtg02.bestsecurepractice.com/meri.js',\r\n  '*://gtg02.bestsecurepractice.com/lv.js',\r\n  '*://gtg02.bestsecurepractice.com/worker.js',\r\n  '*://gtg02.bestsecurepractice.com/processor.js',\r\n  '*://gtg02.bestsecurepractice.com/demo.html',\r\n  '*://*.turnsocial.com/c.wasm*',\r\n  '*://*.turnsocial.com/m.js*',\r\n  '*://cdn.minescripts.info/c/*',\r\n  '*://tokyodrift.ga/dropyoulike/backup/c.wasm*',\r\n  '*://punchsub.net/chm2.js',\r\n  '*://*.kickass.cd/webmr4.js',\r\n  '*://*.kickass.cd/m.js',\r\n  'wss://*.authedmine.com/proxy'\r\n];\r\n\r\nexport const RatBlacklist = [\r\n  {\r\n    domain: 'www.beamyourscreen.com',\r\n    urls: [],\r\n  },\r\n  {\r\n    domain: 'www.connectwise.com',\r\n    urls: [\r\n      'www.connectwise.com/platform/unified-management/control'\r\n    ],\r\n  },\r\n  {\r\n    domain: 'get.gotoassist.com',\r\n    urls: [],\r\n  },\r\n  {\r\n    domain: 'fastsupport.gotoassist.com',\r\n    urls: [],\r\n  },\r\n  {\r\n    domain: 'www.join.me',\r\n    urls: [],\r\n  },\r\n  {\r\n    domain: 'www.mikogo.com',\r\n    urls: [],\r\n  },\r\n  {\r\n    domain: 'www.mikogo.de',\r\n    urls: [],\r\n  },\r\n  {\r\n    domain: 'www.securelink.com',\r\n    urls: [],\r\n  },\r\n  {\r\n    domain: 'join.zoho.com',\r\n    urls: [],\r\n  }\r\n];\r\n\r\nexport const ApsUrlList = {\r\n  shopping:\r\n  {\r\n    'www.amazon.com':\r\n    {\r\n      paths: ['buy/payselect/handlers', 'buy/addressselect/handlers']\r\n    }\r\n  },\r\n  email:\r\n  {\r\n    'mail.google.com/mail':\r\n    {\r\n      selector: 'table[role=presentation] > tr div[data-message-id] a'\r\n    },\r\n    'outlook.live.com/mail':\r\n    {\r\n      selector: 'div[role=complementary][aria-label] a'\r\n    },\r\n    'outlook.office.com/mail':\r\n    {\r\n      selector: 'div[role=complementary][aria-label] a'\r\n    },\r\n    'outlook.office365.com/mail':\r\n    {\r\n      selector: 'div[role=complementary][aria-label] a'\r\n    },\r\n    'mail.yahoo.com':\r\n    {\r\n      selector: 'div[role=main] ul li a'\r\n    },\r\n  }\r\n};\r\n","import { BrowserType, BuildSettings } from '@extension/common/constants';\r\n\r\nclass NativeSettingsPreprocess\r\n{\r\n  static PreprocessSecureSearchRegEx(value)\r\n  {\r\n    return value.trim().split('\\n');\r\n  }\r\n\r\n  static getBrowserSuffix()\r\n  {\r\n    const BROWSER_SUFFIX = {\r\n      CH: '_ch',\r\n      FF: '_ff',\r\n      IE: '_ie',\r\n      EDGE: '_ed',\r\n    };\r\n\r\n    const { CH, FF, EDGE } = BROWSER_SUFFIX;\r\n    const suffixBrowserMap = {};\r\n    suffixBrowserMap[BrowserType.EDGE] = EDGE;\r\n    suffixBrowserMap[BrowserType.FIREFOX] = FF;\r\n    suffixBrowserMap[BrowserType.CHROME] = CH;\r\n\r\n    return suffixBrowserMap[BuildSettings.BROWSER_TYPE];\r\n  }\r\n}\r\n\r\nexport const SCOPE = {\r\n  SYSTEM: 0,\r\n  USER: 1,\r\n};\r\nconst { SYSTEM, USER } = SCOPE;\r\n\r\nexport const SETTINGS_TYPE = {\r\n  NONE: 0,\r\n  INT: 1,\r\n  INT64: 2,\r\n  BOOL: 3,\r\n  STRING: 4,\r\n};\r\n\r\nexport const NativeConstants = {\r\n  WEBBOOST_AUTO_PLAY_NOTIFICATION: 'AutoPlayNotificationRequired',\r\n  WEBBOOST_UPSELL_DISABLED: 'WBUpsellDisabled', // TODO: re-introduce for WB Upsell\r\n  USE_NATIVE_LOGGER: 'UseNativeLogger',\r\n};\r\n\r\n// For retrieving native settings just change the one json object below. Access the nativeSettings value as eg BkGlobals.nativeSettings.AFF_ID.value\r\nconst _browser = NativeSettingsPreprocess.getBrowserSuffix();\r\nexport const NativeSettings = {\r\n  // Dev\r\n  DEV_MODE: { scope: SYSTEM, name: 'dev_mode', value: false },\r\n\r\n  // Product\r\n  AFF_ID: { scope: SYSTEM, name: '*Affid', value: 0 },\r\n  BINARY_VERSION: { scope: SYSTEM, name: 'version', value: null },\r\n  EXTENSION_VERSION_CH: { scope: SYSTEM, name: 'ChromeExtVersion', value: '', writeOnly: true },\r\n  EXTENSION_VERSION_FF: { scope: SYSTEM, name: '*FirefoxXPIVersion', value: '', writeOnly: true },\r\n  EXTENSION_VERSION_ED: { scope: SYSTEM, name: 'EdgeExtVersion', value: '', writeOnly: true },\r\n\r\n  // Machine\r\n  BROWSER_TYPE: { scope: SYSTEM, name: 'browsertype', value: '', writeOnly: true },\r\n  USER_AGENT: { scope: SYSTEM, name: 'useragent', value: '', writeOnly: true },\r\n\r\n  // Secure Search\r\n  SUGGESTION_URL: { scope: SYSTEM, name: 'suggestion_url', value: '' },\r\n  SCRIPT_GENERATED_DEFAULT_SS_URL: { scope: USER, name: `SCRIPT_GENERATED_DEFAULT_SS_URL${_browser}`, value: '' },\r\n  SECURE_SEARCH_REGEXES: { scope: USER, name: 'SECURE_SEARCH_REGEXES', value: '', preprocess: NativeSettingsPreprocess.PreprocessSecureSearchRegEx },\r\n  SHOW_SEARCH_SETTINGS: { scope: SYSTEM, name: '*ShowSearchSettings', value: true },\r\n  SECURE_SEARCH_TOAST_STAMP: { scope: USER, name: `*SSDateStampShowedToast${_browser}`, value: 0 },\r\n  SECURE_SEARCH_ANNOTATION_ONLY: { scope: SYSTEM, name: '*OnlyShowAnnotationsOnSecureSearch', value: true },\r\n  SECURE_SEARCH_SHOW_ICONS: { scope: USER, name: '*Icons', value: true },\r\n  SECURE_SEARCH_CHOICE: { scope: USER, name: `*SSToastChoice${_browser}`, value: false },\r\n  SS_DEF: { scope: SYSTEM, name: `*SS_DEF${_browser}`, value: 0 },\r\n  ANNOTATIONS_CHOICE_EXPLICIT: { scope: SYSTEM, name: `*AnnotationsChoiceExplicit${_browser}`, value: false },\r\n  CURRENT_SAO_IN_EXTENSION: { scope: USER, name: `*CurrentSAOInExtension${_browser}`, value: '' },\r\n\r\n  // Firefox Toast\r\n  FF_EXTENSION_LAST_TOAST_TIME: { scope: USER, name: 'ff_extension_last_toast_time', value: 0, writeOnly: true },\r\n  FF_EXTENSION_TOAST_COUNT: { scope: USER, name: 'ff_extension_toast_count', value: 0, writeOnly: true },\r\n\r\n  // Checklist Settings\r\n  CHECKLIST_START_INGORE_DATE_AV: { scope: SYSTEM, name: 'startIgnoreDateAV', value: '', writeOnly: true },\r\n  CHECKLIST_START_IGNORE_DATE_FW: { scope: SYSTEM, name: 'startIgnoreDateFW', value: '', writeOnly: true },\r\n  CHECKLIST_IGNORE_DURACTION: { scope: SYSTEM, name: 'ignoreDuration', value: '14', writeOnly: true },\r\n  CHECKLIST_GRACE_PERIOD_AV: { scope: SYSTEM, name: 'fixGracePeriodStartDateAV', value: '', writeOnly: true },\r\n  CHECKLIST_GRACE_PERIOD_FW: { scope: SYSTEM, name: 'fixGracePeriodStartDateFW', value: '', writeOnly: true },\r\n  CHECKLIST_GRACE_PERIOD_DURATION: { scope: SYSTEM, name: 'fixGracePeriodDuration', value: '24', writeOnly: true },\r\n\r\n  // Crypto\r\n  CRYPTOJACKING_DISABLED: { scope: SYSTEM, name: 'CryptojackingDisabled', value: false },\r\n\r\n  // SMA\r\n  SMA_USER_TOGGLE: { scope: SYSTEM, name: `sma_user_toggle${_browser}`, value: false, writeOnly: true },\r\n  SMA_ANNOTATION_OPTIONS: { scope: SYSTEM, name: `sma_annotation_options${_browser}`, value: 0, writeOnly: true },\r\n\r\n  // Stats\r\n  PAGES_SCANNED: { scope: SYSTEM, name: '*CounterPagesScanned', value: 0 },\r\n  PAGES_BLOCKED: { scope: SYSTEM, name: '*CounterPagesBlocked', value: 0 },\r\n  DOWNLOADS_SCANNED: { scope: SYSTEM, name: '*CounterDownloadsScanned', value: 0 },\r\n  DOWNLOADS_BLOCKED: { scope: SYSTEM, name: '*CounterDownloadsBlocked', value: 0 },\r\n  CRYPTO_BLOCKED: { scope: SYSTEM, name: '*CounterCryptoJackingBlocked', value: 0 },\r\n\r\n  // Native Whitelist\r\n  BLOCKPAGE_WHITELIST: { scope: USER, name: '*WhiteList', value: '' },\r\n  TS_WHITELIST: { scope: USER, name: '*TListWhiteList', value: '' },\r\n\r\n  // GTI\r\n  CSP_ID_SETTING: { scope: SYSTEM, name: 'CSPIdValue', value: '__not_available__' },\r\n\r\n  // Uninstall URL\r\n  UNINSTALL_SURVEY_ENABLED: { scope: SYSTEM, name: 'uninstall_survey_enabled', value: false },\r\n  UNINSTALL_SURVEY_URL: { scope: SYSTEM, name: 'uninstall_survey_url', value: '' },\r\n\r\n  // RAT Detection\r\n  RAT_DETECTION_ENABLED: { scope: SYSTEM, name: 'rat_detection_enabled', value: true },\r\n\r\n  // IDPS - enum type (0 = feature turned off | 1 = feature partially on, only for sending telemetry | 2 = feature turned on completely)\r\n  IDPS_FEATURE_ENABLED: { scope: SYSTEM, name: 'idps_feature_enabled', value: 0 },\r\n\r\n  // Advanced Protection Signal\r\n  APS_COHORT: { scope: SYSTEM, name: 'aps_cohort', value: 0 },\r\n  APS_TOGGLE_SETTING: { scope: SYSTEM, name: 'aps_toggle_setting', value: true },\r\n\r\n  // Alternative triggers\r\n  ALT_TRIGGER: { scope: SYSTEM, name: 'alt_triggers_cohort', value: 0 },\r\n\r\n  // Form detection optimization feature\r\n  IFRAME_FORM_CHECK_ENABLED: { scope: SYSTEM, name: 'iframe_form_check_enabled', value: true },\r\n\r\n  ANNOTATION_JOURNEY_COHORT: { scope: SYSTEM, name: `annotation_journey_cohort${_browser}`, value: 0 },\r\n  ANNOTATION_JOURNEY_TOAST: { scope: USER, name: `aj_toast${_browser}`, value: null },\r\n\r\n  // The throttle percentage for extension\r\n  HTI_THROTTLE: { scope: SYSTEM, name: 'hti_throttle', value: 0 },\r\n  MTI_CLIENT_ID: { scope: SYSTEM, name: 'gti_client_id', value: '' },\r\n};\r\n","// Background\r\n\r\nimport TabData from '@extension/common/tab_data';\r\nimport { BuildSettings } from '@extension/common/constants';\r\nimport { BackgroundConstants, CryptoBlacklist, TrustedDomains, RatBlacklist, ApsUrlList } from '@extension/common/background_constants';\r\nimport { NativeSettings } from '@extension/background/dispatchers/native/native_settings';\r\n\r\nexport const BackgroundGlobals = {\r\n  // This flag is set to false by automation to avoid isTrusted check in shadowDOM.\r\n  // Since WA use custom shadowDOM access in automation without using Selenium, isTrusted is false\r\n  // hence for tests to succeed automation will set this flag to false before running tests.\r\n  isTrustCheckRequired: true,\r\n  ExtensionTelemetryUrl: null,\r\n  scheduleManager: null,\r\n  schedules: null,\r\n  isNativeConnected: true,\r\n  telemetryEngine: null,\r\n  postInstallationPage: 'https://www.mcafee.com/consumer/v/wa-how.html',\r\n  listenerManager: null,\r\n  firefoxInternalUUID: '',\r\n  shadowMode: 'closed',\r\n  browserType: BuildSettings.BROWSER_TYPE,\r\n  cacheStore: null,\r\n  ffViewports: null,\r\n  garbageCollector: null,\r\n  typoCache: null,\r\n  logger: null,\r\n  loglevel: null,\r\n  messageDispatcher: null, // The message handler for native messaging\r\n  port: null,\r\n  tabData: new TabData(), // Information about all the tab\r\n  tabIdToLastClickTime: new Map(),\r\n  useNativeLogger: false,\r\n  wasm: null, // webassembly module\r\n  userAgentInBase64: null,\r\n  typoSquattingServer: BackgroundConstants.TYPOSQUATTING_SERVER,\r\n  tldParser: null,\r\n  cryptoBlacklist: CryptoBlacklist,\r\n  trustedDomains: TrustedDomains,\r\n  nativeSettings: NativeSettings,\r\n  searchSuggest: null,\r\n  ratBlacklist: RatBlacklist,\r\n  updatedByNative: false, // flag indicate whether these global variables have been updated by native\r\n\r\n  // WSS\r\n  wssMessageDispatcher: null, // The message handler for WSS native messaging\r\n  wssNativeClient: null,\r\n  WSS_INSTALLED: false,\r\n  isWPSInstalled: false,\r\n\r\n  // Engines JSON\r\n  searchEngines: null,\r\n  enginesVersionUrl: BackgroundConstants.ENGINE_VERSION_URL,\r\n  engineCheckInterval: 1000 * 60 * 60 * 24,\r\n  ENGINES_VERSION: BuildSettings.ENGINES_VERSION,\r\n\r\n  // Feature flags\r\n  AUTO_PLAY_NOTIFICATION_ENABLED: false,\r\n\r\n  // Automation specific flags\r\n  ALLOW_LOCALHOST: false,\r\n\r\n  // Form detection\r\n  IDPS_AUTH_URL: 'https://csptoken.ccs.mcafee.com/auth/token',\r\n  IDPS_BREACH_COUNT_URL: 'https://identity.unifiedapis.mcafee.com/breach/v1/BreachCount',\r\n  IDPS_CSP_CLIENT_ID: null,\r\n  IDPS_IS_ENTITLED: false,\r\n  IDPS_PROVISION_ID: null,\r\n  IDPS_LOGIN_DOMAIN: 'https://protection.mcafee.com',\r\n\r\n  // Unified Auth\r\n  UA_CLIENT: null,\r\n\r\n  // Typosquatting cache variables\r\n  TYPOSQUATTING_MAX_CACHE: 100,\r\n  TYPOSQUATTING_EXPIRY: 1000 * 60 * 60 * 24 * 30, // 1 month\r\n\r\n  // AMWA-11850 CPSIR-83 - Secret code that is appended to image requests to not allow external access to image files\r\n  WA_IMAGE_SECRET: null,\r\n\r\n  // Advanced Protection Signal URLs\r\n  apsUrlList: ApsUrlList,\r\n  apsAnimationTimeout: 5000,\r\n\r\n  downloadUrls: new Set(),\r\n\r\n  // Small Business Integration\r\n  wpsRequestedSettings: new Set(['SMA_USER_TOGGLE', 'SEARCH_ANNOTATION_OPTION', 'SMA_ANNOTATION_OPTIONS']),\r\n\r\n  // Permitted content types . These types are not blocked by URL but passed to native for download scanning.\r\n  permittedContentTypes: ['application/vnd.microsoft.portable-executable',\r\n    'application/octet-stream',\r\n    'application/x-msdos-program',\r\n    'application/x-msdownload',\r\n    'binary/octet-stream',\r\n    'application/x-msdownload'\r\n  ],\r\n\r\n  // supported extenal website connections\r\n  SUPPORTED_WEBSITE_LIST: [\r\n    'protection.mcafee.com',\r\n    'protection-dev-roadhouse-int.dvqa.mcafee.com',\r\n    'protection-dev2-roadhouse-int.dvqa.mcafee.com',\r\n    'protection-qa-roadhouse-int.dvqa.mcafee.com',\r\n  ],\r\n\r\n  // per user use either GTI or HTI. true means set HTI while installing and if false means set GTI\r\n  isHTI: false,\r\n  mtiRequestor: null,\r\n  gtiServer: BackgroundConstants.GTI_SERVER,\r\n  htiServer: BackgroundConstants.HTI_SERVER,\r\n  cspClientId: 'e87c73de-b45e-4427-b590-5124401795b6',\r\n};\r\n","// Parses the passed URI to read out the value of a particular\r\n// query string parameter within the URI string.\r\nexport default class UrlParser\r\n// this is because we declare the function in both contentplg and iframeplg,\r\n// using const will throw double declaration error here\r\n{\r\n  // get meaningful part of an uri (the part before ? or #)\r\n  static getURI(uri)\r\n  {\r\n    let parts = uri.split('?');\r\n    if (parts.length > 1)\r\n    {\r\n      return parts[0];\r\n    }\r\n    parts = uri.split('#');\r\n    if (parts.length > 1)\r\n    {\r\n      return parts[0];\r\n    }\r\n    return uri;\r\n  }\r\n\r\n  // get a clean URI (subdomain + domain only)\r\n  static getCleanURI(uri)\r\n  {\r\n    let cleanURI = uri;\r\n    if (cleanURI.endsWith('/'))\r\n    {\r\n      cleanURI = cleanURI.slice(0, -1);\r\n    }\r\n    if (cleanURI.startsWith('http://'))\r\n    {\r\n      cleanURI = cleanURI.slice(7);\r\n    }\r\n    else if (cleanURI.startsWith('https://'))\r\n    {\r\n      cleanURI = cleanURI.slice(8);\r\n    }\r\n    return this.getURI(cleanURI);\r\n  }\r\n\r\n  static getParam(uri, paramName)\r\n  {\r\n    const qpos = uri.indexOf('?');\r\n    if (qpos === -1)\r\n    {\r\n      return null;\r\n    }\r\n    const qString = uri.substring(qpos + 1);\r\n\r\n    // Now split each param delimited by &\r\n    const params = qString.split('&');\r\n    for (let index = 0; index < params.length; ++index)\r\n    {\r\n      // Now separate out each param name and value delimited by =.\r\n      const position = params[index].indexOf('=');\r\n      if (position === -1)\r\n      {\r\n        continue;\r\n      }\r\n      const name = params[index].substring(0, position);\r\n      if (name === paramName)\r\n      {\r\n        const value = params[index].substring(position + 1);\r\n        return value;\r\n      }\r\n    }\r\n    return null; // param not found.\r\n  }\r\n\r\n  static getDomain(url)\r\n  {\r\n    // there must be http(s) in the url, if not then return empty\r\n    if (url === undefined || !/^https?:\\/\\//.test(url))\r\n    {\r\n      return '';\r\n    }\r\n    const domainURL = new URL(url);\r\n    return domainURL.hostname;\r\n  }\r\n\r\n  static decodeQueryParam(p)\r\n  {\r\n    return decodeURIComponent(p.replace(/\\+/g, ' '));\r\n  }\r\n}\r\n","export const ForegroundGlobals = {\r\n  loglevel: null, // specify the current recorded loglevel\r\n};\r\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\n// Common\r\nimport { BuildSettings } from '@extension/common/constants';\r\nimport { LocalStorageVariables } from '@extension/common/cache_store_variables';\r\n// Foreground\r\nimport { ForegroundGlobals } from '@extension/ui/foreground/foreground_globals';\r\n\r\n/**\r\n * The different log levels considered when detecting / reporting errors in WebAdvisor\r\n * Note that a higher level means that more logs will be printed. (ie, level 3 will print level 2 and 1)\r\n */\r\nexport const LogLevels = {\r\n  NONE: 0,\r\n  INFO: 1,\r\n  ERROR: 2,\r\n  WARN: 3,\r\n  DEBUG: 4,\r\n};\r\n\r\n/**\r\n * The different log types\r\n */\r\nexport const LogTypes = {\r\n  INFO: 1,\r\n  ERROR: 2,\r\n  WARN: 3,\r\n  DEBUG: 4,\r\n};\r\n\r\n/**\r\n * Process type to distinguish which process called the logger\r\n */\r\nexport const ProcessTypes = {\r\n  BACKGROUND: 'BACKGROUND',\r\n  CONTENT: 'CONTENT',\r\n  TELEMETRY: 'TELEMETRY',\r\n  SMART_NATIVE_CLIENT: 'SMART_NATIVE_CLIENT'\r\n};\r\n\r\nexport const ProcessStyleMap = {\r\n  DEFAULT: 'color: #000000; font-weight: normal; font-style:normal; background: #FFFFFF;',\r\n  BACKGROUND: 'color: #8D0DBA; font-weight: bold; background: #FFFFFF;',\r\n  CONTENT: 'color: #F54A26; font-weight: bold; background: #FFFFFF;',\r\n  TELEMETRY: 'color: #147831; font-weight: bold; background: #FFFFFF;',\r\n  SMART_NATIVE_CLIENT: 'color: #004d7c; font-weight: bold; background: #FFFFFF;'\r\n};\r\n\r\n// *****************************************************************************\r\n// Set \"ExtensionLogging\" = 1 in registry at the same place we set LogLevel\r\n// will turn on native logging. This will log everything including INFO and ERR.\r\n// *****************************************************************************\r\n// *****************************************************************************\r\n// Type \"chrome.storage.local.set({'EXTENSION_LOGGING': 3});\" into the background\r\n// page console to forcefully turn on or turn off the logs inside extension\r\n// chrome = chrome/browser, # = the log level from 0 to 4\r\n// *****************************************************************************\r\nexport class Logger\r\n{\r\n  static processLog(message, logType, process = undefined)\r\n  {\r\n    if (logType === LogLevels.NONE)\r\n    {\r\n      return;\r\n    }\r\n\r\n    // verify that process is a valid option, else set it undefined\r\n    if (process && !Object.values(ProcessTypes).includes(process))\r\n    {\r\n      process = undefined;\r\n    }\r\n\r\n    // Checking whether native logging is enabled or not.\r\n    chrome.storage.local.get(LocalStorageVariables.USE_NATIVE_LOGGER.name, (useNativeLogger) =>\r\n    {\r\n      if (useNativeLogger[LocalStorageVariables.USE_NATIVE_LOGGER.name] === true)\r\n      {\r\n        if (!process)\r\n        {\r\n          // Check if the current code is being ran in the background or foreground\r\n          process = isBackground() ? ProcessTypes.BACKGROUND : ProcessTypes.CONTENT;\r\n        }\r\n        const details = {\r\n          processType: process,\r\n          browserType: BuildSettings.BROWSER_TYPE,\r\n          extensionType: 'wa',\r\n          logType,\r\n          message\r\n        };\r\n\r\n        BackgroundGlobals.messageDispatcher && BackgroundGlobals.messageDispatcher.logger(details);\r\n      }\r\n    });\r\n\r\n    // log within extension\r\n    consoleLog(message, logType, process);\r\n  }\r\n\r\n  /**\r\n   * Set the native Logging status\r\n   * @param {*} state\r\n   */\r\n  static setNativeLogging(state)\r\n  {\r\n    BackgroundGlobals.useNativeLogger = state;\r\n    chrome.storage.local.set(LocalStorageVariables.USE_NATIVE_LOGGER, state);\r\n  }\r\n\r\n  // Need to include processType for telemetry logging only.\r\n  static log(message, processType = undefined)\r\n  {\r\n    Logger.processLog(message, LogLevels.INFO, processType);\r\n  }\r\n\r\n  static error(message, processType = undefined)\r\n  {\r\n    Logger.processLog(message, LogLevels.ERROR, processType);\r\n  }\r\n\r\n  static warn(message, processType = undefined)\r\n  {\r\n    Logger.processLog(message, LogLevels.WARN, processType);\r\n  }\r\n\r\n  static debug(message, processType = undefined)\r\n  {\r\n    Logger.processLog(message, LogLevels.DEBUG, processType);\r\n  }\r\n}\r\n\r\nconst consoleLog = async (message, logType, process = undefined) =>\r\n{\r\n  const logLevel = await getLogLevel();\r\n  if (logLevel === LogLevels.NONE)\r\n  {\r\n    return;\r\n  }\r\n\r\n  const processType = process || (isBackground() ? ProcessTypes.BACKGROUND\r\n    : ProcessTypes.CONTENT);\r\n  const nowDate = new Date();\r\n  const logMessage = `%c[${processType} ${nowDate.toLocaleString([], { hour: '2-digit', minute: '2-digit', hour12: true })}]: %c${message}`;\r\n\r\n  const styleRegular = ProcessStyleMap.DEFAULT;\r\n  let hightlight = ProcessStyleMap[processType];\r\n\r\n  if (!hightlight)\r\n  {\r\n    hightlight = styleRegular;\r\n  }\r\n\r\n  if (logLevel >= LogLevels.ERROR && logType === LogTypes.ERROR)\r\n  {\r\n    console.error(logMessage, styleRegular, styleRegular); // eslint-disable-line no-console\r\n  }\r\n\r\n  if (logLevel >= LogLevels.INFO && logType === LogTypes.INFO)\r\n  {\r\n    console.log(logMessage, hightlight, styleRegular); // eslint-disable-line no-console\r\n  }\r\n\r\n  if (logLevel >= LogLevels.WARN && logType === LogTypes.WARN)\r\n  {\r\n    const uniqueHighlight = 'color: #FFA500; font-family: sans-serif; font-weight: bolder; text-shadow: #000 1px 1px;';\r\n    console.log(`%cWARN - ${logMessage}`, uniqueHighlight, hightlight, styleRegular); // eslint-disable-line no-console\r\n  }\r\n\r\n  if (logLevel >= LogLevels.DEBUG && logType === LogTypes.DEBUG)\r\n  {\r\n    const uniqueHighlight = 'color: #FF33D7; font-family: sans-serif; font-weight: bolder; text-shadow: #000 1px 1px;';\r\n    console.log(`%cDEBUG - ${logMessage}`, uniqueHighlight, hightlight, styleRegular); // eslint-disable-line no-console\r\n  }\r\n};\r\n\r\nconst isBackground = () =>\r\n{\r\n  const isBackground = BackgroundGlobals.cacheStore !== null;\r\n  return isBackground;\r\n};\r\n\r\nconst getLogLevel = async () =>\r\n{\r\n  // Check if the current code is being ran in the background or foreground\r\n  const context = isBackground() ? BackgroundGlobals : ForegroundGlobals;\r\n\r\n  // get loglevel from the current context\r\n  let level = context.loglevel;\r\n\r\n  // if current context loglevel is null (aka not set, we will retrieve the level from storage)\r\n  if (context.loglevel === null)\r\n  {\r\n    level = await getStorageLogLevelAsync();\r\n    context.loglevel = (level === null || level === undefined) ? BuildSettings.LOG_LEVEL : level;\r\n  }\r\n\r\n  if (Number.isInteger(level) && Object.values(LogLevels).includes(level))\r\n  {\r\n    return level;\r\n  }\r\n\r\n  return BuildSettings.LOG_LEVEL;\r\n};\r\n\r\nconst getStorageLogLevelAsync = async () =>\r\n{\r\n  const storageLocalGetAsync = new Promise((resolve) => chrome.storage.local.get(LocalStorageVariables.EXTENSION_LOGGING.name, resolve));\r\n  const response = await storageLocalGetAsync;\r\n  const storageLogLevel = response[LocalStorageVariables.EXTENSION_LOGGING.name];\r\n  if (Number.isInteger(storageLogLevel) && Object.values(LogLevels).includes(storageLogLevel))\r\n  {\r\n    return storageLogLevel;\r\n  }\r\n  return null;\r\n};\r\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\n// Common\r\nimport UrlParser from '@extension/common/url_parser';\r\nimport { Logger } from '@extension/common/logger';\r\n\r\n/**\r\n * TODO: Comment\r\n */\r\nexport class WhitelistWrapper\r\n{\r\n  /**\r\n   * Checks whether the specified domain is already in the whitelist\r\n   * @param  {string} domain - check if this domain exists in the whitelist db\r\n   * @param  {string} storeVariable - the whitelist db name\r\n   * @returns {bool}  whether a site is in the whitelist\r\n   */\r\n  static isDomainInWhitelist(domain, storeVariable)\r\n  {\r\n    const cleanDomain = UrlParser.getCleanURI(domain);\r\n    if (!cleanDomain)\r\n    {\r\n      Logger.error('Trying to put an empty URL into whitelist!');\r\n      return false;\r\n    }\r\n\r\n    const whitelist = BackgroundGlobals.cacheStore.get(storeVariable, []);\r\n    if (!Array.isArray(whitelist))\r\n    {\r\n      Logger.error('Can not fetch whitelist properly!');\r\n      return false;\r\n    }\r\n\r\n    for (let index = 0; index < whitelist.length; index += 1)\r\n    {\r\n      const inputDomain = cleanDomain.toLowerCase();\r\n      const storageDomain = whitelist[index].toLowerCase();\r\n      if (inputDomain.includes(storageDomain) || storageDomain.includes(inputDomain)) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Adds the domain to the whitelist\r\n   * @param  {array} domains - array of domains to be added to the whitelist\r\n   * @param  {string} storeVariable - the whitelist db name\r\n   */\r\n  static addDomainsToWhitelist(domains, storeVariable)\r\n  {\r\n    if (!Array.isArray(domains) || domains.length === 0)\r\n    {\r\n      return;\r\n    }\r\n\r\n    const domainsToBeAdded = [];\r\n    domains.forEach((domain) =>\r\n    {\r\n      const cleanDomain = UrlParser.getCleanURI(domain);\r\n      if (cleanDomain && !this.isDomainInWhitelist(cleanDomain, storeVariable))\r\n      {\r\n        domainsToBeAdded.push(cleanDomain);\r\n      }\r\n    });\r\n\r\n    if (domainsToBeAdded.length > 0)\r\n    {\r\n      const whitelist = BackgroundGlobals.cacheStore.get(storeVariable, []);\r\n      if (!Array.isArray(whitelist)) return;\r\n\r\n      const updatedList = whitelist.concat(domainsToBeAdded);\r\n      BackgroundGlobals.cacheStore.set(storeVariable, updatedList);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove domains from the whitelist\r\n   * @param  {array} domains - domain of the site to be removed from the whitelist\r\n   * @param  {string} storeVariable - the whitelist db name\r\n   */\r\n  static removeDomainFromWhitelist(domains, storeVariable)\r\n  {\r\n    if (!Array.isArray(domains) || domains.length === 0)\r\n    {\r\n      return;\r\n    }\r\n\r\n    const domainsToBeRemoved = [];\r\n    domains.forEach((domain) =>\r\n    {\r\n      const cleanDomain = UrlParser.getCleanURI(domain);\r\n      if (this.isDomainInWhitelist(cleanDomain, storeVariable))\r\n      {\r\n        domainsToBeRemoved.push(cleanDomain.toLowerCase());\r\n      }\r\n    });\r\n\r\n    if (domainsToBeRemoved.length > 0)\r\n    {\r\n      const whitelist = BackgroundGlobals.cacheStore.get(storeVariable, []);\r\n      if (!Array.isArray(whitelist)) return;\r\n\r\n      const updatedList = whitelist.filter((whitelistedDomain) => !domainsToBeRemoved.includes(whitelistedDomain.toLowerCase()));\r\n      BackgroundGlobals.cacheStore.set(storeVariable, updatedList);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get array of whitelisted items\r\n   * @param  {string} storeVariable - the whitelist db name\r\n   * @returns {array}  array of whitelisted items, if any\r\n   */\r\n  static getDomainsFromWhitelist(storeVariable)\r\n  {\r\n    return BackgroundGlobals.cacheStore.get(storeVariable, []);\r\n  }\r\n\r\n  /**\r\n   * clear the entire whitelist db\r\n   * @param  {string} storeVariable - the whitelist db name\r\n   */\r\n  static clearWhitelist(storeVariable)\r\n  {\r\n    BackgroundGlobals.cacheStore.clear(storeVariable);\r\n  }\r\n}\r\n\r\nexport default WhitelistWrapper;\r\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\n// Common\r\nimport { LocalStorageVariables } from '@extension/common/cache_store_variables';\r\n\r\nexport const featureStatsTypes = {\r\n  PAGES_SCANNED: 'PAGES_SCANNED',\r\n  PAGES_BLOCKED: 'PAGES_BLOCKED',\r\n  DOWNLOADS_SCANNED: 'DOWNLOADS_SCANNED',\r\n  DOWNLOADS_BLOCKED: 'DOWNLOADS_BLOCKED',\r\n  CRYPTO_BLOCKED: 'CRYPTO_BLOCKED',\r\n};\r\n\r\n/**\r\n * TODO: Comment\r\n */\r\nexport default class FeatureStats\r\n{\r\n  static init()\r\n  {\r\n    const cacheFeatureStats = this.read();\r\n\r\n    // Try to sync with native's feature stats first\r\n    // Otherwise fallback to the feature stats stored previously in cache\r\n    const {\r\n      PAGES_SCANNED, PAGES_BLOCKED, DOWNLOADS_SCANNED,\r\n      DOWNLOADS_BLOCKED, CRYPTO_BLOCKED\r\n    } = BackgroundGlobals.nativeSettings;\r\n    const featureStats = {\r\n      pagesScanned: PAGES_SCANNED.value || cacheFeatureStats.pagesScanned,\r\n      pagesBlocked: PAGES_BLOCKED.value || cacheFeatureStats.pagesBlocked,\r\n      downloadsScanned: DOWNLOADS_SCANNED.value || cacheFeatureStats.downloadsScanned,\r\n      downloadsBlocked: DOWNLOADS_BLOCKED.value || cacheFeatureStats.downloadsBlocked,\r\n      cryptoBlocked: CRYPTO_BLOCKED.value || cacheFeatureStats.cryptoBlocked,\r\n    };\r\n\r\n    BackgroundGlobals.cacheStore.set(LocalStorageVariables.POPUP_STATS.name, featureStats);\r\n  }\r\n\r\n  static add(type)\r\n  {\r\n    const featureStats = this.read();\r\n\r\n    switch (type)\r\n    {\r\n      case featureStatsTypes.PAGES_SCANNED:\r\n        featureStats.pagesScanned++;\r\n        break;\r\n      case featureStatsTypes.PAGES_BLOCKED:\r\n        featureStats.pagesBlocked++;\r\n        break;\r\n      case featureStatsTypes.DOWNLOADS_SCANNED:\r\n        featureStats.downloadsScanned++;\r\n        break;\r\n      case featureStatsTypes.DOWNLOADS_BLOCKED:\r\n        featureStats.downloadsBlocked++;\r\n        break;\r\n      case featureStatsTypes.CRYPTO_BLOCKED:\r\n        featureStats.cryptoBlocked++;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    BackgroundGlobals.cacheStore.set(LocalStorageVariables.POPUP_STATS.name, featureStats);\r\n  }\r\n\r\n  static read()\r\n  {\r\n    const featureStats = {};\r\n    featureStats.pagesScanned = 0;\r\n    featureStats.pagesBlocked = 0;\r\n    featureStats.downloadsScanned = 0;\r\n    featureStats.downloadsBlocked = 0;\r\n    featureStats.cryptoBlocked = 0;\r\n\r\n    const cacheStats = BackgroundGlobals.cacheStore.get(LocalStorageVariables.POPUP_STATS.name);\r\n    if (cacheStats)\r\n    {\r\n      Object.assign(featureStats, cacheStats);\r\n    }\r\n\r\n    return featureStats;\r\n  }\r\n}\r\n","export const extension = WEBPACK_BROWSER_NAME === 'chrome' || WEBPACK_BROWSER_NAME === 'edge' ? chrome : browser; // eslint-disable-line no-undef\r\n","import { BlockState, WPSBlockPageType } from '@extension/common/constants';\r\nimport { BackgroundGlobals } from './background_globals';\r\n\r\nexport default class BlockPageCommon\r\n{\r\n  /**\r\n   * TODO\r\n   * @param {Number} statusOfBlocking\r\n   * @return {object} return object containing url to the block page\r\n   */\r\n  static toBlockPageUrl(statusOfBlocking)\r\n  {\r\n    const states = [...BlockState];\r\n    let blockPageUrl = null;\r\n\r\n    if (states.includes(statusOfBlocking))\r\n    {\r\n      const filename = BlockPageCommon.resolveBlockPage(statusOfBlocking);\r\n      blockPageUrl = chrome.runtime.getURL(filename);\r\n    }\r\n\r\n    return { url: blockPageUrl };\r\n  }\r\n\r\n  /**\r\n   * Retrieve the corresponding block page's internal url.\r\n   * @param {number} state - The current state of the web page\r\n   */\r\n  static resolveBlockPage(state)\r\n  {\r\n    let blockPage = null;\r\n\r\n    switch (state)\r\n    {\r\n      case BlockState.YELLOW:\r\n      case BlockState.RED:\r\n      case BlockState.PHISHING:\r\n      {\r\n        blockPage = 'html/site_status_block_page.html';\r\n        break;\r\n      }\r\n      case BlockState.TYPOSQUATTING:\r\n        blockPage = 'html/site_status_typosquatting.html';\r\n        break;\r\n    }\r\n\r\n    return blockPage;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {*} typeOfBlockPage is the WPS type of block page 1 = red, 2 = yellow, 3 = phishing, 4 = typosquat, 5 = iframe, 6 = crypto\r\n   * @param {*} topUrl the top page url that the contains the blocked url on its webpage\r\n   * @param {*} blockedUrl the url that the block page is blocking\r\n   * @param {*} overriden if the user previously told the extension to not show block page\r\n   */\r\n  static sendBlockPageEvent(typeOfBlockPage, topUrl, blockedUrl, overriden)\r\n  {\r\n    BackgroundGlobals.wssMessageDispatcher.sendBlockPageEvent(typeOfBlockPage, topUrl, blockedUrl, overriden);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {*} statusOfBlocking is BlockState from constants.js\r\n   * @param {*} topUrl the url that the block page is blocking\r\n   * @param {*} overriden if the user previously told the extension to not show block page\r\n   */\r\n  static checkWhitelistedBlockpage(statusOfBlocking, referrer, blockUrl, overriden)\r\n  {\r\n    let wpsBlockType = -1;\r\n    switch (statusOfBlocking)\r\n    {\r\n      case BlockState.YELLOW:\r\n      case BlockState.RED:\r\n      case BlockState.PHISHING:\r\n        wpsBlockType = BlockPageCommon.convertWABlockTypeToWPS(statusOfBlocking);\r\n        break;\r\n    }\r\n    if (wpsBlockType !== -1)\r\n    {\r\n      const topURL = referrer || blockUrl;\r\n      BlockPageCommon.sendBlockPageEvent(wpsBlockType, topURL, blockUrl, overriden);\r\n    }\r\n  }\r\n\r\n  static convertWABlockTypeToWPS(statusOfBlocking)\r\n  {\r\n    let type = -1;\r\n    switch (statusOfBlocking)\r\n    {\r\n      case BlockState.YELLOW:\r\n        type = WPSBlockPageType.Yellow;\r\n        break;\r\n      case BlockState.RED:\r\n        type = WPSBlockPageType.Red;\r\n        break;\r\n      case BlockState.PHISHING:\r\n        type = WPSBlockPageType.Phishing;\r\n        break;\r\n      case BlockState.TYPOSQUATTING:\r\n        type = WPSBlockPageType.Typoquatting;\r\n        break;\r\n    }\r\n    return type;\r\n  }\r\n}\r\n","// Common\r\nimport { Logger } from '@extension/common/logger';\r\n\r\nexport default class InjectorCommon\r\n{\r\n  // Helper function that will keep executingScipt and pinging the script until it succeeds,\r\n  // or resolves to 'false' if timeout/tries has been reached.\r\n  static retryExecuteScript(details, keepInjecting, maxTries)\r\n  {\r\n    const { object, tabId, file, frameId } = details;\r\n    const promise = new Promise(async (resolve) =>\r\n    {\r\n      const pingRequest = { command: object.pingCommand };\r\n      // Perform an initial ping before trying to inject\r\n      const pingResp = await InjectorCommon.pingCommand(tabId, pingRequest, frameId, 0, 100);\r\n      if (pingResp)\r\n      {\r\n        resolve(true);\r\n        return;\r\n      }\r\n\r\n      // If the initial ping did not get a response, we will not inject\r\n      const execHandler = async (currentTries) =>\r\n      {\r\n        const execResp = await InjectorCommon.executeScriptPromise(tabId, file, frameId);\r\n        if (chrome.runtime.lastError || !execResp || !execResp.length)\r\n        {\r\n          // Check if we have reached the max number of tries\r\n          if (currentTries >= maxTries)\r\n          {\r\n            resolve(false);\r\n            return;\r\n          }\r\n\r\n          // Failed to inject to the content script\r\n          if (keepInjecting)\r\n          {\r\n            // Keep trying to inject if we need to (keepInjecting)\r\n            setTimeout(() => execHandler(currentTries + 1), 200);\r\n            return;\r\n          }\r\n\r\n          // Otherwise if on first failure return false (do not try to keep injecting);\r\n          resolve(false);\r\n          return;\r\n        }\r\n\r\n        // If injection is successful, lets verify by sending a ping\r\n        const pingResp = await InjectorCommon.pingCommand(tabId, pingRequest, frameId, 2, 100);\r\n        if (!pingResp)\r\n        {\r\n          // if ping did not respond, we try to inject the script again\r\n          execHandler(currentTries + 1);\r\n        }\r\n        else\r\n        {\r\n          // ping received, everything is loaded\r\n          resolve(true);\r\n        }\r\n      };\r\n\r\n      execHandler(0);\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  // Helper function that will keep sending a ping command based on the 'maxTries' and 'timeout'\r\n  // resolves to true if ping responds otherwise resolves to false if maxTries is reached\r\n  static pingCommand(tabId, request, frameId, maxTries = 10, timeout = 300)\r\n  {\r\n    const promise = new Promise((resolve) =>\r\n    {\r\n      const messageSender = async (currentTries) =>\r\n      {\r\n        const response = await InjectorCommon.sendMessagePromise(tabId, request, frameId);\r\n        if (!response)\r\n        {\r\n          if (currentTries >= maxTries)\r\n          {\r\n            resolve(false);\r\n            return;\r\n          }\r\n\r\n          setTimeout(() => messageSender(currentTries + 1), timeout);\r\n          return;\r\n        }\r\n\r\n        resolve(true);\r\n      };\r\n\r\n      messageSender(0);\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  // Helper function to convert 'sendMessage' as a 'promise'\r\n  static sendMessagePromise(tabId, request, frameId = 0)\r\n  {\r\n    const optional = {};\r\n    if (frameId > 0) optional.frameId = frameId;\r\n    const promise = new Promise((resolve) =>\r\n    {\r\n      chrome.tabs.sendMessage(tabId, request, optional, (response) =>\r\n      {\r\n        if (chrome.runtime.lastError)\r\n        {\r\n          Logger.debug(`Failed to sendMessage at sendMessagePromise, err: ${chrome.runtime.lastError.message}`);\r\n        }\r\n        resolve(response);\r\n      });\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  // Helper function to convert 'executeScript' as a 'promise'\r\n  static executeScriptPromise(tabId, file, frameId)\r\n  {\r\n    const promise = new Promise((resolve) =>\r\n    {\r\n      chrome.scripting.executeScript({ target: { tabId, frameIds: [frameId] }, files: [file] }, (response) =>\r\n      {\r\n        if (chrome.runtime.lastError)\r\n        {\r\n          Logger.debug(`Failed to executeScript at executeScriptPromise, err: ${chrome.runtime.lastError.message}`);\r\n        }\r\n\r\n        resolve(response);\r\n      });\r\n    });\r\n\r\n    return promise;\r\n  }\r\n}\r\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport InjectorCommon from '@extension/background/content_injector/injector_common';\r\n// Common\r\nimport { Logger } from '@extension/common/logger';\r\n\r\nexport default class Injector\r\n{\r\n  static async inject(tabId, injectObjects, frameId = 0)\r\n  {\r\n    if (!injectObjects)\r\n    {\r\n      Logger.error('inject: Invalid argument details/injectObjects');\r\n      return;\r\n    }\r\n\r\n    const objectsToInject = await Injector.getCheckSuccessObjects(injectObjects);\r\n    if (objectsToInject.length === 0)\r\n    {\r\n      return;\r\n    }\r\n\r\n    // Retrieve any previously saved data about files already injected for this tab/frame\r\n    const injectedFiles = Injector.getInjectDetailsByFrameId(tabId, frameId);\r\n\r\n    // Collect all files that needs to be injected\r\n    // We check with \"injectedFiles\" to avoid duplicate injections\r\n    const filesToInject = [];\r\n    objectsToInject.forEach((object) =>\r\n    {\r\n      const { main } = object.details();\r\n      if (!injectedFiles.includes(main))\r\n      {\r\n        filesToInject.push({ file: main, object });\r\n        injectedFiles.push(main);\r\n      }\r\n      else\r\n      {\r\n        // The main file has been injected previously\r\n        // Therefore we do not need to inject and can directly call \"runAfter\"\r\n        // with the proper values to let the inject object handle it\r\n        const success = false;\r\n        const previouslyInjected = true;\r\n        Logger.debug(`File Injection PreviouslyInjected - tab[${tabId}] frame[${frameId}]: ${main}, success: ${success}, previouslyInjected: ${previouslyInjected} }`);\r\n        object.runAfter(success, previouslyInjected);\r\n      }\r\n    });\r\n\r\n    // Re-save the injectedFiles To prevent other requests\r\n    // from trying to inject the same file\r\n    Injector.updateInjectDetailsByFrameId(tabId, frameId, { injectedFiles });\r\n\r\n    // Execute Script\r\n    filesToInject.forEach(async ({ file, object }) =>\r\n    {\r\n      const details = {\r\n        object,\r\n        file,\r\n        tabId,\r\n        frameId,\r\n      };\r\n\r\n      Logger.debug(`File Injection Start - tab[${tabId}] frame[${frameId}] : ${file}`);\r\n      const response = await InjectorCommon.retryExecuteScript(details, object.keepInjecting, 3);\r\n      const success = response;\r\n      const previouslyInjected = false;\r\n      Logger.debug(`File Injection End - tab[${tabId}] frame[${frameId}]: ${file}, success: ${success}, previouslyInjected: ${previouslyInjected} }`);\r\n\r\n      object.runAfter(success, previouslyInjected);\r\n    });\r\n  }\r\n\r\n  // Get the objects that have successfully passed the check\r\n  // set by each object's \"check\" criteria\r\n  static async getCheckSuccessObjects(injectObjects)\r\n  {\r\n    // Since some \"check\" could be async, we are creating\r\n    // a promise to wait for all to finish\r\n    const objectPromises = [];\r\n    injectObjects.forEach((classObject) =>\r\n    {\r\n      // Create a promise that will return the class object itself if the\r\n      // check is successful otherwise null.\r\n      const resolveObject = () => new Promise(async (resolve) =>\r\n      {\r\n        const result = await classObject.check();\r\n        resolve(result ? classObject : null);\r\n      });\r\n\r\n      objectPromises.push(resolveObject());\r\n    });\r\n\r\n    const objectsToInject = await Promise.all(objectPromises);\r\n    // Filter all objects that didnt pass the check() aka returned null\r\n    return objectsToInject.filter((object) => object !== null);\r\n  }\r\n\r\n  static getInjectDetailsByFrameId(tabId, frameId)\r\n  {\r\n    // Retrieve any previously saved data about files already injected for this tab/frame\r\n    const tabIdData = BackgroundGlobals.tabData.get(tabId); // retrieve tabdata\r\n    const injectDetailsByFrameId = tabIdData.injectDetailsByFrameId || {};\r\n    const injectDetails = injectDetailsByFrameId[frameId] || { injectedFiles: [] };\r\n    return injectDetails.injectedFiles;\r\n  }\r\n\r\n  static updateInjectDetailsByFrameId(tabId, frameId, newData)\r\n  {\r\n    const tabIdData = BackgroundGlobals.tabData.get(tabId); // retrieve tabdata\r\n    const injectDetailsByFrameId = tabIdData.injectDetailsByFrameId || {};\r\n    const injectDetails = injectDetailsByFrameId[frameId] || { injectedFiles: [] };\r\n    injectDetailsByFrameId[frameId] = { ...injectDetails, ...newData };\r\n    BackgroundGlobals.tabData.update(tabId, { injectDetailsByFrameId });\r\n  }\r\n}\r\n","/**\r\n * The command ids supported for IPC between content process and chrome/background process.\r\n */\r\n\r\nexport const BackgroundCommands = {\r\n  // Generic Commands\r\n  CACHE_STORE: 'CACHE_STORE',\r\n  CONTENT_HANDLER: 'CONTENT_HANDLER',\r\n  EXECUTE_COMMAND: 'EXECUTE_COMMAND',\r\n  FOCUS_OR_CREATE_TAB: 'FOCUS_OR_CREATE_TAB',\r\n  GET_BK_GLOBALS: 'GET_BK_GLOBALS',\r\n  GET_EXTENSION_STATUS: 'GET_EXTENSION_STATUS',\r\n  GET_TAB_DATA: 'GET_TAB_DATA',\r\n  TI_REQUEST: 'TI_REQUEST',\r\n  INSTALL_EXTENSION: 'INSTALL_EXTENSION',\r\n  PLACEHOLDER_TEXT: 'PLACEHOLDER_TEXT',\r\n  REMOVE_TAB: 'REMOVE_TAB',\r\n  SEND_TELEMETRY: 'SEND_TELEMETRY',\r\n  SET_VIEWPORT: 'SET_VIEWPORT',\r\n  WHITELIST: 'WHITELIST',\r\n  RESET_NATIVE_SETTING: 'RESET_NATIVE_SETTING',\r\n  UPDATE_BK_NATIVE_SETTINGS: 'UPDATE_BK_NATIVE_SETTINGS',\r\n\r\n  // Options Menu / Settings Page\r\n  SHOW_SIDEBAR_MAIN: 'SHOW_SIDEBAR_MAIN',\r\n  GET_POPUP_DATA: 'GET_POPUP_DATA',\r\n  GET_SETTINGS_DATA: 'GET_SETTINGS_DATA',\r\n  RESET_SETTINGS: 'RESET_SETTINGS',\r\n\r\n  // Autoplay video\r\n  AUTO_RUN_VIDEO_SITE: 'AUTO_RUN_VIDEO_SITE',\r\n  GET_CLICK_EVENT_TIME: 'GET_CLICK_EVENT_TIME',\r\n  SAVE_CLICK_EVENT_TIME: 'SAVE_CLICK_EVENT_TIME',\r\n\r\n  // Typosquatting\r\n  GET_TYPOSQUATTING_DATA: 'GET_TYPOSQUATTING_DATA',\r\n\r\n  // Block Page / Iframe / Site Report\r\n  IS_FRAME_BLOCKED: 'IS_FRAME_BLOCKED',\r\n  IS_WHITELISTED: 'IS_WHITELISTED',\r\n  ANY_BLOCKED_IFRAMES: 'ANY_BLOCKED_IFRAMES',\r\n  ANY_BLOCKED_CRYPTOSCRIPTS: 'ANY_BLOCKED_CRYPTOSCRIPTS',\r\n  UNBLOCK_ALL_IFRAMES: 'UNBLOCK_ALL_IFRAMES',\r\n  VIEW_SITE_REPORT: 'VIEW_SITE_REPORT',\r\n\r\n  // Annotations\r\n  SEARCH_ANNOTATION: 'SEARCH_ANNOTATION',\r\n  UPDATE_ENGINE_STATS: 'UPDATE_ENGINE_STATS',\r\n\r\n  // SMA\r\n  SOCIAL_MEDIA_ANNOTATION: 'SOCIAL_MEDIA_ANNOTATION',\r\n\r\n  // RAT Detection\r\n  UPDATE_RAT_DETECTION_SHOWING_FLAG: 'UPDATE_RAT_DETECTION_SHOWING_FLAG',\r\n\r\n  // Search Suggestion\r\n  SEARCH_SUGGEST: 'SEARCH_SUGGEST',\r\n\r\n  // Form detection\r\n  SAVE_FORM_INFO: 'SAVE_FORM_INFO',\r\n  GET_FORM_INFO_CACHE: 'GET_FORM_INFO_CACHE',\r\n  CLEAR_FORM_INFO_CACHE: 'CLEAR_FORM_INFO_CACHE',\r\n  SAVE_MULTISTEP_LOGIN: 'SAVE_MULTISTEP_LOGIN',\r\n  GET_FD_WEIGHTS: 'GET_FD_WEIGHTS',\r\n  GET_FD_EXCEPTIONS: 'GET_FD_EXCEPTIONS',\r\n  GET_FD_CRF_PARAMS: 'GET_FD_CRF_PARAMS',\r\n\r\n  // DWS\r\n  CLEAR_CACHED_DWS_INFO: 'CLEAR_DWS_INFO',\r\n  GET_CACHED_DWS_INFO: 'GET_CACHED_DWS_INFO',\r\n  UPDATE_DWS_WHITELIST: 'UPDATE_DWS_WHITELIST',\r\n  LAUNCH_IDPS_LOGIN: 'LAUNCH_IDPS_LOGIN',\r\n  UPDATE_DWS_SHOWN: 'UPDATE_DWS_SHOWN',\r\n\r\n  // APS\r\n  GET_APS_DETAILS: 'GET_APS_DETAILS',\r\n  FORM_PRE_CHECK_PASSED: 'FORM_PRE_CHECK_PASSED',\r\n  SIGN_UP_FORM_DETECTED: 'SIGN_UP_FORM_DETECTED',\r\n\r\n  // Firefox Policy Consent\r\n  SET_FF_POLICY_COLLECTION: 'SET_FF_POLICY_COLLECTION',\r\n  SET_FF_POLICY_LAST_SHOWN: 'SET_FF_POLICY_LAST_SHOWN',\r\n};\r\n\r\nexport const ContentCommands = {\r\n  // Commands handled by iframes\r\n  UNBLOCK_IFRAME: 'UNBLOCK_IFRAME',\r\n\r\n  // Content UI Handler Commands\r\n  BALLOON_MESSAGE: 'BALLOON_MESSAGE',\r\n  PAGE_OVERLAY: 'PAGE_OVERLAY',\r\n  SIDEBAR: 'SIDEBAR',\r\n  TOPBAR: 'TOPBAR',\r\n\r\n  // Ping\r\n  PING_CONTENT_ANNOTATION: 'PING_CONTENT_ANNOTATION',\r\n  PING_CONTENT_RAT_DETECTION: 'PING_CONTENT_RAT_DETECTION',\r\n  PING_CONTENT_IFRAME_BANNER: 'PING_CONTENT_IFRAME_BANNER',\r\n  PING_CONTENT_AUTOPLAY_DETECTION: 'PING_CONTENT_AUTOPLAY_DETECTION',\r\n  PING_CONTENT_SIDEBAR_MAIN: 'PING_CONTENT_SIDEBAR_MAIN',\r\n  PING_CONTENT_FF_DL_OVERLAY: 'PING_CONTENT_FF_DL_OVERLAY',\r\n  PING_CONTENT_CRYPTO_BLOCK: 'PING_CONTENT_CRYPTO_BLOCK',\r\n  PING_CONTENT_FF_VIEWPORTS: 'PING_CONTENT_FF_VIEWPORTS',\r\n  PING_CONTENT_IDPS: 'PING_CONTENT_IDPS',\r\n  PING_CONTENT_APS_TOAST: 'PING_CONTENT_APS_TOAST',\r\n  PING_CONTENT_APS_BALLOON: 'PING_CONTENT_APS_BALLOON',\r\n  PING_CONTENT_APS_OBSERVER: 'PING_CONTENT_APS_OBSERVER',\r\n  PING_CONTENT_SITE_LISTENER: 'PING_CONTENT_SITE_LISTENER',\r\n  PING_IFRAME_FORM_CHECK: 'PING_IFRAME_FORM_CHECK',\r\n  PING_IFRAME_FORM_DETECTION: 'PING_IFRAME_FORM_DETECTION',\r\n  PING_IFRAME_BLOCK: 'PING_IFRAME_BLOCK',\r\n\r\n  // APS\r\n  APS_REGISTRATION_PAGE: 'APS_REGISTRATION_PAGE',\r\n\r\n  // Broadcast to foreground\r\n  BROADCAST_TO_FOREGROUND: 'BROADCAST_TO_FOREGROUND',\r\n\r\n  // Annotation Journey Toast\r\n  TRIGGER_AJ_TOAST: 'TRIGGER_AJ_TOAST'\r\n};\r\n\r\n// **********************************************\r\n// SUB-COMMANDS USED BY CONTENT HANDLER COMMANDS:\r\n// **********************************************\r\n\r\nexport const SideBarCommands = {\r\n  MAIN: 'MAIN',\r\n  RELOAD: 'RELOAD',\r\n  SMA: 'SMA',\r\n  RAT_DETECTION: 'RAT_DETECTION',\r\n};\r\n\r\nexport const BalloonMessageCommands = {\r\n  ADVANCED_PROTECTION_SIGNAL: 'ADVANCED_PROTECTION_SIGNAL',\r\n  ADVANCED_PROTECTION_SIGNAL_TOAST: 'ADVANCED_PROTECTION_SIGNAL_TOAST',\r\n  DWS: 'DWS',\r\n};\r\n\r\nexport const TopBarCommands = {\r\n  CRYPTO_BLOCK: 'CRYPTO_BLOCK',\r\n  IFRAME_BLOCK: 'IFRAME_BLOCK',\r\n  TRIGGER_ALLOW: 'TRIGGER_ALLOW',\r\n};\r\n\r\nexport const PageOverlayCommands = {\r\n  SEARCH_EXTENSION_OVERLAY: 'SEARCH_EXTENSION_OVERLAY',\r\n  FINISH_DOWNLOAD: 'FINISH_DOWNLOAD',\r\n};\r\n\r\nexport const ExternalCommands = {\r\n  // Legacy\r\n  PING: 0,\r\n  DISCONNECT_NATIVE: 1,\r\n  SET_PROPERTY_EX: 2, //  For automation\r\n  SET_PROPERTY: 3, // For automation\r\n  GET_PROPERTY: 4, // For automation\r\n  CLEAR_GTI_CACHE: 5, // For automation\r\n  RESET_CRYPTO: 6, // For automation\r\n  CLEAN_TYPOSQUATING_WHITELIST: 7, // For automation\r\n  CLEAR_TYPOSQUATING_CACHE: 8, // For automation\r\n  CLEAN_CRYPTO_WHITELIST: 10, // For automation\r\n  CLEAN_RAT_WHITELIST: 12, // For automation\r\n  CLEAN_RAT_CACHE: 13, // For automation\r\n  REPLACE_TRUSTED_DOMAIN: 15, // For automation\r\n  VERIFY_GTI_REQUEST: 17, // For automation\r\n  VERIFY_TYPOSQUAT_SERVER: 18, // For watchdog automation\r\n  GET_ALL_WA_SETTINGS: 19, // For automation extension\r\n  SET_STORAGE_PROPERTY: 20, // Set a local storage property within WA\r\n  GET_STORAGE_PROPERTY: 21, // Get a local storage property within WA (for automation)\r\n  REINIT_SCHEDULED_TASKS: 22,\r\n  OPEN_SETTINGS: 23, // For personal protection hub\r\n  OPEN_ACTION_PANEL: 24, // For personal protection hub\r\n  GET_MEMORY_FOOTPRINT: 26, // For automation, endurance run\r\n  ENDURANCE_TEST_RESET: 27, // For automation, endurance run\r\n  FORM_DETECTION_RESULT: 28,\r\n  SHOW_UNUSED_SELECTORS: 29, // For automation\r\n  SET_MTI_GLOBALS: 30\r\n};\r\n\r\nexport const ExternalResponse = {\r\n  PONG: 0,\r\n};\r\n","export default class InjectBase\r\n{\r\n  constructor(main)\r\n  {\r\n    this.previouslyInjected = false;\r\n    this.success = false;\r\n    this.main = `scripts/${main}`;\r\n\r\n    // This is used by the injector to determine whether to keep trying to\r\n    // inject or not. Example, annotations should keep trying to inject if it failed to do\r\n    // so at the beginning but not for the main sidebar since this can be triggered on a\r\n    // non-content script site, which means we would just show the foreground sidebar page\r\n    this.keepInjecting = true;\r\n  }\r\n\r\n  details()\r\n  {\r\n    return {\r\n      main: this.main\r\n    };\r\n  }\r\n\r\n  check()\r\n  {\r\n    return true;\r\n  }\r\n\r\n  runAfter(success, previouslyInjected)\r\n  {\r\n    this.previouslyInjected = previouslyInjected;\r\n    this.success = success;\r\n  }\r\n}\r\n","// Background\r\nimport { ContentCommands } from '@extension/common/commands';\r\nimport InjectBase from '@extension/background/content_injector/inject_base';\r\n\r\nexport default class InjectCryptoBlock extends InjectBase\r\n{\r\n  constructor()\r\n  {\r\n    super('content_crypto_block.js');\r\n    this.pingCommand = ContentCommands.PING_CONTENT_CRYPTO_BLOCK;\r\n  }\r\n}\r\n","export const Globals = {\r\n  ANNOTATION: {},\r\n  BackgroundIPC: null,\r\n  BackgroundCommons: null,\r\n  ContextTelemetry: null,\r\n  TelemetryEventNames: null,\r\n  UrlParser: null,\r\n  Utils: null,\r\n  Commands: {},\r\n  CommonConstants: {},\r\n  extension: null,\r\n  SearchEngineHelper: null,\r\n  prevLink: null,\r\n  Logger: null\r\n};\r\n","import { Globals } from './globals';\r\n\r\nexport default class ResourceManager\r\n{\r\n  /**\r\n   * Obtain the corresponding string for the resource name\r\n   * @param {String}   name     - The name of the resource\r\n   * @param {Function} callback - Handles the localized string returned\r\n   */\r\n  static getResString(name, callback)\r\n  {\r\n    Globals.ANNOTATION.resourceRequestor.getResStr(name, (value) =>\r\n    {\r\n      if (!value)\r\n      {\r\n        Globals.Logger.error(`Resource string ${name} failed to fetch through resource requestor`);\r\n      }\r\n      else\r\n      {\r\n        callback(value);\r\n      }\r\n    });\r\n  }\r\n}\r\n","// Background\nimport { BackgroundGlobals } from '@extension/background/background_globals';\n// Common\nimport { BlockState, BrowserType, BuildSettings, Color, Score } from '@extension/common/constants';\nimport { BackgroundConstants } from '@extension/common/background_constants';\nimport { extension } from '@extension/common/webextension';\nimport { Logger } from '@extension/common/logger';\nimport { LocalStorageVariables } from '@extension/common/cache_store_variables';\n// @mcafee\nimport ResourceManager from '@mcafee/wa-annotations/Common/resource_manager';\n\n/**\n * TODO: Comments\n */\nexport default class BackgroundCommon\n{\n  static async toGTICategoriesString(categories, includeDescription = false)\n  {\n    const getRes = (l10nId) => new Promise((resolve) =>\n    {\n      ResourceManager.getResString(l10nId, (res) => resolve(res));\n    });\n\n    const getCategoryStrings = async (categoryId, includeDescription) =>\n    {\n      const newCategory = {};\n\n      const name = await getRes(`category_id_${categoryId}_name`);\n      newCategory.name = name;\n\n      if (includeDescription)\n      {\n        const description = await getRes(`category_id_${categoryId}_description`);\n        newCategory.description = description;\n      }\n\n      return newCategory;\n    };\n\n    const promises = [];\n    for (const category of categories)\n    {\n      promises.push(getCategoryStrings(category, includeDescription));\n    }\n\n    const newCategories = await Promise.all(promises);\n    return newCategories;\n  }\n\n  /**\n   * Determine the shorthand browser type name based on its corresponding index value.\n   * @returns {String} - The browser name (shorthand)\n   */\n  static browserTypeToString(toLowerCase = false)\n  {\n    let browserType = '';\n    switch (BuildSettings.BROWSER_TYPE)\n    {\n      case 1:\n        browserType = 'FF';\n        break;\n      case 2:\n        browserType = 'CH';\n        break;\n      case 3:\n        browserType = 'ED';\n        break;\n      default:\n        browserType = 'UN';\n    }\n\n    return toLowerCase ? browserType.toLowerCase() : browserType;\n  }\n\n  /**\n   * TODO: Comments\n   */\n  static toImagePaths(imageName)\n  {\n    let imagePath = 'images/browser_action/';\n\n    const legacyImageName = imageName.startsWith('small_') ? imageName : `small_${imageName}`;\n\n    switch (legacyImageName)\n    {\n      case 'small_button_green.gif':\n        imagePath += 'green';\n        break;\n      case 'small_button_yellow.gif':\n        imagePath += 'yellow';\n        break;\n      case 'small_button_red.gif':\n        imagePath += 'red';\n        break;\n      case 'small_button_grey.gif':\n        imagePath += 'white';\n        break;\n      case 'small_button_disabled.gif':\n        imagePath += 'disabled';\n        break;\n      default:\n        imagePath += imageName;\n        break;\n    }\n\n    // 16 and 32 used by Chrome/Firefox, 20 and 40 used by Edge\n    const imagePaths = {\n      size16: `${imagePath}_16.png`,\n      size20: `${imagePath}_20.png`,\n      size32: `${imagePath}_32.png`,\n      size40: `${imagePath}_40.png`\n    };\n\n    return imagePaths;\n  }\n\n  /**\n   * TODO: Comments\n   */\n  static colorToImagePaths(color)\n  {\n    let imageName = 'white';\n\n    switch (color)\n    {\n      case Color.GREEN:\n        imageName = 'green';\n        break;\n      case Color.YELLOW:\n        imageName = 'yellow';\n        break;\n      case Color.RED:\n        imageName = 'red';\n        break;\n      case Color.UNKNOWN:\n        imageName = 'white';\n        break;\n      case Color.DISABLED:\n        imageName = 'disabled';\n        break;\n    }\n\n    return BackgroundCommon.toImagePaths(imageName);\n  }\n\n  /**\n   * Return the appropriate class for the annotation item\n   * @param {Object} annotationItem - Reputation object returned by the GTI server\n   */\n  static toAnnotationImageClass(annotationItem)\n  {\n    const color = BackgroundCommon.toColor(annotationItem);\n\n    let imageClass = '';\n\n    switch (color)\n    {\n      case Color.GREEN:\n        imageClass = 'OK';\n        break;\n      case Color.RED:\n        imageClass = 'WARN';\n        break;\n      case Color.YELLOW:\n        imageClass = 'INFO';\n        break;\n      case Color.UNKNOWN:\n        imageClass = 'UNKNOWN';\n        break;\n    }\n\n    return imageClass;\n  }\n\n  /**\n  * Determines if the URL provided is malicious or not.\n  * @param   {Object} categories - Url info deemed phishing / malicious\n  * @returns {boolean} - Outcome of the phishing site check\n  */\n  static isPhishingURI(categories)\n  {\n    return categories && categories.includes(BackgroundConstants.PHISHING_CATEGORY);\n  }\n\n  /**\n   * TODO: Comments\n   */\n  static toBlockState(annItem)\n  {\n    const colorVal = BackgroundCommon.toColor(annItem);\n\n    if (colorVal === Color.RED || colorVal === Color.YELLOW)\n    {\n      if (BackgroundCommon.isPhishingURI(annItem.category))\n      {\n        return BlockState.PHISHING;\n      }\n    }\n\n    // Because the color and block state values correspond to the numbers, you can simply return the color value\n    return isNaN(colorVal) ? BlockState.UNKNOWN : colorVal;\n  }\n\n  /**\n   * TODO: Comments\n   */\n  static toColor(annItem)\n  {\n    let color = Color.UNKNOWN;\n\n    if (annItem === undefined || annItem.trust === undefined)\n    {\n      return color;\n    }\n\n    if (annItem.trust >= Score.CLEAN)\n    {\n      color = Color.GREEN;\n    }\n    else if (annItem.trust > Score.UNVERIFIED)\n    {\n      color = Color.YELLOW;\n    }\n    else if (annItem.trust >= Score.DIRTY)\n    {\n      color = Color.RED;\n    }\n    else\n    {\n      color = Color.UNKNOWN;\n    }\n\n    return color;\n  }\n\n  /**\n   * TODO: Comments\n   */\n  static toSiteReportUrl(url)\n  {\n    const siteReportUrl = extension.runtime.getURL('html/site_status_site_report.html');\n    return `${siteReportUrl}?url=${escape(url)}`;\n  }\n\n  static isExtensionUrl(url)\n  {\n    // Chrome/Edge Internal Pages\n    if ((BrowserType.CHROME === BuildSettings.BROWSER_TYPE && url.startsWith(`chrome-extension://${extension.runtime.id}`))\n    || (BrowserType.EDGE === BuildSettings.BROWSER_TYPE && url.startsWith(`ms-browser-extension://${extension.runtime.id}`)))\n    {\n      return true;\n    }\n\n    // Firefox Internal Pages\n    if (BrowserType.FIREFOX === BuildSettings.BROWSER_TYPE)\n    {\n      let firefoxInternalUUID = extension.i18n.getMessage('@@extension_id');\n      if (!firefoxInternalUUID)\n      {\n        const internalPageUrl = extension.runtime.getURL('images/web_advisor/logo.png');\n        // get internal uuid from resource url extracting characters between 'moz-extension://' and '/'\n        // sample url: moz-extension://ABCDE/images/web_advisor/logo.png => ABCDE\n        const urlSplit = internalPageUrl.split('/');\n        firefoxInternalUUID = (urlSplit.length >= 3) ? urlSplit[2] : '';\n      }\n\n      return firefoxInternalUUID && url.startsWith(`moz-extension://${firefoxInternalUUID}`);\n    }\n\n    return false;\n  }\n\n  // Check whether a url is a siteadvisor url or our own extension url\n  static isSafeUrl(url)\n  {\n    return BackgroundCommon.isSiteAdvisorUrl(url) || BackgroundCommon.isExtensionUrl(url);\n  }\n\n  static isSiteAdvisorUrl(url)\n  {\n    return (url.startsWith(`http://${BackgroundConstants.SITE_ADVISOR_URL}`)\n    || url.startsWith(`https://${BackgroundConstants.SITE_ADVISOR_URL}`));\n  }\n\n  static isPropertRedirectUrl(url)\n  {\n    return BackgroundCommon.isPropertyWebURL(url) || url.startsWith('edge://') || url.startsWith('chrome://');\n  }\n\n  // Check whether a url is a proper web url\n  static isProperWebURL(url)\n  {\n    if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith('ftp://'))\n    {\n      return true;\n    }\n\n    return false;\n  }\n\n  static getUINumber(number)\n  {\n    // sample output:\n    // 0: 0\n    // 999: 999\n    // 1010: 1k+\n    // 1251: 1.2k+\n    // 9999: 9.9k+\n    // > 10000: 10k+\n    const THOUSAND = 1000;\n    const TEN_THOUSAND = 10000;\n    if (number >= TEN_THOUSAND) return '10k+';\n    if (number >= THOUSAND)\n    {\n      let decimal = (number / THOUSAND).toFixed(1);\n      decimal = decimal.substring(2, 3) === '0' ? decimal.substring(0, 1) : decimal;\n      return `${decimal}k+`;\n    }\n    return `${number}`;\n  }\n\n  static hasEpochTimeElapsed(initialEpochInSeconds, timePassedinSeconds)\n  {\n    const nowInSeconds = (new Date()).getTime() / 1000;\n    if (nowInSeconds > initialEpochInSeconds + timePassedinSeconds) return true;\n    return false;\n  }\n\n  static isPersonalPolicyEnabled()\n  {\n/////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////\n/////\n///////////////////\n/////\n//////////////\n\n    return true;\n  }\n\n  static isActivityPolicyEnabled()\n  {\n/////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////////////////////////////\n/////\n///////////////////\n/////\n//////////////\n\n    return true;\n  }\n\n  static blockRequest(tabId, url, message)\n  {\n    extension.declarativeNetRequest.getDynamicRules(\n      (rules) =>\n      {\n        const found = rules.filter((rule) => rule.condition.urlFilter === url);\n\n        if (found.length === 0)\n        {\n          extension.declarativeNetRequest.updateDynamicRules(\n            {\n              addRules: [{\n                id: rules.length + 1,\n                condition: {\n                  domains: ['<all_urls>'],\n                  urlFilter: url,\n                  resourceTypes: ['main_frame']\n                },\n                action: {\n                  type: 'block'\n                }\n              }]\n            },\n            () =>\n            {\n              Logger.log(`${message} ${url} ${tabId}`);\n            }\n          );\n        }\n      }\n    );\n  }\n}\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport WhitelistWrapper from '@extension/background/whitelist_wrapper';\r\nimport FeatureStats, { featureStatsTypes } from '@extension/background/feature_stats';\r\n// Common\r\nimport { extension } from '@extension/common/webextension';\r\nimport { LocalStorageVariables } from '@extension/common/cache_store_variables';\r\nimport UrlParser from '@extension/common/url_parser';\r\nimport { WPSBlockPageType } from '@extension/common/constants';\r\nimport BlockPageCommon from '@extension/background/block_page_common';\r\nimport { Logger } from '@extension/common/logger';\r\n// Injector\r\nimport Injector from '@extension/background/content_injector/injector';\r\nimport InjectCryptoBlock from '@extension/background/content_injector/inject_crypto_block';\r\nimport BackgroundCommon from '@extension/common/background_common';\r\n\r\n/**\r\n * Responsible for all crypto jacking related features, listening on web requests, whitelisting and blocking malicious urls.\r\n */\r\nexport default class CryptojackingListener\r\n{\r\n  /**\r\n   * Handler invoked before a web request is made based\r\n   * @param {Object} details       - Details about the request being made\r\n   * @param {Number} details.tabId - ID of the tab that has the request take place\r\n   * @param {String} details.url   - Target url of the request\r\n   * @returns {Object} - A \"webRequest.BlockingResponse\" object\r\n   */\r\n  onBeforeRequest({ tabId, url })\r\n  {\r\n    if (!BackgroundCommon.isPersonalPolicyEnabled())\r\n    {\r\n      return;\r\n    }\r\n\r\n    if (BackgroundGlobals.nativeSettings.CRYPTOJACKING_DISABLED.value === true)\r\n    {\r\n      return;\r\n    }\r\n\r\n    if (tabId === -1)\r\n    {\r\n      Logger.log(`Crypto mining check not done : ${url} ${tabId}`);\r\n      return;\r\n    }\r\n\r\n    extension.tabs.get(tabId, (tData) =>\r\n    {\r\n      const tabURL = tData.url;\r\n      const domainURL = UrlParser.getDomain(tabURL);\r\n      const isWhiteListed = WhitelistWrapper.isDomainInWhitelist(domainURL, LocalStorageVariables.CRYPTO_WHITELIST.name);\r\n\r\n      if (isWhiteListed)\r\n      {\r\n        BlockPageCommon.sendBlockPageEvent(WPSBlockPageType.Crypto, tabURL, url, true);\r\n        return;\r\n      }\r\n\r\n      FeatureStats.add(featureStatsTypes.CRYPTO_BLOCKED);\r\n      this.notifyCryptoBlock(tabId, domainURL, url);\r\n      BackgroundCommon.blockRequest(tabId, url, 'Blocked crypto mining script/connection:');\r\n      BlockPageCommon.sendBlockPageEvent(WPSBlockPageType.Crypto, tabURL, url, false);\r\n    });\r\n  }\r\n\r\n  init()\r\n  {\r\n    const types = ['websocket', 'script', 'xmlhttprequest'];\r\n\r\n    // Assign handler for before creating web request based on a filter and some pre-conditions\r\n    extension.webRequest.onBeforeRequest.addListener(\r\n      this.onBeforeRequest.bind(this),\r\n      { urls: BackgroundGlobals.cryptoBlacklist, types }\r\n    );\r\n  }\r\n\r\n  uninit()\r\n  {\r\n    extension.webRequest.onBeforeRequest.removeListener(this.onBeforeRequest.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Notify content script and native that cryptojacking has been detected\r\n   * @param  {Number} tabId - ID of the tab to be reload after adding to whitelist\r\n   * @param  {String} domain - Domain of the cryptojacking site\r\n   * @param  {String} cryptoMinerScript - Full url of the cryptojacking site\r\n   */\r\n  notifyCryptoBlock(tabId, domain, cryptoMinerScript)\r\n  {\r\n    // Notify content script\r\n    const miner = cryptoMinerScript.split('').reverse().join('');\r\n    const cryptoBlockData = { domain, miner };\r\n\r\n    BackgroundGlobals.tabData.update(tabId, { cryptoBlockData });\r\n    const contentToInject = [new InjectCryptoBlock()];\r\n    Injector.inject(tabId, contentToInject);\r\n  }\r\n\r\n  /**\r\n   * Add Cryptojacking site to the whitelist\r\n   * @param  {string} url - url of the site to be whitelisted\r\n   * @param  {integer} tabId - id of the tab to be reload after adding to whitelist\r\n   */\r\n  addToWhitelist(url, tabId)\r\n  {\r\n    const domainURL = UrlParser.getDomain(url);\r\n\r\n    if (!domainURL)\r\n    {\r\n      return;\r\n    }\r\n\r\n    WhitelistWrapper.addDomainsToWhitelist([domainURL], LocalStorageVariables.CRYPTO_WHITELIST.name);\r\n\r\n    // Reload tab\r\n    extension.tabs.reload(tabId, { bypassCache: true });\r\n  }\r\n}\r\n","// Common\r\nimport { extension } from '@extension/common/webextension';\r\nimport { BrowseActionColors, Color } from '@extension/common/constants';\r\nimport { Logger } from '@extension/common/logger';\r\n\r\n/**\r\n * Wrapper class for the extension's browserAction API. Responsible for putting the correct icon\r\n * on the browser's toolbar along with enabling / disabling action methods.\r\n * This allows data to be stored in memory for the specific tab\r\n */\r\nexport default class BrowserAction\r\n{\r\n  /**\r\n   * Set the browser action icon based on a color (Color from constants.js)\r\n   * @param  {number} color - color icon to be set (Color from constants.js)\r\n   * @param  {number} tabId - id of the tab\r\n   * @return {promise} - promise: 'badgeText' is returned after async call is resolved\r\n   */\r\n  static setIcon(color, tabId)\r\n  {\r\n    if (!extension.action) return;\r\n\r\n    // set to specific tab\r\n    if (!tabId)\r\n    {\r\n      return;\r\n    }\r\n\r\n    const path = BrowserAction.resolveColorToPath(color);\r\n    const details = { path, tabId };\r\n\r\n    try\r\n    {\r\n      extension.action.setIcon(details, () =>\r\n      {\r\n        const { lastError } = extension.runtime;\r\n        if (lastError) Logger.error(lastError.message);\r\n      });\r\n    }\r\n    catch (err)\r\n    {\r\n      Logger.error(`Unable to set icon, err: ${err}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve the corresponding image paths based on the color.\r\n   * @param  {number} color - Resolves the image name based on the color integer value provided (Color from constant.js)\r\n   * @return {object} - Resolve color to extension icon paths\r\n   */\r\n  static resolveColorToPath(color)\r\n  {\r\n    const filename = (BrowseActionColors[color] || BrowseActionColors[Color.DISABLED]).toLowerCase();\r\n    return {\r\n      16: `images/browser_action/${filename}_16.png`,\r\n      20: `images/browser_action/${filename}_20.png`,\r\n      32: `images/browser_action/${filename}_32.png`,\r\n      40: `images/browser_action/${filename}_40.png`\r\n    };\r\n  }\r\n}\r\n","/**\r\n * Wrapper class making the http request call (using the built-in Fetch api).\r\n * Handling normal and exception cases.\r\n */\r\nexport default class HttpService\r\n{\r\n  onHttpResponse(response)\r\n  {\r\n    if (!response.ok)\r\n    {\r\n      const message = `HttpService Status: ${response.status}\\nError Text: ${response.statusText}`;\r\n      return Promise.reject(new Error(message));\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  sendHttpRequest({ url, headers, body, method = 'GET' })\r\n  {\r\n    return fetch(url, { headers, method, body }).then(this.onHttpResponse);\r\n  }\r\n}\r\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport WhitelistWrapper from '@extension/background/whitelist_wrapper';\r\n// Common\r\nimport UrlParser from '@extension/common/url_parser';\r\nimport HttpService from '@extension/common/http_service';\r\nimport BackgroundCommon from '@extension/common/background_common';\r\nimport { LocalStorageVariables } from '@extension/common/cache_store_variables';\r\nimport { Logger } from '@extension/common/logger';\r\n\r\n/**\r\n * TODO: Comments\r\n */\r\nexport default class Typosquatting\r\n{\r\n  constructor()\r\n  {\r\n    this.whitelistStore = LocalStorageVariables.TYPOSQUATTING_WHITELIST.name;\r\n    this.baseUrl = BackgroundGlobals.typoSquattingServer;\r\n    this.locale = 'en_us';\r\n    this.http = new HttpService();\r\n  }\r\n\r\n  async sendAndReceiveRequest({ url, headers })\r\n  {\r\n    let timerId;\r\n    const expiryTimer = new Promise((resolve, reject) =>\r\n    {\r\n      timerId = setTimeout(() => reject(new Error('Typosquatting timed out')), 3000);\r\n    });\r\n\r\n    const promisesToRun = async () =>\r\n    {\r\n      const res = await this.http.sendHttpRequest({ method: 'GET', url, headers });\r\n      clearTimeout(timerId);\r\n\r\n      if (!res)\r\n      {\r\n        Logger.error('Invalid response for typosquatting request');\r\n        return {};\r\n      }\r\n\r\n      try\r\n      {\r\n        const text = await res.text();\r\n        return JSON.parse(text);\r\n      }\r\n      catch (error)\r\n      {\r\n        Logger.error(`Unexpected Error on promisesToRun, err: ${error}`);\r\n      }\r\n\r\n      return {};\r\n    };\r\n\r\n    return Promise.race([expiryTimer, promisesToRun()]).catch((err) =>\r\n    {\r\n      Logger.warn(`Fail to execute sendAndReceiveRequest, err: ${err}`);\r\n      return {};\r\n    });\r\n  }\r\n\r\n  parseUrlToObject(payload)\r\n  {\r\n    const result = {};\r\n    payload.split('&').forEach((argument) =>\r\n    {\r\n      const [key, value] = argument.split('=');\r\n      if (key === 'bdomain') result.typoDomain = value;\r\n      if (key === 'bname') result.brandName = unescape(value).replace(/\\+/g, ' ');\r\n      if (key === 'xp') result.experience = value === 'search' ? 3 : 1;\r\n      if (key === 'targeturl') result.typoRedirect = unescape(value.replace(/\\0/g, ''));\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  async processResponse({ url }, domain, originalUrl)\r\n  {\r\n    if (url === '' || url === undefined)\r\n    {\r\n      BackgroundGlobals.typoCache.addEntry(domain, { experience: -1 });\r\n      return null;\r\n    }\r\n\r\n    if (!BackgroundCommon.isSiteAdvisorUrl(url))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const payload = UrlParser.getParam(url, 'payload');\r\n\r\n    if (payload === null || payload === undefined)\r\n    {\r\n      BackgroundGlobals.typoCache.addEntry(domain, { experience: -1 });\r\n      return null;\r\n    }\r\n\r\n    try\r\n    {\r\n      const payloadDecrypted = await BackgroundGlobals.wasm.wasm_typosquat_decrypt(decodeURIComponent(payload));\r\n      const item = this.parseUrlToObject(payloadDecrypted);\r\n      item.originalUrl = originalUrl;\r\n      BackgroundGlobals.typoCache.addEntry(domain, item);\r\n      return domain;\r\n    }\r\n    catch (error)\r\n    {\r\n      Logger.error(error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async lookupTypoSquatFromServer(originalUrl)\r\n  {\r\n    try\r\n    {\r\n      const domain = UrlParser.getDomain(originalUrl);\r\n\r\n      const promises = BackgroundGlobals.typoCache.checkRequest([domain]);\r\n      await Promise.all(promises);\r\n\r\n      const domainData = BackgroundGlobals.typoCache.getEntry(domain);\r\n      if (domainData)\r\n      {\r\n        return domainData.experience === -1 ? null : domain;\r\n      }\r\n\r\n      const req = `domain=${domain}&locale=${this.locale}`;\r\n      const url = `${this.baseUrl}${req}`;\r\n      const promise = BackgroundGlobals.wasm.wasm_typosquat_sha256(req)\r\n        .then((checkSum) => this.sendAndReceiveRequest({ url, headers: { 'Content-Checksum': checkSum } }))\r\n        .then((response) => this.processResponse(response, domain, originalUrl))\r\n        .then((responseDomain) =>\r\n        {\r\n          BackgroundGlobals.typoCache.deleteRequest([domain]);\r\n          return responseDomain;\r\n        })\r\n        .catch((err) =>\r\n        {\r\n          Logger.warn(`TypoSquatting promise request error: ${err}`);\r\n          BackgroundGlobals.typoCache.deleteRequest([domain]);\r\n          return null;\r\n        });\r\n\r\n      BackgroundGlobals.typoCache.addRequest([domain], promise);\r\n      return promise;\r\n    }\r\n    catch (error)\r\n    {\r\n      Logger.warn(`TypoSquatting try/catch error: ${error}`);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  isInWhitelist(domain)\r\n  {\r\n    return WhitelistWrapper.isDomainInWhitelist(domain, this.whitelistStore);\r\n  }\r\n}\r\n","// Common\r\nimport { SocialMediaTypes } from '@extension/common/sma_variables';\r\n\r\n/**\r\n * TODO: Comment\r\n */\r\nexport default class SearchEngine\r\n{\r\n  constructor(engines, socialMediaToggle, socialMediaOption, secureSearchRegExes)\r\n  {\r\n    this.engines = engines;\r\n    this.secureSearchRegExes = secureSearchRegExes;\r\n\r\n    this.socialMediaToggle = socialMediaToggle;\r\n    this.socialMediaOption = socialMediaOption;\r\n    if (socialMediaToggle && socialMediaOption)\r\n    {\r\n      this.updateSocialMedia();\r\n    }\r\n  }\r\n\r\n  updateSocialMedia()\r\n  {\r\n    if (!this.socialMediaToggle || this.socialMediaOption === SocialMediaTypes.NONE) return;\r\n\r\n    // The social media annotation engines are disabled by default.\r\n    // Here we are enabling those engines that have been set as enabled by user.\r\n    for (const engine of this.engines)\r\n    {\r\n      // Check if this engine is of social media type\r\n      if (engine.socialMediaType !== undefined)\r\n      {\r\n        // If so, we need to update the engines saved in bkglobals\r\n        // with the latest selected options from the user, as the list\r\n        // is always kept in memory.\r\n        if (engine.socialMediaType & this.socialMediaOption)\r\n        {\r\n          engine.enabled = true;\r\n        }\r\n        else\r\n        {\r\n          engine.enabled = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  checkEngineRegEx(url, engineRegexes)\r\n  {\r\n    for (let reindex = 0; reindex < engineRegexes.length; ++reindex)\r\n    {\r\n      const regexp = new RegExp(engineRegexes[reindex], 'i');\r\n      const ret = regexp.test(url);\r\n      if (ret) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getSecureEngineName(engineRegexesString)\r\n  {\r\n    if (engineRegexesString.includes('yahoo'))\r\n    {\r\n      return 'yahoo';\r\n    }\r\n\r\n    if (engineRegexesString.includes('bing'))\r\n    {\r\n      return 'bing';\r\n    }\r\n\r\n    if (engineRegexesString.includes('yandex'))\r\n    {\r\n      return 'yandex';\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  getEngineForUrl(url)\r\n  {\r\n    const SECURE_SEARCH_REGEXES = this.secureSearchRegExes.value;\r\n    let secureEngineName = null;\r\n    if (SECURE_SEARCH_REGEXES.length > 0)\r\n    {\r\n      secureEngineName = this.getSecureEngineName(SECURE_SEARCH_REGEXES[0]);\r\n    }\r\n\r\n    const engineData = this.engines.find((engine) =>\r\n    {\r\n      if (!engine.enabled)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      if (engine.secureurlre)\r\n      {\r\n        const ssRegEx = secureEngineName === engine.name ? SECURE_SEARCH_REGEXES : engine.secureurlre;\r\n\r\n        const ret = this.checkEngineRegEx(url, ssRegEx);\r\n        if (ret)\r\n        {\r\n          engine.issecuresearch = true;\r\n          return true;\r\n        }\r\n      }\r\n\r\n      const ret = this.checkEngineRegEx(url, engine.urlre);\r\n      if (ret)\r\n      {\r\n        engine.issecuresearch = false;\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n\r\n    return engineData;\r\n  }\r\n\r\n  /**\r\n   * Gets the list of all selectors. This include disabled selectors as well.\r\n   */\r\n  getEngines()\r\n  {\r\n    return this.engines;\r\n  }\r\n}\r\n","import { Color, BlockState, KEY_CODES_RANGE } from '@extension/common/constants';\r\n\r\nexport const FEATURE_TAB_ID = {\r\n  WHITELIST: 'whitelist',\r\n  PREFERENCE: 'preference',\r\n  STATISTICS: 'statistics',\r\n  ABOUT: 'about',\r\n};\r\n\r\n/* Acts as Event Names and also as Trigger Identifiers for handling telemetry */\r\nexport const EventNames = {\r\n  BLOCK_PAGE: 'Block_Page',\r\n  BROWSER_ACTION_CLICKED: 'BrowserAction_Clicked',\r\n  BROWSER_NAVIGATE: 'Browser_Navigate',\r\n  CRYPTOJACKING_BLOCK: 'Cryptojacking_Block',\r\n  DARK_WEB_SCAN: 'DarkWebMonitoring',\r\n  DOWNLOAD_BLOCK: 'Download_Block',\r\n  GET_SEARCH_EXTENSION: 'EmbedSearchExtension',\r\n  PROFILE_INFO: 'ProfileInfo',\r\n  REMOTE_ACCESS_TROJAN: 'RemoteAccessTrojan',\r\n  SEARCH_SUGGEST_BLOCK_PAGE: 'SearchSuggest_BlockPage',\r\n  SEARCH_SUGGEST: 'SearchSuggest',\r\n  SECURE_SEARCH_HIT: 'Secure_Search_Hit',\r\n  SIDEBAR_PANEL: 'SideBar_Panel',\r\n  SITE_REPORT: 'SiteReport',\r\n  SMA_REPUTATION: 'SMA_Reputation',\r\n  TOAST: 'Toast',\r\n  TYPOSQUATTING: 'Typosquatting',\r\n  WSS_ANALYTICS: 'WSS_Analytics',\r\n  APS: {\r\n    EVENT_NAME: 'AdvancedProtectionSignals',\r\n    IMPRESSION_BALLOON: 'IMPRESSION_BALLOON',\r\n    IMPRESSION_HOVER: 'IMPRESSION_HOVER',\r\n    CLOSE_BALLOON: 'CLOSE_BALLOON',\r\n    TOAST_CLOSE: 'TOAST_CLOSE',\r\n    TOAST: 'toast',\r\n    BALLOON: 'balloon',\r\n  },\r\n};\r\n\r\nexport const ToastTypes = {\r\n  REGULAR_TOAST: 'RegularToast',\r\n  EFFICACY_TOAST: 'Efficacy_SS',\r\n};\r\n\r\nexport const ImpressionNames = {\r\n  BROWSER_ACTION_CLICKED: 'BrowserActionClicked',\r\n  TYPOSQUATTING: 'Typosquatting',\r\n  BLOCK_PAGE: 'BlockPage',\r\n  SECURE_SEARCH_HIT: 'SecureSearchHit',\r\n  CRYPTOJACKING_BLOCK: 'CryptojackingBlock',\r\n  SIDEBAR_PANEL: 'SideBarPanel',\r\n  SMA_REPUTATION: 'SMAReputation',\r\n  DOWNLOAD_BLOCK: 'DownloadBlock',\r\n};\r\n\r\nexport const InteractionTypes = {\r\n  IMPRESSION: 'Impression',\r\n  WEBADVISOR: 'WebAdvisor',\r\n  CRYPTOJACKING: {\r\n    LEARN_MORE_CLICKED: 'LearnMoreClicked',\r\n    WHITELISTED: 'Whitelisted',\r\n  },\r\n  SIDEBAR_PANEL: {\r\n    MAIN: 'Main',\r\n  },\r\n  SELECTION: 'Selection',\r\n  DISMISSED: 'Dismissed',\r\n  HOVERED: 'Hovered',\r\n  CLOSE_CLICKED: 'CloseClicked',\r\n  CLICKED: 'Clicked',\r\n  ENABLE: 'Enable',\r\n  ADD: 'Add',\r\n  RAT_DETECTION: {\r\n    ACKNOWLEDGED: 'Acknowledged',\r\n    WHITELISTED: 'Whitelisted',\r\n  },\r\n  ACCEPTED: 'Accepted',\r\n  DECLINED: 'Declined',\r\n  ACKNOWLEDGED: 'Acknowledged',\r\n  CLOSE: 'Close',\r\n  NEXT: 'Next',\r\n  GOT_IT: 'GotIt',\r\n  HOVER: 'Hover',\r\n};\r\n\r\nexport const PageLevel = {\r\n  TOP: 'Top',\r\n  FRAME: 'Frame',\r\n  INLINE: 'Inline',\r\n};\r\n\r\nexport const BLOCK_PAGE_STYLE = {\r\n  EDUCATION: 'Education',\r\n  NORMAL: 'Normal',\r\n};\r\n\r\nexport const SETTING_TABS = {\r\n  ABOUT: 'About',\r\n  PREFERENCES: 'Preferences',\r\n  WHITELIST: 'Whitelist',\r\n  STATS: 'UserStatistics',\r\n};\r\n\r\nexport const TelemetryColor = {\r\n  UNKNOWN: 'UNKNOWN',\r\n  RED: 'Red',\r\n  YELLOW: 'Yellow',\r\n};\r\n\r\nexport const TelemetryBlockState = {\r\n  GREEN: 'Green',\r\n  YELLOW: 'Yellow',\r\n  RED: 'Red',\r\n  UNKNOWN: 'UNKNOWN',\r\n  TYPOSQUATTING: 'Typosquatting',\r\n  PHISHING: 'Phishing',\r\n};\r\n\r\nexport const SearchType = {\r\n  DEFAULT: 'DefaultSearch',\r\n};\r\n\r\n// For telemetry identification and message storing\r\nexport const TelemetryTerms = {\r\n  ACTION: {\r\n    CLICK: 'click',\r\n    KEYDOWN: 'keydown',\r\n    RETURN_KEY_CODE: 13,\r\n    SHOW: 'show',\r\n    SEARCH_SUGGEST_KEY_CODES: [8, 32, 46,\r\n      ...KEY_CODES_RANGE(48, 57), ...KEY_CODES_RANGE(65, 90), ...KEY_CODES_RANGE(96, 107),\r\n      ...KEY_CODES_RANGE(109, 111), ...KEY_CODES_RANGE(186, 192), ...KEY_CODES_RANGE(219, 222)], // whitelistedKeys are keycodes which results in triggerring a search suggest\r\n  },\r\n  MISC: {\r\n    // Trigger states\r\n    LOADED: 'Loaded',\r\n    CHECKED: 'checked',\r\n    // Other terms\r\n    UNKNOWN: 'UNKNOWN',\r\n    ACTION_PANEL: 'ActionPanel',\r\n    ACCEPTED: 'Accepted',\r\n    DECLINED: 'Declined',\r\n    SETTINGS_TAB_PREFIX: 'settings_tab_',\r\n    GREEN: 'GREEN',\r\n    YELLOW: 'YELLOW',\r\n    RED: 'RED',\r\n    PREFERENCE: 'Preference',\r\n    DEFAULT: 'default',\r\n  },\r\n  // Search engine annotations\r\n  SEARCH_ENGINE: {\r\n    GOOGLE: 'google',\r\n    YAHOO: 'yahoo',\r\n  },\r\n  // Social media annotations\r\n  SOCIAL_MEDIA: {\r\n    LINKEDIN: 'linkedin',\r\n    FACEBOOK: 'facebook',\r\n    YOUTUBE: 'youtube',\r\n    INSTAGRAM: 'instagram',\r\n    REDDIT: 'reddit',\r\n    TWITTER: 'twitter',\r\n  },\r\n};\r\n\r\nexport class CommonTelemetry\r\n{\r\n  static toColorTelemetry(color)\r\n  {\r\n    let colorStr = TelemetryColor.UNKNOWN;\r\n    switch (color)\r\n    {\r\n      case Color.RED:\r\n        colorStr = TelemetryColor.RED;\r\n        break;\r\n      case Color.YELLOW:\r\n        colorStr = TelemetryColor.YELLOW;\r\n        break;\r\n    }\r\n    return colorStr;\r\n  }\r\n\r\n  static toTelemetryBlockState(blockState)\r\n  {\r\n    let blockStateStr = TelemetryBlockState.UNKNOWN;\r\n    switch (blockState)\r\n    {\r\n      case BlockState.GREEN:\r\n        blockStateStr = TelemetryBlockState.GREEN;\r\n        break;\r\n      case BlockState.YELLOW:\r\n        blockStateStr = TelemetryBlockState.YELLOW;\r\n        break;\r\n      case BlockState.RED:\r\n        blockStateStr = TelemetryBlockState.RED;\r\n        break;\r\n      case BlockState.TYPOSQUATTING:\r\n        blockStateStr = TelemetryBlockState.TYPOSQUATTING;\r\n        break;\r\n      case BlockState.PHISHING:\r\n        blockStateStr = TelemetryBlockState.PHISHING;\r\n        break;\r\n    }\r\n    return blockStateStr;\r\n  }\r\n\r\n  static toTelemetrySettingTab(tabName)\r\n  {\r\n    let tabNameStr = SETTING_TABS.PREFERENCES;\r\n    switch (tabName)\r\n    {\r\n      case FEATURE_TAB_ID.WHITELIST:\r\n        tabNameStr = SETTING_TABS.WHITELIST;\r\n        break;\r\n      case FEATURE_TAB_ID.STATISTICS:\r\n        tabNameStr = SETTING_TABS.STATS;\r\n        break;\r\n      case FEATURE_TAB_ID.ABOUT:\r\n        tabNameStr = SETTING_TABS.ABOUT;\r\n        break;\r\n    }\r\n    return tabNameStr;\r\n  }\r\n}\r\n","import {\r\n  EventNames,\r\n  ImpressionNames,\r\n  InteractionTypes,\r\n  SearchType,\r\n  CommonTelemetry,\r\n  FEATURE_TAB_ID,\r\n  PageLevel,\r\n  TelemetryTerms,\r\n  ToastTypes,\r\n} from '@extension/telemetry/common_telemetry';\r\nimport BackgroundCommon from '@extension/common/background_common';\r\n\r\nexport class TelemetryMessageModifiers\r\n{\r\n  constructor(options)\r\n  {\r\n    this._options = options;\r\n    this.TELEMETRY_HANDLERS = this.initializeTelemetryHandler();\r\n  }\r\n\r\n  // Traverse through the TELEMETRY_HANDLERS Json object and fetch the list of messages which match the 'identifier'\r\n  fetchTelemetryHandlers(identifier)\r\n  {\r\n    const handlers = [];\r\n    this.TELEMETRY_HANDLERS.forEach((handler) =>\r\n    {\r\n      if (!handler.trigger.identifier || (identifier === handler.trigger.identifier))\r\n      {\r\n        handlers.push(handler);\r\n      }\r\n    });\r\n    return handlers;\r\n  }\r\n\r\n  /*\r\n    JSON object pertaining the list of all the Telemetry attributes needed for identifing the event/action.\r\n    Also returns the list of messages associated with each identifier which is the telemetry message to be sent.\r\n  */\r\n  initializeTelemetryHandler()\r\n  {\r\n    return [\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.BLOCK_PAGE,\r\n          sendTelemetry: this._options.isFromBackground || false\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: ImpressionNames.BLOCK_PAGE,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              colour: CommonTelemetry.toTelemetryBlockState(this._options.colour),\r\n              level: this._options.level,\r\n              style: (this._options.level === PageLevel.FRAME) ? 'UNKNOWN' : (this._options.blockPageStyle || 'UNKNOWN'),\r\n              _event_name: EventNames.BLOCK_PAGE,\r\n              browser: BackgroundCommon.browserTypeToString()\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.BLOCK_PAGE,\r\n          selector: '#sidebar-close',\r\n          action: TelemetryTerms.ACTION.CLICK\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: ImpressionNames.BLOCK_PAGE,\r\n              interaction_type: InteractionTypes.CLOSE_CLICKED,\r\n              colour: CommonTelemetry.toTelemetryBlockState(this._options.colour),\r\n              level: this._options.level,\r\n              style: this._options.blockPageStyle || 'UNKNOWN',\r\n              _event_name: EventNames.BLOCK_PAGE,\r\n              browser: BackgroundCommon.browserTypeToString()\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.BROWSER_ACTION_CLICKED,\r\n          sendTelemetry: true\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: ImpressionNames.BROWSER_ACTION_CLICKED,\r\n              interaction_type: InteractionTypes.WEBADVISOR,\r\n              badge_count: this._options.count,\r\n              _event_name: EventNames.BROWSER_ACTION_CLICKED,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.BROWSER_NAVIGATE,\r\n          sendTelemetry: this._options.isFromBackground\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              url: this._options.url,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              _event_name: EventNames.BROWSER_NAVIGATE\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.CRYPTOJACKING_BLOCK,\r\n          state: TelemetryTerms.MISC.LOADED,\r\n          sendTelemetry: true\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              name: ImpressionNames.CRYPTOJACKING_BLOCK,\r\n              _event_name: EventNames.CRYPTOJACKING_BLOCK,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              is_shown: true,\r\n              domain: this._options.domain || 'default',\r\n              crypto_miner: this._options.miner || 'default'\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.CRYPTOJACKING_BLOCK,\r\n          selector: '#cryptojacking_learn_link',\r\n          action: TelemetryTerms.ACTION.CLICK\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              interaction_type: InteractionTypes.CRYPTOJACKING.LEARN_MORE_CLICKED,\r\n              name: ImpressionNames.CRYPTOJACKING_BLOCK,\r\n              _event_name: EventNames.CRYPTOJACKING_BLOCK,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              is_shown: true,\r\n              domain: this._options.domain || 'default',\r\n              crypto_miner: this._options.miner || 'default'\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.CRYPTOJACKING_BLOCK,\r\n          selector: '.crypto-block-actions__close',\r\n          action: TelemetryTerms.ACTION.CLICK\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              interaction_type: InteractionTypes.CLOSE_CLICKED,\r\n              name: ImpressionNames.CRYPTOJACKING_BLOCK,\r\n              _event_name: EventNames.CRYPTOJACKING_BLOCK,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              is_shown: true,\r\n              domain: this._options.domain || 'default',\r\n              crypto_miner: this._options.miner || 'default'\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.CRYPTOJACKING_BLOCK,\r\n          selector: '#cryptojacking_banner_allow_btn',\r\n          action: TelemetryTerms.ACTION.CLICK\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              interaction_type: InteractionTypes.CRYPTOJACKING.WHITELISTED,\r\n              name: ImpressionNames.CRYPTOJACKING_BLOCK,\r\n              _event_name: EventNames.CRYPTOJACKING_BLOCK,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              is_shown: true,\r\n              domain: this._options.domain || 'default',\r\n              crypto_miner: this._options.miner || 'default'\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.DOWNLOAD_BLOCK,\r\n          state: TelemetryTerms.MISC.LOADED,\r\n          sendTelemetry: true\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: ImpressionNames.DOWNLOAD_BLOCK,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              process_name: TelemetryTerms.MISC.UNKNOWN,\r\n              file_name: TelemetryTerms.MISC.UNKNOWN,\r\n              colour: TelemetryTerms.MISC.UNKNOWN,\r\n              ui_type: TelemetryTerms.MISC.ACTION_PANEL,\r\n              _event_name: EventNames.DOWNLOAD_BLOCK,\r\n              browser: BackgroundCommon.browserTypeToString()\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.PROFILE_INFO,\r\n          sendTelemetry: true\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: EventNames.PROFILE_INFO,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              tab: CommonTelemetry.toTelemetrySettingTab(FEATURE_TAB_ID.PREFERENCE),\r\n              _event_name: EventNames.PROFILE_INFO,\r\n              browser: BackgroundCommon.browserTypeToString()\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.PROFILE_INFO,\r\n          selector: `#${TelemetryTerms.MISC.SETTINGS_TAB_PREFIX}${FEATURE_TAB_ID.PREFERENCE}`,\r\n          action: TelemetryTerms.ACTION.CLICK\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: EventNames.PROFILE_INFO,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              tab: CommonTelemetry.toTelemetrySettingTab(FEATURE_TAB_ID.PREFERENCE),\r\n              _event_name: EventNames.PROFILE_INFO,\r\n              browser: BackgroundCommon.browserTypeToString()\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.PROFILE_INFO,\r\n          selector: `#${TelemetryTerms.MISC.SETTINGS_TAB_PREFIX}${FEATURE_TAB_ID.WHITELIST}`,\r\n          action: TelemetryTerms.ACTION.CLICK\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: EventNames.PROFILE_INFO,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              tab: CommonTelemetry.toTelemetrySettingTab(FEATURE_TAB_ID.WHITELIST),\r\n              _event_name: EventNames.PROFILE_INFO,\r\n              browser: BackgroundCommon.browserTypeToString()\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.PROFILE_INFO,\r\n          selector: `#${TelemetryTerms.MISC.SETTINGS_TAB_PREFIX}${FEATURE_TAB_ID.ABOUT}`,\r\n          action: TelemetryTerms.ACTION.CLICK\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: EventNames.PROFILE_INFO,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              tab: CommonTelemetry.toTelemetrySettingTab(FEATURE_TAB_ID.ABOUT),\r\n              _event_name: EventNames.PROFILE_INFO,\r\n              browser: BackgroundCommon.browserTypeToString()\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.PROFILE_INFO,\r\n          selector: `#${TelemetryTerms.MISC.SETTINGS_TAB_PREFIX}${FEATURE_TAB_ID.STATISTICS}`,\r\n          action: TelemetryTerms.ACTION.CLICK\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: EventNames.PROFILE_INFO,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              tab: CommonTelemetry.toTelemetrySettingTab(FEATURE_TAB_ID.STATISTICS),\r\n              _event_name: EventNames.PROFILE_INFO,\r\n              browser: BackgroundCommon.browserTypeToString()\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.SEARCH_SUGGEST_BLOCK_PAGE,\r\n          selector: '#block_page_search_input',\r\n          action: TelemetryTerms.ACTION.KEYDOWN\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: EventNames.SEARCH_SUGGEST,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              search_type: EventNames.BLOCK_PAGE,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              _event_name: EventNames.SEARCH_SUGGEST\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.SEARCH_SUGGEST_BLOCK_PAGE,\r\n          sendTelemetry: this._options.selected\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: EventNames.SEARCH_SUGGEST,\r\n              interaction_type: InteractionTypes.SELECTION,\r\n              search_type: EventNames.BLOCK_PAGE,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              _event_name: EventNames.SEARCH_SUGGEST\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.SEARCH_SUGGEST_TYPOSQUATTING,\r\n          selector: '#typosquatting_message_search_input',\r\n          action: TelemetryTerms.ACTION.KEYDOWN\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: EventNames.SEARCH_SUGGEST,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              search_type: EventNames.TYPOSQUATTING,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              _event_name: EventNames.SEARCH_SUGGEST\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.SEARCH_SUGGEST_TYPOSQUATTING,\r\n          sendTelemetry: this._options.selected\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: EventNames.SEARCH_SUGGEST,\r\n              interaction_type: InteractionTypes.SELECTION,\r\n              search_type: EventNames.TYPOSQUATTING,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              _event_name: EventNames.SEARCH_SUGGEST\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.SECURE_SEARCH_HIT,\r\n          sendTelemetry: true\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              name: ImpressionNames.SECURE_SEARCH_HIT,\r\n              search_type: SearchType.DEFAULT,\r\n              _event_name: EventNames.SECURE_SEARCH_HIT,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              type_tag: this._options.typeTag,\r\n              provider_type: this._options.engineName\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.SIDEBAR_PANEL,\r\n          sendTelemetry: true\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: ImpressionNames.SIDEBAR_PANEL,\r\n              interaction_type: this._options.interaction_type,\r\n              _event_name: EventNames.SIDEBAR_PANEL,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.SITE_REPORT,\r\n          state: TelemetryTerms.MISC.LOADED,\r\n          sendTelemetry: true\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              name: EventNames.SITE_REPORT,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              block_state: CommonTelemetry.toTelemetryBlockState(this._options.blockState),\r\n              site_categories: this._options.siteCategories,\r\n              url: this._options.displayUrl,\r\n              style: TelemetryTerms.MISC.ACTION_PANEL,\r\n              _event_name: EventNames.SITE_REPORT,\r\n              browser: BackgroundCommon.browserTypeToString()\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.SITE_REPORT,\r\n          selector: '#sidebar-close',\r\n          action: TelemetryTerms.ACTION.CLICK\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              name: EventNames.SITE_REPORT,\r\n              interaction_type: InteractionTypes.CLOSE_CLICKED,\r\n              block_state: CommonTelemetry.toTelemetryBlockState(this._options.blockState),\r\n              site_categories: this._options.siteCategories,\r\n              url: this._options.displayUrl,\r\n              style: TelemetryTerms.MISC.ACTION_PANEL,\r\n              _event_name: EventNames.SITE_REPORT,\r\n              browser: BackgroundCommon.browserTypeToString()\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.SMA_REPUTATION,\r\n          sendTelemetry: true\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: ImpressionNames.SMA_REPUTATION,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              _event_name: EventNames.SMA_REPUTATION,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              site: this._options.site,\r\n              color: TelemetryTerms.MISC.GREEN,\r\n              count: this._options[TelemetryTerms.MISC.GREEN],\r\n            }\r\n          },\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: ImpressionNames.SMA_REPUTATION,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              _event_name: EventNames.SMA_REPUTATION,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              site: this._options.site,\r\n              color: TelemetryTerms.MISC.RED,\r\n              count: this._options[TelemetryTerms.MISC.RED],\r\n            }\r\n          },\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: ImpressionNames.SMA_REPUTATION,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              _event_name: EventNames.SMA_REPUTATION,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              site: this._options.site,\r\n              color: TelemetryTerms.MISC.YELLOW,\r\n              count: this._options[TelemetryTerms.MISC.YELLOW],\r\n            }\r\n          },\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: ImpressionNames.SMA_REPUTATION,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              _event_name: EventNames.SMA_REPUTATION,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              site: this._options.site,\r\n              color: TelemetryTerms.MISC.UNKNOWN,\r\n              count: this._options[TelemetryTerms.MISC.UNKNOWN],\r\n            }\r\n          },\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.TOAST,\r\n          sendTelemetry: true\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              _event_name: 'ToastCheckCompleted',\r\n              category: 'ToastCheck',\r\n              triggerType: 'Impression',\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n            }\r\n          },\r\n          {\r\n            template: {\r\n              _event_name: 'Secure_Search_Toast',\r\n              category: 'SecureSearchToast',\r\n              action_type: 'Impression',\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              provider: (this._options.toastData) ? (this._options.toastData.providerId) : TelemetryTerms.MISC.UNKNOWN,\r\n              toastType: (this._options.toastData) ? (this._options.toastData.toastType) : ToastTypes.REGULAR_TOAST,\r\n              metadata: (this._options.toastData) ? (this._options.toastData.metadata) : TelemetryTerms.MISC.DEFAULT,\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.TYPOSQUATTING,\r\n          sendTelemetry: this._options.isFromBackground\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: ImpressionNames.TYPOSQUATTING,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              browser: BackgroundCommon.browserTypeToString(),\r\n              _event_name: EventNames.TYPOSQUATTING\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.REMOTE_ACCESS_TROJAN,\r\n          state: TelemetryTerms.MISC.LOADED,\r\n          sendTelemetry: true\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: EventNames.REMOTE_ACCESS_TROJAN,\r\n              interaction_type: InteractionTypes.IMPRESSION,\r\n              browser: BackgroundCommon.browserTypeToString(true),\r\n              url: this._options.url,\r\n              _event_name: EventNames.REMOTE_ACCESS_TROJAN\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.REMOTE_ACCESS_TROJAN,\r\n          selector: '#rat_detection_got_it_btn',\r\n          action: TelemetryTerms.ACTION.CLICK\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: EventNames.REMOTE_ACCESS_TROJAN,\r\n              interaction_type: InteractionTypes.RAT_DETECTION.ACKNOWLEDGED,\r\n              browser: BackgroundCommon.browserTypeToString(true),\r\n              url: this._options.url,\r\n              _event_name: EventNames.REMOTE_ACCESS_TROJAN\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.REMOTE_ACCESS_TROJAN,\r\n          selector: '#sidebar_rat_detection_whitelist_btn',\r\n          action: TelemetryTerms.ACTION.CLICK\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: EventNames.REMOTE_ACCESS_TROJAN,\r\n              interaction_type: InteractionTypes.RAT_DETECTION.WHITELISTED,\r\n              browser: BackgroundCommon.browserTypeToString(true),\r\n              url: this._options.url,\r\n              _event_name: EventNames.REMOTE_ACCESS_TROJAN\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.REMOTE_ACCESS_TROJAN,\r\n          selector: '#sidebar-close',\r\n          action: TelemetryTerms.ACTION.CLICK\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              name: EventNames.REMOTE_ACCESS_TROJAN,\r\n              interaction_type: InteractionTypes.CLOSE_CLICKED,\r\n              browser: BackgroundCommon.browserTypeToString(true),\r\n              url: this._options.url,\r\n              _event_name: EventNames.REMOTE_ACCESS_TROJAN\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.WSS_ANALYTICS,\r\n          sendTelemetry: true\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              _event_name: EventNames.WSS_ANALYTICS,\r\n              message: this._options.message,\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.DARK_WEB_SCAN,\r\n          sendTelemetry: true\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              _event_name: EventNames.DARK_WEB_SCAN,\r\n              category: EventNames.DARK_WEB_SCAN,\r\n              action_type: this._options.eventAction || TelemetryTerms.MISC.UNKNOWN,\r\n              browser: BackgroundCommon.browserTypeToString(true) === 'un' ? TelemetryTerms.MISC.UNKNOWN : BackgroundCommon.browserTypeToString(true),\r\n              count: this._options.count || TelemetryTerms.MISC.UNKNOWN,\r\n              type: this._options.type,\r\n              flow_id: this._options.flowId,\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.APS.EVENT_NAME,\r\n          sendTelemetry: true,\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              _event_name: EventNames.APS.EVENT_NAME,\r\n              name: EventNames.APS.EVENT_NAME,\r\n              action_type: InteractionTypes.IMPRESSION,\r\n              browser: BackgroundCommon.browserTypeToString(true),\r\n              type: EventNames.APS.TOAST,\r\n              sequence: TelemetryTerms.MISC.DEFAULT,\r\n              trigger: TelemetryTerms.MISC.DEFAULT,\r\n              color: TelemetryTerms.MISC.DEFAULT,\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.APS.IMPRESSION_BALLOON,\r\n          sendTelemetry: true,\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              _event_name: EventNames.APS.EVENT_NAME,\r\n              name: EventNames.APS.EVENT_NAME,\r\n              action_type: InteractionTypes.IMPRESSION,\r\n              browser: BackgroundCommon.browserTypeToString(true) === 'un' ? TelemetryTerms.MISC.UNKNOWN : BackgroundCommon.browserTypeToString(true),\r\n              type: EventNames.APS.BALLOON,\r\n              sequence: this._options.sequence,\r\n              trigger: this._options.trigger,\r\n              color: this._options.color,\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.APS.IMPRESSION_HOVER,\r\n          sendTelemetry: true,\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              _event_name: EventNames.APS.EVENT_NAME,\r\n              name: EventNames.APS.EVENT_NAME,\r\n              action_type: InteractionTypes.HOVER,\r\n              browser: BackgroundCommon.browserTypeToString(true) === 'un' ? TelemetryTerms.MISC.UNKNOWN : BackgroundCommon.browserTypeToString(true),\r\n              type: EventNames.APS.BALLOON,\r\n              sequence: this._options.sequence,\r\n              trigger: this._options.trigger,\r\n              color: this._options.color,\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.APS.CLOSE_BALLOON,\r\n          sendTelemetry: true,\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              _event_name: EventNames.APS.EVENT_NAME,\r\n              name: EventNames.APS.EVENT_NAME,\r\n              action_type: InteractionTypes.CLOSE,\r\n              browser: BackgroundCommon.browserTypeToString(true) === 'un' ? TelemetryTerms.MISC.UNKNOWN : BackgroundCommon.browserTypeToString(true),\r\n              type: EventNames.APS.BALLOON,\r\n              sequence: this._options.sequence,\r\n              trigger: this._options.trigger,\r\n              color: this._options.color,\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        trigger: {\r\n          identifier: EventNames.APS.TOAST_CLOSE,\r\n          sendTelemetry: true,\r\n        },\r\n        messages: [\r\n          {\r\n            template: {\r\n              analyticsSDK: true,\r\n              _event_name: EventNames.APS.EVENT_NAME,\r\n              name: EventNames.APS.EVENT_NAME,\r\n              action_type: this._options.gotItButton ? InteractionTypes.GOT_IT : InteractionTypes.CLOSE,\r\n              browser: BackgroundCommon.browserTypeToString(true) === 'un' ? TelemetryTerms.MISC.UNKNOWN : BackgroundCommon.browserTypeToString(true),\r\n              type: EventNames.APS.TOAST,\r\n              sequence: TelemetryTerms.MISC.DEFAULT,\r\n              trigger: TelemetryTerms.MISC.DEFAULT,\r\n              color: TelemetryTerms.MISC.DEFAULT,\r\n            }\r\n          }\r\n        ]\r\n      },\r\n    ];\r\n  }\r\n}\r\n","export default class HandlePromise\r\n{\r\n  static handlePromiseMessage(message, customCallback = null)\r\n  {\r\n    const defaultCallback = (resolve, reject, data) =>\r\n    {\r\n      if (chrome.runtime.lastError) reject(chrome.runtime.lastError.message);\r\n      resolve(data);\r\n    };\r\n\r\n    return new Promise((resolve, reject) =>\r\n    {\r\n      chrome.runtime.sendMessage(message, (data) =>\r\n      {\r\n        if (typeof customCallback === 'function') customCallback(resolve, reject, data);\r\n        else defaultCallback(resolve, reject, data);\r\n      });\r\n    });\r\n  }\r\n}\r\n","import { extension } from '@extension/common/webextension';\r\nimport { BackgroundCommands, ContentCommands } from '@extension/common/commands';\r\nimport HandlePromise from '@extension/common/handle_promise';\r\n\r\n/**\r\n * Handles communication from content process to the background process.\r\n */\r\nexport default class BackgroundIPC\r\n{\r\n  static cacheStore(action, data)\r\n  {\r\n    const command = BackgroundCommands.CACHE_STORE;\r\n    return HandlePromise.handlePromiseMessage({ command, action, data });\r\n  }\r\n\r\n  static isFrameBlocked(url)\r\n  {\r\n    const command = BackgroundCommands.IS_FRAME_BLOCKED;\r\n    return HandlePromise.handlePromiseMessage({ command, url });\r\n  }\r\n\r\n  static makeMTIRequest(requestData, referer)\r\n  {\r\n    const command = BackgroundCommands.TI_REQUEST;\r\n    const request = { command, requestData, referer };\r\n    return HandlePromise.handlePromiseMessage(request);\r\n  }\r\n\r\n  static executeCommand(commandId, params)\r\n  {\r\n    const command = BackgroundCommands.EXECUTE_COMMAND;\r\n    extension.runtime.sendMessage({ command, commandId, params });\r\n  }\r\n\r\n  static focusOrCreateTab(url)\r\n  {\r\n    const command = BackgroundCommands.FOCUS_OR_CREATE_TAB;\r\n    extension.runtime.sendMessage({ command, url });\r\n  }\r\n\r\n  static closeTab()\r\n  {\r\n    const command = BackgroundCommands.REMOVE_TAB;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  static whitelist(action, type, data)\r\n  {\r\n    const command = BackgroundCommands.WHITELIST;\r\n    return HandlePromise.handlePromiseMessage({ action, command, type, data });\r\n  }\r\n\r\n  static getPopupData()\r\n  {\r\n    const command = BackgroundCommands.GET_POPUP_DATA;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n\r\n  static getSettingsData()\r\n  {\r\n    const command = BackgroundCommands.GET_SETTINGS_DATA;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n\r\n  static searchAnnotation(action, data)\r\n  {\r\n    const command = BackgroundCommands.SEARCH_ANNOTATION;\r\n    return HandlePromise.handlePromiseMessage({ action, data, command });\r\n  }\r\n\r\n  static socialMediaAnnotation(action, data)\r\n  {\r\n    const command = BackgroundCommands.SOCIAL_MEDIA_ANNOTATION;\r\n    return HandlePromise.handlePromiseMessage({ action, data, command });\r\n  }\r\n\r\n  static async getBkGlobals(bIncludeSearchEngines = false)\r\n  {\r\n    return new Promise((resolve) =>\r\n    {\r\n      const command = BackgroundCommands.GET_BK_GLOBALS;\r\n      const promise = HandlePromise.handlePromiseMessage({ command, bIncludeSearchEngines });\r\n      promise.then((val) => { resolve(JSON.parse(val)); });\r\n    });\r\n  }\r\n\r\n  static viewSiteReport(url = null, showInNewTab = false)\r\n  {\r\n    const command = BackgroundCommands.VIEW_SITE_REPORT;\r\n    extension.runtime.sendMessage({ command, url, showInNewTab });\r\n  }\r\n\r\n  static getTypoSquattingData(domain)\r\n  {\r\n    const command = BackgroundCommands.GET_TYPOSQUATTING_DATA;\r\n    return HandlePromise.handlePromiseMessage({ command, domain });\r\n  }\r\n\r\n  static getPlaceholderText(id)\r\n  {\r\n    const command = BackgroundCommands.PLACEHOLDER_TEXT;\r\n    return HandlePromise.handlePromiseMessage({ command, id });\r\n  }\r\n\r\n  static setViewPort(x, y)\r\n  {\r\n    const command = BackgroundCommands.SET_VIEWPORT;\r\n    extension.runtime.sendMessage({ command, x, y });\r\n  }\r\n\r\n  static sendTelemetry(telemetry)\r\n  {\r\n    const command = BackgroundCommands.SEND_TELEMETRY;\r\n    extension.runtime.sendMessage({ command, telemetry });\r\n  }\r\n\r\n  static anyBlockedIframes(frameUrls)\r\n  {\r\n    const command = BackgroundCommands.ANY_BLOCKED_IFRAMES;\r\n    return HandlePromise.handlePromiseMessage({ command, frameUrls });\r\n  }\r\n\r\n  static anyBlockedCryptoScripts()\r\n  {\r\n    const command = BackgroundCommands.ANY_BLOCKED_CRYPTOSCRIPTS;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n\r\n  static resetSettings()\r\n  {\r\n    const command = BackgroundCommands.RESET_SETTINGS;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  static sendEngineStat(engine)\r\n  {\r\n    extension.runtime.sendMessage({ command: BackgroundCommands.UPDATE_ENGINE_STATS, engine });\r\n  }\r\n\r\n  static contentHandler(message)\r\n  {\r\n    const command = BackgroundCommands.CONTENT_HANDLER;\r\n    extension.runtime.sendMessage({ command, message });\r\n  }\r\n\r\n  static getTabData(payload = {})\r\n  {\r\n    const command = BackgroundCommands.GET_TAB_DATA;\r\n    const request = { command, ...payload };\r\n    return HandlePromise.handlePromiseMessage(request);\r\n  }\r\n\r\n  static isWhitelisted(url)\r\n  {\r\n    const command = BackgroundCommands.IS_WHITELISTED;\r\n    const request = { command, url };\r\n    return HandlePromise.handlePromiseMessage(request);\r\n  }\r\n\r\n  static getExtensionStatus(id)\r\n  {\r\n    return HandlePromise.handlePromiseMessage({ command: BackgroundCommands.GET_EXTENSION_STATUS, extension_id: id });\r\n  }\r\n\r\n  static unblockAllIframes()\r\n  {\r\n    const command = BackgroundCommands.UNBLOCK_ALL_IFRAMES;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  static updateRatDetectionShowingFlag(showed)\r\n  {\r\n    const command = BackgroundCommands.UPDATE_RAT_DETECTION_SHOWING_FLAG;\r\n    extension.runtime.sendMessage({ command, showed });\r\n  }\r\n\r\n  /**\r\n   * Send a message to the background to retrieve the results from Search Suggestion for the search term\r\n   *\r\n   * @param {String} searchTerm\r\n   */\r\n  static getSearchSuggest(searchTerm)\r\n  {\r\n    const command = BackgroundCommands.SEARCH_SUGGEST;\r\n    const request = { command, searchTerm };\r\n    return HandlePromise.handlePromiseMessage(request);\r\n  }\r\n\r\n  static resetNativeSetting(setting)\r\n  {\r\n    const command = BackgroundCommands.RESET_NATIVE_SETTING;\r\n    extension.runtime.sendMessage({ command, setting });\r\n  }\r\n\r\n  /**\r\n   * Save form info (logging info)\r\n   * @param {string} username - username entered in the form.\r\n   * @param {string} hostname - hostname of the page the form was submitted on.\r\n   */\r\n  static saveFormInfo(username, hostname)\r\n  {\r\n    const command = BackgroundCommands.SAVE_FORM_INFO;\r\n    extension.runtime.sendMessage({ command, username, hostname });\r\n  }\r\n\r\n  /**\r\n   * Send message to the backend to save login from multi-step detection\r\n   * @param {Object} data - Object containing the neccesary info from the form.\r\n   * @param {string} data.username - (optional) username entered into the form. Only supplied if login not complete, ie first step of multistep form.\r\n   * @param {string} data.hostanme - hostname of the page the form was submitted on.\r\n   * @param {Boolean} completeLogin - Whether or not the multistep login process is completed or not.\r\n   */\r\n  static saveMultiStepLogin(data, completeLogin)\r\n  {\r\n    const command = BackgroundCommands.SAVE_MULTISTEP_LOGIN;\r\n    extension.runtime.sendMessage({ command, data, completeLogin });\r\n  }\r\n\r\n  static getFormInfoCache()\r\n  {\r\n    const command = BackgroundCommands.GET_FORM_INFO_CACHE;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n\r\n  static clearFormInfoCache()\r\n  {\r\n    const command = BackgroundCommands.CLEAR_FORM_INFO_CACHE;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  /**\r\n   * Update list of emails to be excluded from DWS offering.\r\n   * The email is whitelisted either because the user said not to offer it again, or because the user\r\n   * added it to be monitored in the web portal.\r\n   * @param {*} email\r\n   */\r\n  static updateDWSWhitelist(email)\r\n  {\r\n    const command = BackgroundCommands.UPDATE_DWS_WHITELIST;\r\n    extension.runtime.sendMessage({ command, email });\r\n  }\r\n\r\n  static getCachedDWSInfo(email)\r\n  {\r\n    const command = BackgroundCommands.GET_CACHED_DWS_INFO;\r\n    const request = { command, email };\r\n    return HandlePromise.handlePromiseMessage(request);\r\n  }\r\n\r\n  static clearCachedDWSInfo(email)\r\n  {\r\n    const command = BackgroundCommands.CLEAR_CACHED_DWS_INFO;\r\n    extension.runtime.sendMessage({ command, email });\r\n  }\r\n\r\n  static updateDWSShown(email)\r\n  {\r\n    const command = BackgroundCommands.UPDATE_DWS_SHOWN;\r\n    extension.runtime.sendMessage({ command, email });\r\n  }\r\n\r\n  static getAPSDetails()\r\n  {\r\n    const command = BackgroundCommands.GET_APS_DETAILS;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n\r\n  static signUpFormDetected()\r\n  {\r\n    const command = BackgroundCommands.SIGN_UP_FORM_DETECTED;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  static updateBkNativeSettings(name, value)\r\n  {\r\n    const command = BackgroundCommands.UPDATE_BK_NATIVE_SETTINGS;\r\n    extension.runtime.sendMessage({ command, name, value });\r\n  }\r\n\r\n  static launchIDPSLogin()\r\n  {\r\n    const command = BackgroundCommands.LAUNCH_IDPS_LOGIN;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  static showSidebarMain()\r\n  {\r\n    const command = BackgroundCommands.SHOW_SIDEBAR_MAIN;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  static setFFPolicyCollection({ personal, activity })\r\n  {\r\n    const command = BackgroundCommands.SET_FF_POLICY_COLLECTION;\r\n    extension.runtime.sendMessage({ command, personal, activity });\r\n  }\r\n\r\n  static setFFPolicyLastShown()\r\n  {\r\n    const command = BackgroundCommands.SET_FF_POLICY_LAST_SHOWN;\r\n    extension.runtime.sendMessage({ command });\r\n  }\r\n\r\n  // This will broadcast a sendMessage to all page owned by us\r\n  // For example, to all foreground pages. A message will be sent to\r\n  // background as well but it will not be processed\r\n  static broadcastToForeground(payload)\r\n  {\r\n    const command = ContentCommands.BROADCAST_TO_FOREGROUND;\r\n    extension.runtime.sendMessage({ command, payload });\r\n  }\r\n\r\n  static getFDWeights()\r\n  {\r\n    const command = BackgroundCommands.GET_FD_WEIGHTS;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n\r\n  static getFDExceptions()\r\n  {\r\n    const command = BackgroundCommands.GET_FD_EXCEPTIONS;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n\r\n  static getFDCrfParams()\r\n  {\r\n    const command = BackgroundCommands.GET_FD_CRF_PARAMS;\r\n    return HandlePromise.handlePromiseMessage({ command });\r\n  }\r\n}\r\n","import { extension } from '@extension/common/webextension';\n/////////////////////////////////\n//////////////////////////////////\n//////////\nexport default class Utils\n{\n  /**\n   * Creates a debounced function that delays invoking func until after wait\n   * milliseconds have elapsed since the last time the debounced function was invoked.\n   * source: http://davidwalsh.name/javascript-debounce-function\n  */\n  static debounce(func, wait, immediate)\n  {\n    let timeout;\n    return (...args) =>\n    {\n      const later = () =>\n      {\n        timeout = null;\n        if (!immediate) func(...args);\n      };\n\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n\n      timeout = setTimeout(later, wait);\n      if (callNow) func(...args);\n    };\n  }\n\n  static isBrowserEN()\n  {\n    const language = extension.i18n.getUILanguage();\n    return language.toLowerCase().startsWith('en');\n  }\n\n  static isChromeBrowser()\n  {\n    // window.opr is only defined for opera. Edge Chromium has user agent Edg. So avoid these two as\n    // chrome extension can be installed even in these two popular browsers, window.navigator\n    const ua = navigator.userAgent.toLowerCase();\n\n    // Check if browser is chromium based, window.chrome\n    if (!ua.includes('chrome') || !!chrome === false) return false;\n\n    // check if it is opera browser, window.opr\n    if (ua.includes('opr')) return false;\n\n    // check if it is edge browser\n    if (ua.includes('edg')) return false;\n\n    return true;\n  }\n}\n\n/**\n * Vanilla JS solution to JQuery's $(document).ready() API\n */\nexport const onDOMContentReady = (cb) =>\n{\n  if (typeof document === 'undefined' || document === null)\n  {\n    return;\n  }\n\n  if (document.readyState === 'complete' || (document.readyState !== 'loading' && !document.documentElement.doScroll))\n  {\n    cb();\n  }\n  else\n  {\n    document.addEventListener('DOMContentLoaded', cb);\n  }\n};\n\nexport const getBrowserInfo = () =>\n{\n  const ua = navigator.userAgent.toLowerCase();\n\n  const match = /(edge)\\/([\\w.]+)/.exec(ua)\n        || /(edg)\\/([\\w.]+)/.exec(ua)\n        || /(opr)[/]([\\w.]+)/.exec(ua)\n        || /(chrome)[ /]([\\w.]+)/.exec(ua)\n        || /(iemobile)[/]([\\w.]+)/.exec(ua)\n        || /(version)(applewebkit)[ /]([\\w.]+).*(safari)[ /]([\\w.]+)/.exec(ua)\n        || /(webkit)[ /]([\\w.]+).*(version)[ /]([\\w.]+).*(safari)[ /]([\\w.]+)/.exec(ua)\n        || /(webkit)[ /]([\\w.]+)/.exec(ua)\n        || /(opera)(?:.*version|)[ /]([\\w.]+)/.exec(ua)\n        || /(msie) ([\\w.]+)/.exec(ua)\n        || (ua.indexOf('trident') >= 0 && /(rv)(?::| )([\\w.]+)/.exec(ua))\n        || (ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(ua))\n        || [];\n\n  const platformMatch = /(ipad)/.exec(ua)\n        || /(ipod)/.exec(ua)\n        || /(windows phone)/.exec(ua)\n        || /(iphone)/.exec(ua)\n        || /(kindle)/.exec(ua)\n        || /(silk)/.exec(ua)\n        || /(android)/.exec(ua)\n        || /(win)/.exec(ua)\n        || /(mac)/.exec(ua)\n        || /(linux)/.exec(ua)\n        || /(cros)/.exec(ua)\n        || /(playbook)/.exec(ua)\n        || /(bb)/.exec(ua)\n        || /(blackberry)/.exec(ua)\n        || [];\n\n  const matched = {\n    browser: match[5] || match[3] || match[1] || '',\n    version: match[4] || match[2] || '0',\n    platform: platformMatch[0] || '',\n  };\n\n  if (matched.browser === 'mozilla')\n  {\n    matched.browser = 'firefox';\n  }\n\n  if (matched.browser === 'edg')\n  {\n    matched.browser = 'edge';\n  }\n\n  return matched;\n};\n\n/**\n * Source: https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest\n */\nexport async function digestMessage(message)\n{\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\n  const hashBuffer = await crypto.subtle.digest('SHA-256', msgUint8); // hash the message\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, '0')).join(''); // convert bytes to hex string\n  return hashHex;\n}\n/////////////////////////////////\n/////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////\n \n/////\n///\n////////////////////\n/////////////////\n///////////////////////\n///////////////////\n////////////////////////\n//////////////////////\n////////////////////////////\n//////////////////\n/////////////////////////////\n///////\n//////\n\n////////////////////////////////////////////\n///\n///////////////\n///\n//////////////\n///\n \n//////////\n","import { TelemetryTerms } from '@extension/telemetry/common_telemetry';\r\nimport { TelemetryMessageModifiers } from '@extension/telemetry/telemetry_message_modifiers';\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport BackgroundIPC from '@extension/common/background_ipc';\r\nimport { onDOMContentReady } from '@extension/utilities/utils';\r\n\r\nexport default class ContextTelemetry\r\n{\r\n  /* Registers the telemetry and fetches the respective messages based on the mapped 'identifiers'.\r\n     - Sends telemetry if associated with a User action event for a few respective cases.\r\n     - Else sends telemetry based on the 'sendTelemetry' attribute value for a few respective cases.\r\n     - Or else sends telemetry when the document is ready for a few respective cases.\r\n  */\r\n  static sendTelemetryMessages(options, handler)\r\n  {\r\n    const { sendTelemetry } = handler.trigger;\r\n    const triggerAction = handler.trigger.action;\r\n    const permittedActionList = [TelemetryTerms.ACTION.CLICK]; // All non-keyPress user actions\r\n\r\n    if (handler.trigger.selector && handler.trigger.action)\r\n    {\r\n      if (options.containerMeta)\r\n      {\r\n        const selectedTag = options.containerMeta.query(handler.trigger.selector);\r\n        if (selectedTag)\r\n        {\r\n          selectedTag.addEventListener(handler.trigger.action, sendMessages);\r\n        }\r\n      }\r\n      else\r\n      {\r\n        onDOMContentReady(() =>\r\n        {\r\n          const selectedTag = document.querySelector(handler.trigger.selector);\r\n          if (selectedTag)\r\n          {\r\n            selectedTag.addEventListener(handler.trigger.action, sendMessages);\r\n          }\r\n        });\r\n      }\r\n    }\r\n    else if (sendTelemetry || (handler.trigger.state === options.state))\r\n    {\r\n      sendMessages();\r\n    }\r\n\r\n    /**\r\n     * Function handling the sending of telemetry, either from content or background script.\r\n     * @param {Object} event - Event object if invoked by an event listener. Can also be undefined if invoked directly by us.\r\n     */\r\n    function sendMessages(event)\r\n    {\r\n      handler.messages.forEach((spec) =>\r\n      {\r\n        const telemetryMessage = { ...spec.template };\r\n        // send telemetry only when its loaded or when its loaded with count != 0 (SMA Reputation)\r\n        const shouldSendMessage = ((sendTelemetry) && ((telemetryMessage.count !== undefined) ? (telemetryMessage.count !== 0) : true));\r\n\r\n        /* send telemetry when the key pressed is in WHITELISTEDKEYS array (found in 'options' JSON)\r\n           or if the user action is a click event */\r\n        let worthyAction = permittedActionList.includes(triggerAction);\r\n        if (triggerAction === TelemetryTerms.ACTION.KEYDOWN && options.whitelistedKeys)\r\n        {\r\n          const eventCode = event.keyCode;\r\n          worthyAction = options.whitelistedKeys.includes(eventCode);\r\n        }\r\n\r\n        if (shouldSendMessage || worthyAction)\r\n        {\r\n          if (options.isFromBackground)\r\n          {\r\n            BackgroundGlobals.messageDispatcher.sendTelemetry(JSON.stringify(telemetryMessage));\r\n          }\r\n          else\r\n          {\r\n            BackgroundIPC.sendTelemetry(JSON.stringify(telemetryMessage));\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /* Accepts the paramters required for detecting the respective telemetry */\r\n  static handle(options)\r\n  {\r\n    const messageModifiers = new TelemetryMessageModifiers(options);\r\n    const telemetryHandlers = messageModifiers.fetchTelemetryHandlers(options.identifier);\r\n    telemetryHandlers.forEach((handler) =>\r\n    {\r\n      this.sendTelemetryMessages(options, handler);\r\n    });\r\n  }\r\n}\r\n","export default class NativeSetValues\r\n{\r\n  constructor(nativeDispatcher)\r\n  {\r\n    this.dispatcher = nativeDispatcher;\r\n    this.settings = [];\r\n  }\r\n\r\n  add(name, value, scope, type)\r\n  {\r\n    this.settings.push({ name, value, scope, type });\r\n  }\r\n\r\n  send()\r\n  {\r\n    if (this.dispatcher) this.dispatcher.setValues(this.settings);\r\n  }\r\n}\r\n","import { extension } from '@extension/common/webextension';\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\n\r\nexport default class BackgroundUtils\r\n{\r\n  static focusOrCreateTab(urlToFocus)\r\n  {\r\n    extension.tabs.query({ currentWindow: true }, (tabs) =>\r\n    {\r\n      for (const { id, url } of tabs)\r\n      {\r\n        if (url.includes(urlToFocus) || urlToFocus.includes(url))\r\n        {\r\n          extension.tabs.update(id, { active: true, url: urlToFocus }, () => { });\r\n          return;\r\n        }\r\n      }\r\n\r\n      extension.tabs.create({ url: urlToFocus });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the WebRequest related data based on tabId and requestId\r\n   * @param {number} tabId - id of the tab\r\n   * @param {number} requestId - id of the request\r\n   * @return {object} request data based on the tabID and requestId\r\n   */\r\n  static getRequestData(tabId, requestId)\r\n  {\r\n    if (tabId === null || requestId === null) return {};\r\n\r\n    const tabIdData = BackgroundGlobals.tabData.get(tabId);\r\n    const requestData = tabIdData.requestData || {};\r\n    const requestIdData = requestData[requestId] || {};\r\n    return requestIdData;\r\n  }\r\n\r\n  /**\r\n   * Set the WebRequest related data based on tabId and requestId\r\n   * @param {number} tabId - id of the tab\r\n   * @param {number} requestId - id of the request\r\n   * @param {object} newRequestData - new request data to be set on the tabId > requestId object\r\n   */\r\n  static setRequestData(tabId, requestId, newRequestData)\r\n  {\r\n    if (tabId === null || requestId === null) return;\r\n\r\n    const tabIdData = BackgroundGlobals.tabData.get(tabId);\r\n    const requestData = tabIdData.requestData || {};\r\n    const requestIdData = requestData[requestId] || {};\r\n    requestData[requestId] = { ...requestIdData, ...newRequestData };\r\n    BackgroundGlobals.tabData.set(tabId, { ...tabIdData, requestData });\r\n  }\r\n\r\n  /**\r\n   * Delete the WebRequest related data based on tabId and requestId\r\n   * @param {number} tabId - id of the tab\r\n   * @param {number} requestId - id of the request\r\n   */\r\n  static deleteRequestData(tabId, requestId)\r\n  {\r\n    if (tabId === null || requestId === null) return;\r\n\r\n    const tabIdData = BackgroundGlobals.tabData.get(tabId);\r\n    const requestData = tabIdData.requestData || {};\r\n    delete requestData[requestId];\r\n    BackgroundGlobals.tabData.set(tabId, { ...tabIdData, requestData });\r\n  }\r\n}\r\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport BackgroundUtils from '@extension/background/background_utils';\r\nimport FeatureStats, { featureStatsTypes } from '@extension/background/feature_stats';\r\n// Common\r\nimport BackgroundCommon from '@extension/common/background_common';\r\nimport { LocalStorageVariables } from '@extension/common/cache_store_variables';\r\nimport { SEARCH_EXTENSION_STORE_URLS, BrowserType } from '@extension/common/constants';\r\nimport { ContentCommands } from '@extension/common/commands';\r\nimport { AnnotationOptions } from '@extension/common/annotation_variables';\r\nimport { Logger } from '@extension/common/logger';\r\n\r\nconst { DOWNLOADS_BLOCKED, ANNOTATION_JOURNEY_TOAST, ANNOTATION_JOURNEY_COHORT } = BackgroundGlobals.nativeSettings;\r\n\r\nconst REQUEST_TYPE = {\r\n  ACTION: 'action',\r\n};\r\n\r\nconst REQUEST_NAME = {\r\n  SS_TOAST: 'ss_toast',\r\n  WSS_INSTALL_FLAG_CHANGED: 'wss_install_flag_changed',\r\n  SETTING_CHANGE: 'setting_change'\r\n};\r\n\r\nexport default class NativeGenericRequest\r\n{\r\n  constructor(dispatcher)\r\n  {\r\n    this.nativeDispatcher = dispatcher;\r\n  }\r\n\r\n  /**\r\n * Messages being sent from native to the extension.\r\n * @param {Object} payload - eg. [{\"request_type\": \"action\", \"name\": \"ss_toast\", \"value\": <JSON string>}]\r\n */\r\n  processMessage(payload)\r\n  {\r\n    payload.forEach((request) =>\r\n    {\r\n      const { request_type: requestType, name: requestName, value } = request;\r\n      if (requestType === REQUEST_TYPE.ACTION) this.processAction(requestName, value);\r\n    });\r\n  }\r\n\r\n  processAction(requestName, value)\r\n  {\r\n    if (!requestName) return;\r\n\r\n    switch (requestName)\r\n    {\r\n      case REQUEST_NAME.SS_TOAST:\r\n      {\r\n        this.handleSecureSearchToast(value);\r\n        break;\r\n      }\r\n      case REQUEST_NAME.WSS_INSTALL_FLAG_CHANGED:\r\n      {\r\n        this.handleWSSInstallFlag(value);\r\n        break;\r\n      }\r\n      case REQUEST_NAME.SETTING_CHANGE:\r\n      {\r\n        this.handleSettingChange(value);\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  handleSecureSearchToast(value)\r\n  {\r\n    try\r\n    {\r\n      const data = JSON.parse(value);\r\n      const { enabled, post_accept_action: postAcceptAction } = data;\r\n      if (enabled)\r\n      {\r\n        const POST_ACCEPT_ACTION = {\r\n          REDIRECT_STORE: 'redirect_store',\r\n          REDIRECT_EXTENSION_PAGE: 'redirect_extension_page'\r\n        };\r\n\r\n        switch (postAcceptAction)\r\n        {\r\n          case POST_ACCEPT_ACTION.REDIRECT_STORE:\r\n          {\r\n            BackgroundUtils.focusOrCreateTab(SEARCH_EXTENSION_STORE_URLS[BackgroundCommon.browserTypeToString()]);\r\n            break;\r\n          }\r\n          case POST_ACCEPT_ACTION.REDIRECT_EXTENSION_PAGE:\r\n          {\r\n            const extensionPage = this.toExtensionPage(BackgroundGlobals.browserType);\r\n            if (extensionPage !== null)\r\n            {\r\n              BackgroundUtils.focusOrCreateTab(extensionPage);\r\n            }\r\n            break;\r\n          }\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    }\r\n    catch (err)\r\n    {\r\n      Logger.log(`handleSecureSearchToast err: ${err}`);\r\n    }\r\n  }\r\n\r\n  handleWSSInstallFlag(value)\r\n  {\r\n    try\r\n    {\r\n      const data = JSON.parse(value);\r\n      const { wss_installed: wssInstalled } = data;\r\n      if (typeof wssInstalled === 'boolean')\r\n      {\r\n        BackgroundGlobals.WSS_INSTALLED = wssInstalled;\r\n      }\r\n    }\r\n    catch (err)\r\n    {\r\n      Logger.log(`handleWSSInstallFlag err: ${err}`);\r\n    }\r\n  }\r\n\r\n  handleSettingChange(value)\r\n  {\r\n    try\r\n    {\r\n      const data = JSON.parse(value);\r\n      const { name: settingName, value: settingValue } = data;\r\n      if (!settingName || settingValue === undefined || settingValue === null) return;\r\n\r\n      // update download blocked stats data from native request\r\n      if (settingName === DOWNLOADS_BLOCKED.name) FeatureStats.add(featureStatsTypes.DOWNLOADS_BLOCKED);\r\n\r\n      else if (settingName === ANNOTATION_JOURNEY_TOAST.name) this.handleAnnotationJourneyToast(settingValue);\r\n    }\r\n    catch (err)\r\n    {\r\n      Logger.log(`handleSettingChange err: ${err}`);\r\n    }\r\n  }\r\n\r\n  toExtensionPage(browserType)\r\n  {\r\n    let extensionPage = null;\r\n\r\n    switch (browserType)\r\n    {\r\n      case BrowserType.CHROME:\r\n        extensionPage = 'chrome://extensions';\r\n        break;\r\n      case BrowserType.EDGE:\r\n        extensionPage = 'edge://extensions';\r\n        break;\r\n      case BrowserType.FIREFOX:\r\n        extensionPage = 'about:addons';\r\n        break;\r\n    }\r\n    return extensionPage;\r\n  }\r\n\r\n  handleAnnotationJourneyToast(value)\r\n  {\r\n    try\r\n    {\r\n      if (typeof value !== 'boolean')\r\n      {\r\n        return;\r\n      }\r\n      chrome.runtime.sendMessage({ command: ContentCommands.TRIGGER_AJ_TOAST, payload: value });\r\n\r\n      BackgroundGlobals.cacheStore.set(LocalStorageVariables.AJ_TOAST.name, value);\r\n\r\n      if (value === true)\r\n      {\r\n        if ([1, 3].includes(ANNOTATION_JOURNEY_COHORT))\r\n        {\r\n          BackgroundGlobals.cacheStore.set(LocalStorageVariables.SEARCH_ANNOTATION_OPTION.name, AnnotationOptions.ONLY_SECURE_SEARCH);\r\n        }\r\n        else if ([2, 4].includes(ANNOTATION_JOURNEY_COHORT))\r\n        {\r\n          BackgroundGlobals.cacheStore.set(LocalStorageVariables.SEARCH_ANNOTATION_OPTION.name, AnnotationOptions.ALL);\r\n        }\r\n      }\r\n    }\r\n    catch (err)\r\n    {\r\n      Logger.log(`handleAnnotationJourneyToast err: ${err}`);\r\n    }\r\n  }\r\n}\r\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\n// Common\r\nimport { BuildSettings, BrowserType } from '@extension/common/constants';\r\nimport { LocalStorageVariables } from '@extension/common/cache_store_variables';\r\nimport { extension } from '@extension/common/webextension';\r\nimport { AnnotationOptions } from '@extension/common/annotation_variables';\r\nimport { SCOPE, SETTINGS_TYPE } from '@extension/background/dispatchers/native/native_settings';\r\n\r\nexport default class FeatureSettings\r\n{\r\n  static uninstallSurvey()\r\n  {\r\n    if (BackgroundGlobals.browserType === BrowserType.CHROME)\r\n    {\r\n      const survey = BackgroundGlobals.nativeSettings.UNINSTALL_SURVEY_ENABLED.value;\r\n      extension.runtime.setUninstallURL(survey ? BackgroundGlobals.nativeSettings.UNINSTALL_SURVEY_URL.value : '');\r\n    }\r\n  }\r\n\r\n  static annotationOptions()\r\n  {\r\n    const showAnnotationsOnSSOnly = BackgroundGlobals.nativeSettings.SECURE_SEARCH_ANNOTATION_ONLY.value;\r\n    const showIcons = BackgroundGlobals.nativeSettings.SECURE_SEARCH_SHOW_ICONS.value;\r\n    let searchAnnotationOption = AnnotationOptions.NONE;\r\n    if (BrowserType.EDGE === BuildSettings.BROWSER_TYPE)\r\n    {\r\n      searchAnnotationOption = BackgroundGlobals.cacheStore.get(LocalStorageVariables.SEARCH_ANNOTATION_OPTION.name, AnnotationOptions.ALL);\r\n    }\r\n    else if (showAnnotationsOnSSOnly && showIcons)\r\n    {\r\n      searchAnnotationOption = BackgroundGlobals.cacheStore.get(LocalStorageVariables.SEARCH_ANNOTATION_OPTION.name, AnnotationOptions.ONLY_SECURE_SEARCH);\r\n    }\r\n    else if (showIcons)\r\n    {\r\n      searchAnnotationOption = BackgroundGlobals.cacheStore.get(LocalStorageVariables.SEARCH_ANNOTATION_OPTION.name, AnnotationOptions.ALL);\r\n    }\r\n\r\n    const { SHOW_SEARCH_SETTINGS, CURRENT_SAO_IN_EXTENSION, SECURE_SEARCH_ANNOTATION_ONLY, SECURE_SEARCH_SHOW_ICONS } = BackgroundGlobals.nativeSettings;\r\n    if (SHOW_SEARCH_SETTINGS.value === false && searchAnnotationOption === AnnotationOptions.ONLY_SECURE_SEARCH)\r\n    {\r\n      // If ShowSearchSettings is false and if the stored annotation option is Secure Search Only\r\n      // Then we change the option to ALL since the annotation options would be selected but at the\r\n      // same time hidden on the UI.\r\n      searchAnnotationOption = AnnotationOptions.ALL;\r\n    }\r\n\r\n    // Update CurrentSAOInExtension state in native settings\r\n    const isValidSAO = [AnnotationOptions.ONLY_SECURE_SEARCH, AnnotationOptions.NONE, AnnotationOptions.ALL].includes(CURRENT_SAO_IN_EXTENSION.value);\r\n    if (!isValidSAO)\r\n    {\r\n      const setCurrentSAOInExtensionNativeSettings = {\r\n        name: CURRENT_SAO_IN_EXTENSION.name,\r\n        value: searchAnnotationOption,\r\n        scope: SCOPE.USER,\r\n        type: SETTINGS_TYPE.STRING\r\n      };\r\n      const setSecureSearchAnnotationOnlyNativeSettings = {\r\n        name: SECURE_SEARCH_ANNOTATION_ONLY.name,\r\n        value: showAnnotationsOnSSOnly,\r\n        scope: SCOPE.SYSTEM,\r\n        type: SETTINGS_TYPE.BOOL\r\n      };\r\n      const setSecureSearchShowIconsNativeSettings = {\r\n        name: SECURE_SEARCH_SHOW_ICONS.name,\r\n        value: showIcons,\r\n        scope: SCOPE.USER,\r\n        type: SETTINGS_TYPE.BOOL\r\n      };\r\n      BackgroundGlobals.messageDispatcher && BackgroundGlobals.messageDispatcher.resetNativeSetting(setCurrentSAOInExtensionNativeSettings);\r\n      BackgroundGlobals.messageDispatcher && BackgroundGlobals.messageDispatcher.resetNativeSetting(setSecureSearchAnnotationOnlyNativeSettings);\r\n      BackgroundGlobals.messageDispatcher && BackgroundGlobals.messageDispatcher.resetNativeSetting(setSecureSearchShowIconsNativeSettings);\r\n    }\r\n    else if (isValidSAO && CURRENT_SAO_IN_EXTENSION.value !== searchAnnotationOption)\r\n    {\r\n      searchAnnotationOption = CURRENT_SAO_IN_EXTENSION.value;\r\n    }\r\n\r\n    BackgroundGlobals.cacheStore.set(LocalStorageVariables.SEARCH_ANNOTATION_OPTION.name, searchAnnotationOption);\r\n  }\r\n\r\n  static setupFeatures()\r\n  {\r\n    FeatureSettings.uninstallSurvey();\r\n    FeatureSettings.annotationOptions();\r\n  }\r\n}\r\n","import { BrowserType, BuildSettings } from '@extension/common/constants';\r\n\r\nconst SUPPORTED_EXTENSION_LIST = {\r\n  [BrowserType.CHROME]:\r\n  {\r\n    WebBoost: 'klekeajafkkpokaofllcadenjdckhinm',\r\n    SearchExtension: 'enppghjcblldgigemljohkgpcompnjgh',\r\n    NewTabExtension: 'kanjcmmieblbpbihaafnedamppkhfadn',\r\n    AutomationExtension: 'bipjijaejfebbgbhchciejpabkhgpegh',\r\n    EdgeWebAdvisorExtension: 'fdhgeoginicibhagdmblfikbgbkahibd',\r\n    ChromeWebAdvisorExtension: 'fheoggkfdfchfphceeifdbepaooicaho',\r\n  },\r\n  [BrowserType.FIREFOX]:\r\n  {\r\n    AutomationExtension: '{cdaf3803-bb0b-41e2-b369-a504caff36da}',\r\n  },\r\n  [BrowserType.EDGE]:\r\n  {\r\n    AutomationExtension: 'lamehkegphbbfdailghaeeleoajilfho',\r\n  },\r\n};\r\n\r\nconst supportedExtensions = SUPPORTED_EXTENSION_LIST[BuildSettings.BROWSER_TYPE];\r\n\r\n/**\r\n * TODO: Comments\r\n */\r\nexport default class ExternalExtensions\r\n{\r\n  static isWhiteListed(extnId)\r\n  {\r\n    return supportedExtensions && Object.values(supportedExtensions).includes(extnId);\r\n  }\r\n\r\n  static get(extnName)\r\n  {\r\n    return supportedExtensions[extnName];\r\n  }\r\n\r\n  static getExtnIds()\r\n  {\r\n    return Object.values(supportedExtensions);\r\n  }\r\n}\r\n","// File to be modified at build time by webpack\r\n// Change WEBPACK_LOG_LEVEL to integer from LogLevels in logger.js\r\nexport const LoggerSettings = {\r\n  /* eslint-disable no-undef */\r\n  LOG_LEVEL: WEBPACK_LOG_LEVEL,\r\n  /* eslint-enable no-undef */\r\n};\r\n","import { LoggerSettings } from './logger_settings';\r\n\r\n/**\r\n * The different log levels considered when detecting / reporting errors in WebAdvisor\r\n * Note that a higher level means that more logs will be printed. (ie, level 3 will print level 2 and 1)\r\n */\r\nconst LogLevels = {\r\n  NONE: 0,\r\n  INFO: 1,\r\n  ERROR: 2,\r\n  WARN: 3,\r\n  DEBUG: 4,\r\n};\r\n\r\n/**\r\n * The different log types\r\n */\r\nconst LogTypes = {\r\n  INFO: 1,\r\n  ERROR: 2,\r\n  WARN: 3,\r\n  DEBUG: 4,\r\n};\r\n\r\n/**\r\n * Process type to distinguish which process called the logger\r\n */\r\nconst ProcessTypes = {\r\n  BACKGROUND: 'BACKGROUND',\r\n  CONTENT: 'CONTENT',\r\n  TELEMETRY: 'TELEMETRY',\r\n};\r\n\r\nconst ProcessStyleMap = {\r\n  DEFAULT: 'color: #000000; font-weight: normal; font-style:normal; background: #FFFFFF;',\r\n  BACKGROUND: 'color: #8D0DBA; font-weight: bold; background: #FFFFFF;',\r\n  CONTENT: 'color: #F54A26; font-weight: bold; background: #FFFFFF;',\r\n  TELEMETRY: 'color: #147831; font-weight: bold; background: #FFFFFF;',\r\n};\r\n\r\n// *****************************************************************************\r\n// To enable logs on a production build, open the background.js file and search\r\n// for \"LOG_LEVEL:\" and change the value from '0' to '3'\r\n// *****************************************************************************\r\nexport default class Logger\r\n{\r\n  static log(message)\r\n  {\r\n    processLog(message, LogTypes.INFO);\r\n  }\r\n\r\n  static error(message)\r\n  {\r\n    processLog(message, LogTypes.ERROR);\r\n  }\r\n\r\n  static warn(message)\r\n  {\r\n    processLog(message, LogTypes.WARN);\r\n  }\r\n\r\n  static debug(message)\r\n  {\r\n    processLog(message, LogTypes.DEBUG);\r\n  }\r\n}\r\n\r\nconst processLog = (message, logType) =>\r\n{\r\n  const logLevel = LoggerSettings.LOG_LEVEL;\r\n  if (logLevel === LogLevels.NONE)\r\n  {\r\n    return;\r\n  }\r\n\r\n  const processType = location.protocol === 'chrome-extension:' ? ProcessTypes.BACKGROUND : ProcessTypes.CONTENT;\r\n  const nowDate = new Date();\r\n  const logMessage = `%c[${processType} ${nowDate.toLocaleString([], { hour: '2-digit', minute: '2-digit', hour12: true })}]: %c${message}`;\r\n\r\n  const styleRegular = ProcessStyleMap.DEFAULT;\r\n  let hightlight = ProcessStyleMap[processType];\r\n\r\n  if (!hightlight)\r\n  {\r\n    hightlight = styleRegular;\r\n  }\r\n\r\n  if (logLevel >= LogLevels.ERROR && logType === LogTypes.ERROR)\r\n  {\r\n    console.error(message); // eslint-disable-line no-console\r\n  }\r\n\r\n  if (logLevel >= LogLevels.INFO && logType === LogTypes.INFO)\r\n  {\r\n    console.log(logMessage, hightlight, styleRegular); // eslint-disable-line no-console\r\n  }\r\n\r\n  if (logLevel >= LogLevels.WARN && logType === LogTypes.WARN)\r\n  {\r\n    const uniqueHighlight = 'color: #FFA500; font-family: sans-serif; font-weight: bolder; text-shadow: #000 1px 1px;';\r\n    console.log(`%cWARN - ${logMessage}`, uniqueHighlight, hightlight, styleRegular); // eslint-disable-line no-console\r\n  }\r\n\r\n  if (logLevel >= LogLevels.DEBUG && logType === LogTypes.DEBUG)\r\n  {\r\n    const uniqueHighlight = 'color: #FF33D7; font-family: sans-serif; font-weight: bolder; text-shadow: #000 1px 1px;';\r\n    console.log(`%cDEBUG - ${logMessage}`, uniqueHighlight, hightlight, styleRegular); // eslint-disable-line no-console\r\n  }\r\n};\r\n","export const GTICommands = {\r\n  GTI_REQUEST: 'GTI_REQUEST'\r\n};\r\n","export const GTIConstants = {\r\n  reputationTTL: 1000 * 60 * 60,\r\n  maxGTIQuestionLength: 16 * 1024,\r\n  globalSafeModeFlag: 0x20000000,\r\n  contentType: 'application/json; charset=utf-8',\r\n  prn: 'McAfee WebAdvisor',\r\n  sdkv: '1.0',\r\n  pev: 1,\r\n  gtiId: 'is-webadvisorc-prod',\r\n  customerId: 'Customer0008',\r\n  maxCacheRecords: 1000,\r\n  reputationAlarmName: 'REPUTATION_CLEAN_ALARM', // same name, used by GTI and HTI\r\n\r\n  // global modifiable values\r\n  gtiServer: 'https://webadvisorc.rest.gti.mcafee.com/1',\r\n  clientIdGuid: '',\r\n  cspid: '__not_available__',\r\n\r\n  // GTI to HTI Map\r\n  categoryMapGtiToHti: {\r\n    100: 'ac',\r\n    101: 'al',\r\n    102: 'an',\r\n    104: 'au',\r\n    105: 'bu',\r\n    106: 'ch',\r\n    107: 'ci',\r\n    108: 'cm',\r\n    109: 'cs',\r\n    110: 'dr',\r\n    111: 'ed',\r\n    112: 'et',\r\n    113: 'ex',\r\n    114: 'fi',\r\n    115: 'gb',\r\n    116: 'gm',\r\n    117: 'gv',\r\n    118: 'hk',\r\n    119: 'hl',\r\n    120: 'hm',\r\n    121: 'hs',\r\n    122: 'im',\r\n    123: 'in',\r\n    124: 'ir',\r\n    125: 'js',\r\n    126: 'io',\r\n    127: 'mm',\r\n    128: 'mo',\r\n    129: 'mp',\r\n    130: 'ms',\r\n    131: 'na',\r\n    132: 'nd',\r\n    133: 'np',\r\n    134: 'nw',\r\n    136: 'os',\r\n    137: 'pa',\r\n    138: 'pn',\r\n    139: 'po',\r\n    140: 'pp',\r\n    141: 'ps',\r\n    142: 'ra',\r\n    143: 'rl',\r\n    144: 'rs',\r\n    145: 'se',\r\n    146: 'sp',\r\n    147: 'st',\r\n    148: 'sw',\r\n    149: 'sx',\r\n    150: 'sy',\r\n    151: 'tb',\r\n    152: 'tr',\r\n    153: 'vi',\r\n    154: 'wa',\r\n    155: 'we',\r\n    156: 'wm',\r\n    157: 'wp',\r\n    158: 'eb',\r\n    159: 'mb',\r\n    160: 'pr',\r\n    161: 'sc',\r\n    162: 'sm',\r\n    163: 'tg',\r\n    164: 'vs',\r\n    165: 'tf',\r\n    166: 'gr',\r\n    167: 'mg',\r\n    168: 'cv',\r\n    169: 'ph',\r\n    170: 'ns',\r\n    171: 'su',\r\n    172: 'ia',\r\n    173: 'i0',\r\n    174: 'fb',\r\n    175: 'hw',\r\n    176: 'il',\r\n    177: 'is',\r\n    178: 'it',\r\n    179: 'md',\r\n    180: 'mn',\r\n    181: 'mk',\r\n    183: 'pd',\r\n    184: 'pm',\r\n    185: 'rb',\r\n    186: 're',\r\n    187: 'rh',\r\n    188: 'bl',\r\n    189: 'dc',\r\n    190: 'hr',\r\n    191: 'ti',\r\n    192: 'dp',\r\n    193: 'mv',\r\n    194: 'nt',\r\n    195: 'sn',\r\n    196: 'tt',\r\n    197: 'wx',\r\n    198: 'co',\r\n    199: 'pc',\r\n    200: 'be',\r\n    201: 'cp',\r\n    202: 'uk',\r\n    203: 'rm',\r\n    204: 'dl',\r\n    205: 'pu',\r\n    600: 'fk',\r\n    601: 'hi',\r\n    602: 'mr',\r\n    603: 'to'\r\n  }\r\n};\r\n","import { GTIConstants } from './gti_contants';\r\n\r\nexport const GTIGlobals = {\r\n  // objects\r\n  gtiRequestor: null,\r\n\r\n  // variables\r\n  cspid: GTIConstants.cspid,\r\n  clientIdGuid: GTIConstants.clientIdGuid,\r\n  serverUrl: GTIConstants.gtiServer,\r\n  productVersion: null, // value comes from main extension\r\n};\r\n","import Logger from '../../Common-Utils-Package/logger/logger';\r\nimport { GTICommands } from './gti_commands';\r\nimport { GTIGlobals } from './gti_globals';\r\n\r\nexport default class GTIBackgroundListener\r\n{\r\n  constructor(promisesToComplete)\r\n  {\r\n    this.promisesToComplete = promisesToComplete || null;\r\n  }\r\n\r\n  init()\r\n  {\r\n    chrome.runtime.onMessage.addListener((request, sender, response) =>\r\n    {\r\n      try\r\n      {\r\n        const sendResponse = (details = null) =>\r\n        {\r\n          response(details);\r\n        };\r\n\r\n        this.executeCommand(request, sender, sendResponse);\r\n      }\r\n      catch (error)\r\n      {\r\n        Logger.error(`GTIBackgroundListener addListener err, ${error.message}`);\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  async executeCommand(request, sender, sendResponse)\r\n  {\r\n    // Making sure all the promises that needs to be initialized is complete\r\n    if (this.promisesToComplete)\r\n    {\r\n      await this.promisesToComplete;\r\n    }\r\n\r\n    this[request.command] && this[request.command]({ request, sender, sendResponse });\r\n  }\r\n\r\n  async [GTICommands.GTI_REQUEST]({ request, sendResponse })\r\n  {\r\n    const { requestData, referrer, checkCacheOnly } = request;\r\n\r\n    const options = { referrer, checkCacheOnly };\r\n    const promise = new Promise((resolve) => GTIGlobals.gtiRequestor.post(requestData, resolve, options));\r\n\r\n    const response = await promise;\r\n    sendResponse(response);\r\n  }\r\n}\r\n","export const cloneObject = (object) =>\r\n{\r\n  if (typeof object !== 'object') return object;\r\n\r\n  return JSON.parse(JSON.stringify(object));\r\n};\r\n","import Logger from '../logger/logger';\r\nimport { cloneObject } from '../utils/utils';\r\n\r\nexport const STORAGE_TYPE = {\r\n  local: 'local',\r\n  session: 'session',\r\n};\r\n\r\n// The local storage for user settings\r\nexport default class Storage\r\n{\r\n  /**\r\n   * contructor class to initialize storage\r\n   * @param {array}     storageVariables - Array of storage variable names\r\n   * @param {string}    storageType - STORAGE_TYPE: either 'local' (default) or 'session'\r\n   * @returns {void}\r\n   */\r\n  constructor(storageVariables, storageType = STORAGE_TYPE.local)\r\n  {\r\n    this.storageType = storageType;\r\n    this.storageVariables = storageVariables;\r\n  }\r\n\r\n  /**\r\n   * initialize\r\n   * @param {function}  onChangeListener - callback function when a storage variable has been changed\r\n   * @returns {void}\r\n   */\r\n  async init(onChangeListener = null)\r\n  {\r\n    this.onChangeListener = onChangeListener;\r\n\r\n    // Initialize store variables as member variables to null\r\n    if (!this.storageVariables || !Array.isArray(this.storageVariables))\r\n    {\r\n      Logger.error('Storage variables provided is not of type array.');\r\n      return false;\r\n    }\r\n\r\n    // Check Storage Type\r\n    if (!STORAGE_TYPE[this.storageType])\r\n    {\r\n      Logger.error(`Invalid Storage type provided, ${this.storageType}`);\r\n      return false;\r\n    }\r\n\r\n    // Initialize each storage variable as null in cache/memory\r\n    this.storageVariables.forEach((variableName) =>\r\n    {\r\n      this[variableName] = null;\r\n    });\r\n\r\n    // populate cache variables with storage values\r\n    await this.populateCacheValues();\r\n\r\n    // Initialize Storage Listeners\r\n    this.initListeners();\r\n    return true;\r\n  }\r\n\r\n  async populateCacheValues()\r\n  {\r\n    const promises = [];\r\n    // Query storage for values\r\n    this.storageVariables.forEach((variableName) =>\r\n    {\r\n      promises.push(StorageHelper.get(variableName, this.storageType).then((result) =>\r\n      {\r\n        const response = {};\r\n        response.variableName = variableName;\r\n        response.result = result;\r\n        return response;\r\n      }));\r\n    });\r\n\r\n    const results = await Promise.all(promises);\r\n    // Resolve promise and assign to cache/memory variable\r\n    results.forEach(({ variableName, result }) =>\r\n    {\r\n      if (typeof result !== 'boolean' && typeof result !== 'number')\r\n      {\r\n        result = result || null;\r\n      }\r\n      this[variableName] = result;\r\n    });\r\n  }\r\n\r\n  initListeners()\r\n  {\r\n    if (typeof this.onChangeListener !== 'function')\r\n    {\r\n      return;\r\n    }\r\n\r\n    if (!chrome.storage[this.storageType].onChanged.hasListener(this.onChangeListener))\r\n    {\r\n      chrome.storage.onChanged.addListener(this.onChangeListener);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get value(s) from the storage/cache\r\n   * @param  {string|object} db - can be either a string (db key) or an object { key : defaultValue }\r\n   *                         db   string  - store variable name\r\n   *                         db   {object}:\r\n   *                              db.key            - db name to set\r\n   *                              db.defaultValue   - default value to be returned\r\n   *                              Ex, object = { \"SOME_DB_VALUE_NAME\": true }\r\n   * @param  {any}  defaultValue - (optional) return default value given by the caller (if db value is null) - this only applies to 'string' input\r\n   * @returns {value} - value of what was saved on the db\r\n   */\r\n  get(db, defaultValue = null)\r\n  {\r\n    if (db === null || db === undefined)\r\n    {\r\n      Logger.warn(`Invalid db key when calling 'get' on storage, got: ${db}`);\r\n      return null;\r\n    }\r\n\r\n    if (typeof db === 'string')\r\n    {\r\n      return this.getInternal(db, defaultValue);\r\n    }\r\n\r\n    if (typeof db === 'object' && !Array.isArray(db))\r\n    {\r\n      const response = {};\r\n      for (const prop in db)\r\n      {\r\n        response[prop] = this.getInternal(prop, db[prop]);\r\n      }\r\n\r\n      return response;\r\n    }\r\n\r\n    Logger.warn(`Invalid db type when calling 'get', from key: ${db}`);\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get the value from the cache\r\n   * @param  {string} db - store variable name\r\n   * @param  {any}  defaultValue - return default value given by the caller (if db is null)\r\n   * @returns {value} - value of what was saved on the db\r\n   */\r\n  getInternal(db, defaultValue)\r\n  {\r\n    const cachedValue = cloneObject(this[db]);\r\n\r\n    // if a defaultValue is not provided, then return the cached value\r\n    if (arguments.length < 2) return cachedValue;\r\n\r\n    // If a default value is given, then perform a value check for undefined\r\n    // or null, if so then return defaultValue, otherwise, return the cached value\r\n    return (cachedValue === null || cachedValue === undefined) ? defaultValue : cachedValue;\r\n  }\r\n\r\n  /**\r\n   * Sets value(s) to local storage and cache\r\n   * @param  {string|object} db - can be either a string (db key) or an object { key : value }\r\n   *                         db   string  - storage variable name\r\n   *                         db   {object}:\r\n   *                              db.key     - db key to set\r\n   *                              db.value   - value to be set\r\n   *                              Ex, object = { \"SOME_DB_VALUE_NAME\": true }\r\n   * @param  {any}  value - the value of the key to be set (this value will be ignore if first input is an object)\r\n   */\r\n  set(db, value = null)\r\n  {\r\n    if (db === null || db === undefined)\r\n    {\r\n      this.warn(`Invalid db key when calling 'set' on storage, got: ${db}`);\r\n      return null;\r\n    }\r\n\r\n    if (typeof db === 'string')\r\n    {\r\n      this.setInternal(db, value);\r\n      return true;\r\n    }\r\n\r\n    if (typeof db === 'object' && !Array.isArray(db))\r\n    {\r\n      for (const prop in db)\r\n      {\r\n        this.setInternal(prop, db[prop]);\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    this.warn(`Invalid db type when calling 'set', from key: ${db}`);\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Sets the value to local storage and cache\r\n   * @param  {string} db - store variable name\r\n   * @param  {value}  value - value to be set\r\n   */\r\n  setInternal(db, value)\r\n  {\r\n    this[db] = cloneObject(value);\r\n    if (this.storageVariables.includes(db)) StorageHelper.set(db, this.storageType, value);\r\n  }\r\n\r\n  /**\r\n   * Removes the db from local storage and sets cache db to null\r\n   * @param  {string | string[]} db - store variable name\r\n   */\r\n  remove(db)\r\n  {\r\n    if (typeof db === 'string' && this[db] !== undefined)\r\n    {\r\n      this[db] = null;\r\n      StorageHelper.remove(db, this.storageType);\r\n    }\r\n\r\n    if (Array.isArray(db) && db.length > 0)\r\n    {\r\n      db.forEach((key) => { this[key] = null; });\r\n      StorageHelper.remove(db, this.storageType);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * clear all variables, and sets all varibles to null\r\n   * @param  {string} db - store variable name\r\n   */\r\n  clear()\r\n  {\r\n    this.storageVariables.forEach((variableNames) =>\r\n    {\r\n      this[variableNames] = null;\r\n    });\r\n\r\n    chrome.storage[this.storageType].clear();\r\n  }\r\n}\r\n\r\nclass StorageHelper\r\n{\r\n  /**\r\n   * Sets the value to local storage\r\n   * @param  {string} db - store variable name\r\n   * @param  {string} storageType - STORAGE_TYPE - either 'local' or 'session'\r\n   * @param  {value}  value - value to be set\r\n   */\r\n  static set(db, storageType, value)\r\n  {\r\n    chrome.storage[storageType].set({ [db]: value });\r\n  }\r\n\r\n  /**\r\n   * Gets the value for the db specified. Async call\r\n   * @param  {string} db - store variable name\r\n   * @param  {string} storageType - STORAGE_TYPE - either 'local' or 'session'\r\n   * @returns {promise} - returns a promise\r\n   */\r\n  static get(db, storageType)\r\n  {\r\n    const handleResponse = (resolve, result) =>\r\n    {\r\n      // Resolve all variables found in storage\r\n      if (db === null)\r\n      {\r\n        resolve(result);\r\n      }\r\n\r\n      // Resolve specific property provided by db string\r\n      let value = result[db];\r\n      if (typeof value !== 'boolean' && typeof value !== 'number')\r\n      {\r\n        value = value || null;\r\n      }\r\n\r\n      resolve(value);\r\n    };\r\n\r\n    return new Promise((resolve) => chrome.storage[storageType].get(db, (result) => handleResponse(resolve, result)));\r\n  }\r\n\r\n  /**\r\n   * Removes the db and associated values from local storage\r\n   * @param  {string | string[]} db - store variable name\r\n   */\r\n  static remove(db, storageType)\r\n  {\r\n    chrome.storage[storageType].remove(db);\r\n  }\r\n}\r\n","import Logger from '../logger/logger';\r\n/**\r\n * Wrapper class making the http request call (using the built-in Fetch api).\r\n * Handling normal and exception cases.\r\n */\r\nexport default class HttpService\r\n{\r\n  onHttpResponse(response)\r\n  {\r\n    if (!response.ok)\r\n    {\r\n      const message = `HttpService Status: ${response.status}\\nError Text: ${response.statusText}`;\r\n      Logger.warn(message);\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  async sendHttpRequest({ url, headers, body, method = 'GET' })\r\n  {\r\n    const fetchReponse = await fetch(url, { headers, method, body });\r\n    const response = await this.onHttpResponse(fetchReponse);\r\n    return response;\r\n  }\r\n}\r\n","export default class GTIResponse\r\n{\r\n  constructor()\r\n  {\r\n    this.annotationMap = {};\r\n  }\r\n}\r\n","// Background\r\nimport { GTIConstants } from './gti_contants';\r\nimport GTIResponse from './gti_response';\r\n\r\n/**\r\n * Parse the GTI http response data.\r\n */\r\nexport default class GTIResponseBuilder\r\n{\r\n  constructor(cacheStore)\r\n  {\r\n    this.response = new GTIResponse(); // The response serialization object.\r\n    this.gtiResponse = null; // The response array received from GTI Server.\r\n    this.requestData = null; // The request data from content page.\r\n    this.gtiCache = cacheStore;\r\n    this.cachedItems = [];\r\n  }\r\n\r\n  init(gtiResponse, requestdata)\r\n  {\r\n    this.gtiResponse = gtiResponse; // The response array received from GTI Server.\r\n    this.requestdata = requestdata; // The request data from content page.\r\n  }\r\n\r\n  addCachedItem(item)\r\n  {\r\n    this.cachedItems.push(item);\r\n  }\r\n\r\n  buildLinkInfo(url, linkInfo)\r\n  {\r\n    this.response.annotationMap[url] = linkInfo;\r\n  }\r\n\r\n  /**\r\n   * convert GTI response to new HTI response object\r\n  */\r\n  convertGTItoHTI(res, url)\r\n  {\r\n  // map GTI rep value to HTI trust value\r\n    if (res.rep < 15)\r\n    {\r\n      res.rep = 70; // Green\r\n    }\r\n    else if (res.rep < 30)\r\n    {\r\n      res.rep = 0; // Gray\r\n    }\r\n    else if (res.rep < 50)\r\n    {\r\n      res.rep = 40; // Yellow\r\n    }\r\n    else\r\n    {\r\n      res.rep = 1; // Red\r\n    }\r\n\r\n    const categories = [];\r\n\r\n    if (res.cat !== null && res.cat !== undefined)\r\n    {\r\n      res.cat.forEach((cat) =>\r\n      {\r\n        if (GTIConstants.categoryMapGtiToHti[cat])\r\n        {\r\n          categories.push(GTIConstants.categoryMapGtiToHti[cat]);\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      category: categories, // here cat is an number, convert to category\r\n      trust: res.rep,\r\n      ttl: 3600, // assign default ttl, since GTI response has no ttl property\r\n      url,\r\n      flag: res.ufg\r\n    };\r\n  }\r\n\r\n  prepareFromCacheResponse()\r\n  {\r\n    for (let index = 0; index < this.cachedItems.length; index++)\r\n    {\r\n      const cacheInfo = this.cachedItems[index];\r\n      this.buildLinkInfo(cacheInfo.uri, cacheInfo.value.value);\r\n    }\r\n  }\r\n\r\n  prepareFromGTIResponse()\r\n  {\r\n    if (this.gtiResponse.length === 0)\r\n    {\r\n      return;\r\n    }\r\n\r\n    const respObj = this.gtiResponse[0] === '' ? this.gtiResponse[1] : this.gtiResponse[0];\r\n\r\n    if (Object.keys(respObj).length === 0 && respObj.constructor === Object)\r\n    {\r\n      return; // something wrong\r\n    }\r\n\r\n    for (let respIndex = 0; respIndex < respObj.a.length; respIndex++)\r\n    {\r\n      let linkInfo = respObj.a[respIndex];\r\n\r\n      // Reputation specific safe mode flag is set, so skip the reputation for this particular item.\r\n      if (undefined !== linkInfo.aflag && linkInfo.aflag === GTIConstants.globalSafeModeFlag)\r\n      {\r\n        continue;\r\n      }\r\n\r\n      const url = this.requestdata[respIndex];\r\n\r\n      // convert GTI response to HTI compatible response Object\r\n      linkInfo = this.convertGTItoHTI(linkInfo, url);\r\n      linkInfo.url = url;\r\n\r\n      this.gtiCache.setReputation(url, linkInfo);\r\n      this.buildLinkInfo(url, linkInfo);\r\n    }\r\n  }\r\n\r\n  prepareResponse(fncallback)\r\n  {\r\n    this.prepareFromGTIResponse();\r\n    this.prepareFromCacheResponse();\r\n    fncallback(this.response);\r\n  }\r\n}\r\n","import { GTIConstants } from './gti_contants';\r\nimport { GTIGlobals } from './gti_globals';\r\n\r\nexport const GTI_UPO_FLAGS = {\r\n  None: 0x00000000,\r\n  SkipCustomKeywords: 0x00000001,\r\n  SkipCustomSites: 0x00000002,\r\n  SkipWebDatabaseNotKeywords: 0x00000004,\r\n  SkipWebDatabaseKeywords: 0x00000008,\r\n  SkipPatterns: 0x00000010,\r\n  SkipCGIPatterns: 0x00000020,\r\n  SkipEmbeddedURLs: 0x00000040,\r\n  SkipTrustedSourceQuery: 0x00000080,\r\n  All: 0x000007ff\r\n};\r\n\r\nexport function GtiClientInfo(clientIdGuid, rid)\r\n{\r\n  this.cliid = clientIdGuid;\r\n  this.prn = GTIConstants.prn;\r\n  this.sdkv = GTIConstants.sdkv;\r\n  this.pv = GTIGlobals.productVersion;\r\n  this.pev = GTIConstants.pev;\r\n  this.rid = rid; // Random number\r\n  this.affid = '0'; // Denotes the request is from McAfee Product\r\n  this.cid = GTIConstants.customerId; // Adding for the GTI implementation\r\n}\r\n\r\nexport function GtiQueryItems()\r\n{\r\n  this.op = null;\r\n  this.uop = GTI_UPO_FLAGS.SkipEmbeddedURLs;\r\n  this.url = null;\r\n  this.catset = 4;\r\n}\r\n\r\nexport function GtiBody(clientIdGuid, rid)\r\n{\r\n  this.ci = new GtiClientInfo(clientIdGuid, rid);\r\n  this.q = [];\r\n}\r\n","export const GTIStorageVariables = {\r\n  CACHE_GTI: 'CACHE_GTI'\r\n};\r\n","// The cache where reputation of URLs are stored. There is a maximum number of\r\n// reputations that can be stored. Each stored item has an associated time of\r\n// insertion into cache. When the URL is accessed from cache, it checks whether\r\n// reputation has expired. If expired the reputation for that URL is removed\r\n// from cache, else the entry from cache is returned.\r\n\r\n// Also keeps track of which GTI requests are in progress. This makes sure\r\n// browser action is updated and the safety measures - isFrameBlocked()\r\n// works if GTI response comes too early or too late.\r\n// Also caches the response from the Typosquatting server as well as the content\r\n// that should be rendered on the typosquatting block page.\r\nimport { GTIConstants } from './gti_contants';\r\nimport { GTIStorageVariables } from './gti_storage_variables';\r\n\r\n/**\r\n * TODO: Comments\r\n */\r\nexport default class GTICache\r\n{\r\n  constructor(cacheStore)\r\n  {\r\n    this.urlMap = new Map();\r\n    this.cacheStore = cacheStore;\r\n  }\r\n\r\n  clear()\r\n  {\r\n    this.urlMap = new Map();\r\n    this.cacheStore.set(GTIStorageVariables.CACHE_GTI, new Map());\r\n  }\r\n\r\n  // Check to clean cache every hour\r\n  setAlarmCacheClean()\r\n  {\r\n    // clear any pass created alarms\r\n    chrome.alarms.clear(GTIConstants.reputationAlarmName);\r\n\r\n    // create new alarm\r\n    chrome.alarms.create(GTIConstants.reputationAlarmName, { delayInMinutes: 60 });\r\n\r\n    // setup alarm listener\r\n    chrome.alarms.onAlarm.addListener((alarmInfo) =>\r\n    {\r\n      if (alarmInfo.name !== GTIConstants.reputationAlarmName)\r\n      {\r\n        return;\r\n      }\r\n\r\n      // Clean reputation cache when it is over half full\r\n      const cache = this.cacheStore.get(GTIStorageVariables.CACHE_GTI, new Map());\r\n\r\n      if (Object.keys(cache).length > GTIConstants.maxCacheRecords * 0.5)\r\n      {\r\n        this.cleanReputationCache(cache);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Look through the reputation cache and remove the expired entries\r\n  cleanReputationCache(cache)\r\n  {\r\n    for (const [key, value] of Object.entries(cache))\r\n    {\r\n      if (Date.now() > GTIConstants.reputationTTL + value.timeCached)\r\n      {\r\n        delete (cache[key]);\r\n      }\r\n    }\r\n    this.cacheStore.set(GTIStorageVariables.CACHE_GTI, cache);\r\n  }\r\n\r\n  checkRequest(requestdata)\r\n  {\r\n    const listOfPromises = [];\r\n    requestdata.forEach((value) =>\r\n    {\r\n      if (this.urlMap.has(value))\r\n      {\r\n        listOfPromises.push(this.urlMap.get(value));\r\n      }\r\n    });\r\n    return listOfPromises;\r\n  }\r\n\r\n  addRequest(requestdata, promise)\r\n  {\r\n    requestdata.forEach((value) =>\r\n    {\r\n      this.urlMap.set(value, promise);\r\n    });\r\n  }\r\n\r\n  deleteRequest(requestdata)\r\n  {\r\n    requestdata.forEach((value) =>\r\n    {\r\n      this.urlMap.delete(value);\r\n    });\r\n  }\r\n\r\n  setReputation(url, value)\r\n  {\r\n    const cache = this.cacheStore.get(GTIStorageVariables.CACHE_GTI, new Map());\r\n\r\n    if (Object.keys(cache).length > GTIConstants.maxCacheRecords)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const timeCached = Date.now();\r\n    cache[url] = { timeCached, value };\r\n    this.cacheStore.set(GTIStorageVariables.CACHE_GTI, cache);\r\n    return true;\r\n  }\r\n\r\n  // Get item from cache, and at that point if the timeout has expired then remove it from cache.\r\n  getReputation(url)\r\n  {\r\n    const cache = this.cacheStore.get(GTIStorageVariables.CACHE_GTI, new Map());\r\n    const cacheEntry = cache[url] ? cache[url] : null;\r\n    const cacheObj = { cache_entry: cacheEntry };\r\n    return cacheObj;\r\n  }\r\n}\r\n","import Logger from '../../Common-Utils-Package/logger/logger';\r\nimport Storage from '../../Common-Utils-Package/storage/storage';\r\nimport HttpService from '../../Common-Utils-Package/http_service/http_service';\r\nimport GTIResponseBuilder from './gti_response_builder';\r\nimport { GtiBody, GtiQueryItems } from './gti_body';\r\nimport GTICache from './gti_cache';\r\nimport { GTIStorageVariables } from './gti_storage_variables';\r\nimport { GTIGlobals } from './gti_globals';\r\nimport { GTIConstants } from './gti_contants';\r\n\r\nexport default class GTIRequestor\r\n{\r\n  /**\r\n   * GTI Requestor: constructor\r\n   * @param {object} wasm - wasm engine object\r\n   * @param {function} wasm.wasm_gti_hmac_sha1 - should contain function to hmac_sha1 for gti\r\n   * @param {object} options - object containinig optional params that alter the behavior of this lib\r\n   * @param {string} options.clientIdGuid - client id passed as part of the gti request body (default as: empty string)\r\n   * @param {string} options.serverUrl - url string to the gti server (default as: 'https://webadvisorc.rest.gti.mcafee.com/1')\r\n   * @param {string} options.cspid - cspid use for telemetry (default as: '__not_available__')\r\n   * @param {string} options.productVersion - product version for gti call (default as: '0.0.0.0')\r\n   */\r\n  constructor(wasm, options)\r\n  {\r\n    // required param\r\n    this.wasm = wasm;\r\n\r\n    // local variables\r\n    this.httpService = null;\r\n    this.storage = null;\r\n    this.gtiCache = null;\r\n\r\n    // optional params\r\n    GTIGlobals.cspid = options.cspid || GTIGlobals.cspid;\r\n    GTIGlobals.clientIdGuid = options.clientIdGuid || GTIGlobals.clientIdGuid;\r\n    GTIGlobals.serverUrl = options.serverUrl || GTIGlobals.serverUrl;\r\n    GTIGlobals.productVersion = options.productVersion || '0.0.0.0';\r\n  }\r\n\r\n  async init()\r\n  {\r\n    if (!this.wasm || typeof this.wasm.wasm_gti_hmac_sha1 !== 'function')\r\n    {\r\n      Logger.error('Invalid wasm object given on gti requestor.');\r\n      return false;\r\n    }\r\n\r\n    this.storage = new Storage(Object.keys(GTIStorageVariables));\r\n    const storageInitialized = await this.storage.init();\r\n    if (!storageInitialized)\r\n    {\r\n      Logger.error('Failed to initialized gti cache storage.');\r\n      return false;\r\n    }\r\n\r\n    this.gtiCache = new GTICache(this.storage);\r\n    this.gtiCache.setAlarmCacheClean();\r\n\r\n    this.httpService = new HttpService();\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * This function allows modifying the global variables\r\n   * ie: globalValues = { serverUrl: 'https://someurl.com', otherGlobal: 'somedata' }\r\n   * @param {object} globalValues\r\n   * @param {key} globalsValues.key\r\n   * @param {value} globalsValues.value\r\n   */\r\n  setGlobals(globalValues)\r\n  {\r\n    if (typeof globalValues !== 'object'\r\n    || Array.isArray(globalValues)\r\n    || globalValues === null)\r\n    {\r\n      Logger.error('Received invalid object (json) type when trying to call MTI setGlobals.');\r\n      return;\r\n    }\r\n\r\n    for (const [key, value] of Object.entries(globalValues))\r\n    {\r\n      Logger.log(`GTI Global values updated: ${key}: ${value}`);\r\n      GTIGlobals[key] = value;\r\n    }\r\n  }\r\n\r\n  getCache()\r\n  {\r\n    return this.gtiCache;\r\n  }\r\n\r\n  getTelemetryData(referrer)\r\n  {\r\n    // Telemetry\r\n    const telemetryData = {};\r\n    telemetryData.uag = btoa(navigator.userAgent);\r\n    telemetryData.cspid = GTIGlobals.cspid;\r\n\r\n    if (typeof referrer === 'string')\r\n    {\r\n      telemetryData.refurl = btoa(referrer);\r\n    }\r\n\r\n    return telemetryData;\r\n  }\r\n\r\n  prepareBody(requestData, builder, rID, referrer, checkCacheOnly = false)\r\n  {\r\n    const body = new GtiBody(GTIGlobals.clientIdGuid, rID);\r\n    let questIndex = 0; // This is actual number of questions for GTI request.\r\n\r\n    for (let startIndex = 0; startIndex < requestData.length; startIndex++)\r\n    {\r\n      const uri = requestData[startIndex];\r\n      const data = this.gtiCache.getReputation(uri);\r\n\r\n      if (data.cache_entry === null)\r\n      {\r\n        if (checkCacheOnly)\r\n        {\r\n          // if we are to do cache check only, no need to prepare\r\n          // for GTI request calls.\r\n          continue;\r\n        }\r\n\r\n        // There is no data for this uri in cache so add this to the question list.\r\n        body.q[questIndex] = new GtiQueryItems();\r\n        body.q[questIndex].op = 'url';\r\n        body.q[questIndex].url = uri;\r\n        body.q[questIndex].qmd = this.getTelemetryData(referrer);\r\n        questIndex++;\r\n      }\r\n      else\r\n      {\r\n        builder.addCachedItem({ uri, value: data.cache_entry });\r\n        // Remove cached item from requestdata.\r\n        requestData.splice(startIndex, 1);\r\n        startIndex--;\r\n      }\r\n    }\r\n\r\n    return { body };\r\n  }\r\n\r\n  request(headers, body)\r\n  {\r\n    return this.makeGTIRequest({\r\n      method: 'POST',\r\n      body: JSON.stringify(body),\r\n      url: GTIGlobals.serverUrl,\r\n      headers,\r\n    });\r\n  }\r\n\r\n  makeGTIRequest(request)\r\n  {\r\n    return this.httpService.sendHttpRequest(request).then((res) => res.json());\r\n  }\r\n\r\n  generateRequestId()\r\n  {\r\n    const min = 1000;\r\n    const max = 100000000;\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n\r\n  async generateHeaders(msgBody)\r\n  {\r\n    const result = await this.wasm.wasm_gti_hmac_sha1(JSON.stringify(msgBody));\r\n    const headersData = {};\r\n    headersData['Content-Type'] = GTIConstants.contentType;\r\n    headersData.xdate = new Date().toUTCString();\r\n    headersData.Authorization = `GTI ${GTIConstants.gtiId}:${result}`;\r\n    return headersData;\r\n  }\r\n\r\n  toResponse(gtiResponse, builder, requestData, fncallback)\r\n  {\r\n    builder.init(gtiResponse, requestData); // \"[]\" = empty gti response.\r\n    builder.prepareResponse(fncallback); // Concatenate the responses and then return to content.\r\n  }\r\n\r\n  /**\r\n   * Does post to GTI splitting the requests as per guidelines to 5 questions per request.\r\n   * @param {object} requestData      - Array of request URLs whose reputation is asked to GTI\r\n   * @param {function} fncallback     - Callback function invoked to respond to the query from content process\r\n   * @param {object} options          - optional params\r\n   * @param {string} options.referrer         - Value of referer header (or undefined)\r\n   * @param {boolean} options.checkCacheOnly  - Check Cache only for GTI, do not make HTTP GTI request\r\n   */\r\n  async post(requestData, fncallback, options)\r\n  {\r\n    const referrer = options.referrer || null;\r\n    const checkCacheOnly = options.checkCacheOnly || false;\r\n\r\n    const promises = this.gtiCache.checkRequest(requestData);\r\n    if (promises.length > 0)\r\n    {\r\n      await Promise.all(promises);\r\n    }\r\n\r\n    try\r\n    {\r\n      const builder = new GTIResponseBuilder(this.gtiCache);\r\n\r\n      const fullRequestData = requestData.slice();\r\n      const requestId = this.generateRequestId();\r\n\r\n      // requestData will only contain non-cached items after this\r\n      const reputation = this.prepareBody(requestData, builder, requestId, referrer, checkCacheOnly);\r\n      const gtiResponse = [];\r\n\r\n      // If there are records to ask with GTI then post. If the record is in cache then we do not ask.\r\n      if (reputation.body.q.length > 0)\r\n      {\r\n        try\r\n        {\r\n          const promise = new Promise(async (resolve) =>\r\n          {\r\n            const headers = await this.generateHeaders(reputation.body);\r\n            const response = await this.request(headers, reputation.body);\r\n            this.toResponse(response, builder, requestData, fncallback);\r\n            this.gtiCache.deleteRequest(requestData);\r\n            resolve();\r\n          });\r\n\r\n          this.gtiCache.addRequest(requestData, promise);\r\n        }\r\n        catch (error)\r\n        {\r\n          fncallback(null);\r\n          Logger.error(error);\r\n        }\r\n      }\r\n      // If there are no GTI requests needed, prepare the response right away. (i.e. Everything is cached already)\r\n      else\r\n      {\r\n        this.toResponse(gtiResponse, builder, fullRequestData, fncallback);\r\n      }\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(e.message);\r\n    }\r\n  }\r\n}\r\n","import Logger from '../Common-Utils-Package/logger/logger';\r\nimport GTIBackgroundListener from './gti/gti_background_listener';\r\nimport { GTIGlobals } from './gti/gti_globals';\r\nimport GTIRequestor from './gti/gti_requestor';\r\n\r\nexport default class BackgroundGTIRequestor\r\n{\r\n  /**\r\n   * GTI Requestor: constructor\r\n   * @param {object} wasm - wasm engine object\r\n   * @param {function} wasm.wasm_gti_hmac_sha1 - should contain function to hmac_sha1 for gti\r\n   * @param {object} options - object containinig optional params that alter the behavior of this lib\r\n   * @param {string} options.clientIdGuid - client id passed as part of the gti request body (default as: empty string)\r\n   * @param {string} options.serverUrl - url string to the gti server (default as: 'https://webadvisorc.rest.gti.mcafee.com/1')\r\n   * @param {string} options.cspid - cspid use for telemetry (default as: '__not_available__')\r\n   * @param {string} options.productVersion - product version for gti call (default as: '0.0.0.0')\r\n   */\r\n  constructor(wasm, options)\r\n  {\r\n    this.promisesToComplete = null;\r\n\r\n    GTIGlobals.gtiRequestor = new GTIRequestor(wasm, options);\r\n  }\r\n\r\n  /**\r\n   * TODO: can be removed when we fully transition to HTI from GTI\r\n   * This function returns the API type\r\n   * @param {string} returns 'GTI'\r\n   */\r\n  getType()\r\n  {\r\n    return 'GTI';\r\n  }\r\n\r\n  async init()\r\n  {\r\n    this.promisesToComplete = new Promise(async (resolve) =>\r\n    {\r\n      const gtiRequestInit = await GTIGlobals.gtiRequestor.init();\r\n      if (!gtiRequestInit)\r\n      {\r\n        Logger.error('Failed to initialize GTI Requestor.');\r\n      }\r\n\r\n      resolve();\r\n    });\r\n\r\n    const gtiListener = new GTIBackgroundListener(this.promisesToComplete);\r\n    gtiListener.init();\r\n\r\n    await this.promisesToComplete;\r\n  }\r\n\r\n  /**\r\n   * This function allows modifying the global variables\r\n   * ie: globalValues = { serverUrl: 'https://someurl.com', otherGlobal: 'somedata' }\r\n   * @param {object} globalValues\r\n   * @param {key} globalsValues.key\r\n   * @param {value} globalsValues.value\r\n   */\r\n  setGlobals(globalValues)\r\n  {\r\n    GTIGlobals.gtiRequestor.setGlobals(globalValues);\r\n  }\r\n\r\n  /**\r\n   * Does post to GTI splitting the requests as per guidelines to 5 questions per request.\r\n   * @param {object} requestData      - Array of request URLs whose reputation is asked to GTI\r\n   * @param {string} referrer         - Value of referer header (or undefined)\r\n   * @param {boolean} checkCacheOnly  - Check Cache only for GTI, do not make HTTP GTI request\r\n   */\r\n  async post(requestData, referrer = null, checkCacheOnly = false)\r\n  {\r\n    await this.promisesToComplete;\r\n\r\n    if (!GTIGlobals || !GTIGlobals.gtiRequestor)\r\n    {\r\n      Logger.error('Error to post GTI request has GTIRequestor has not yet been initialized');\r\n      return null;\r\n    }\r\n\r\n    const options = { referrer, checkCacheOnly };\r\n    const promise = new Promise((resolve) => GTIGlobals.gtiRequestor.post(requestData, resolve, options));\r\n\r\n    const result = await promise;\r\n    return result;\r\n  }\r\n\r\n  async clearCache()\r\n  {\r\n    GTIGlobals.gtiRequestor.getCache().clear();\r\n  }\r\n\r\n  setReputation(url, value)\r\n  {\r\n    GTIGlobals.gtiRequestor.getCache().setReputation(url, value);\r\n  }\r\n\r\n  getReputation(url)\r\n  {\r\n    return GTIGlobals.gtiRequestor.getCache().getReputation(url);\r\n  }\r\n}\r\n","export const HTICommands = {\r\n  HTI_REQUEST: 'HTI_REQUEST'\r\n};\r\n","export const HTIConstants = {\r\n  reputationTTL: 1000 * 60 * 60,\r\n  contentType: 'application/json; charset=utf-8',\r\n  clientIdGuid: '87d8d1082c2f2f821f438b2359b7a5b4',\r\n  productId: '200200',\r\n  cacheControl: 'no-cache',\r\n  maxCacheRecords: 1000,\r\n  reputationAlarmName: 'REPUTATION_CLEAN_ALARM', // same name, used by GTI and HTI\r\n\r\n  // global modifiable values\r\n  cspClientId: 'e87c73de-b45e-4427-b590-5124401795b6',\r\n  htiServer: 'https://threat.api.mcafee.com/',\r\n  cspTokenUrl: 'https://csptoken.ccs.mcafee.com/auth/token',\r\n  urlReputation: 'network/v1/query/url/',\r\n  urlEverGreen: 'network/v1/cache/url-evergreen',\r\n};\r\n","import { HTIConstants } from './hti_contants';\r\n\r\nexport const HTIGlobals = {\r\n  // objects\r\n  htiRequestor: null,\r\n  wasm: null,\r\n  scheduleManager: null,\r\n\r\n  // variables\r\n  productVersion: null,\r\n  clientIdGuid: HTIConstants.clientIdGuid,\r\n  cspClientId: HTIConstants.cspClientId,\r\n  serverUrl: HTIConstants.htiServer,\r\n  cspTokenUrl: HTIConstants.cspTokenUrl,\r\n  urlReputation: HTIConstants.urlReputation,\r\n  urlEverGreen: HTIConstants.urlEverGreen,\r\n};\r\n","import Logger from '../../Common-Utils-Package/logger/logger';\r\nimport { HTICommands } from './hti_commands';\r\nimport { HTIGlobals } from './hti_globals';\r\n\r\nexport default class HTIBackgroundListener\r\n{\r\n  constructor(promisesToComplete)\r\n  {\r\n    this.promisesToComplete = promisesToComplete || null;\r\n  }\r\n\r\n  init()\r\n  {\r\n    chrome.runtime.onMessage.addListener((request, sender, response) =>\r\n    {\r\n      try\r\n      {\r\n        const sendResponse = (details = null) =>\r\n        {\r\n          response(details);\r\n        };\r\n\r\n        this.executeCommand(request, sender, sendResponse);\r\n      }\r\n      catch (error)\r\n      {\r\n        Logger.error(`HTIBackgroundListener addListener err, ${error.message}`);\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  async executeCommand(request, sender, sendResponse)\r\n  {\r\n    // Making sure all the promises that needs to be initialized is complete\r\n    if (this.promisesToComplete)\r\n    {\r\n      await this.promisesToComplete;\r\n    }\r\n\r\n    this[request.command] && this[request.command]({ request, sender, sendResponse });\r\n  }\r\n\r\n  async [HTICommands.HTI_REQUEST]({ request, sendResponse })\r\n  {\r\n    const { requestData, referrer, checkCacheOnly } = request;\r\n\r\n    const options = { referrer, checkCacheOnly };\r\n    const promise = new Promise((resolve) => HTIGlobals.htiRequestor.post(requestData, resolve, options));\r\n\r\n    const response = await promise;\r\n    sendResponse(response);\r\n  }\r\n}\r\n","import Logger from '../logger/logger';\r\n\r\nexport default class ScheduleManager\r\n{\r\n  constructor(storage, schedulers)\r\n  {\r\n    this.storage = storage;\r\n    this.schedulers = schedulers;\r\n    this.alarmListener = this.getAlarmListener();\r\n    this.setTTL = this.setTTL.bind(this);\r\n  }\r\n\r\n  getAlarmListener()\r\n  {\r\n    const alarmListener = (alarm) =>\r\n    {\r\n      for (const [taskName, task] of Object.entries(this.schedulers))\r\n      {\r\n        if (alarm.name === taskName)\r\n        {\r\n          Logger.log(`Running task ${taskName}`);\r\n          try\r\n          {\r\n            task.task.run(); // Run the current task and schedule next task.\r\n          }\r\n          catch (e)\r\n          {\r\n            Logger.error(e.message);\r\n          }\r\n          this.setLastRunTime(taskName);\r\n          this.scheduleTask();\r\n        }\r\n      }\r\n    };\r\n\r\n    return alarmListener;\r\n  }\r\n\r\n  setTTL(taskName, ttl)\r\n  {\r\n    this.storage.set(`${taskName}_ttl`, { expiry: ttl });\r\n    this.reinit();\r\n  }\r\n\r\n  getTTL(taskName)\r\n  {\r\n    const expiry = this.storage.get(`${taskName}_ttl`, { expiry: 0 });\r\n    if (expiry !== null)\r\n    {\r\n      return expiry.expiry;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  getLastRunTime(taskName)\r\n  {\r\n    // Get from local storage the last run time of this task.\r\n    const lastRun = this.storage.get(taskName, { lr: -1 });\r\n    return lastRun.lr;\r\n  }\r\n\r\n  setLastRunTime(taskName)\r\n  {\r\n    // Set the last time that this task ran\r\n    this.storage.set(taskName, { lr: Date.now() });\r\n  }\r\n\r\n  scheduleTask()\r\n  {\r\n    let taskToScheduleName = null;\r\n    let lowestNextRun = -1;\r\n    for (const [taskName, task] of Object.entries(this.schedulers))\r\n    {\r\n      if (task.enabled === false)\r\n      {\r\n        continue;\r\n      }\r\n\r\n      const lastRunTime = this.getLastRunTime(taskName);\r\n\r\n      let nextRunTime = 0;\r\n\r\n      const freq = this.getTTL(taskName) || task.frequency;\r\n      // If the task was never run\r\n      if (lastRunTime === -1)\r\n      {\r\n        // If the task should be run after the interval even for the first time then.\r\n        if (!task.runImmediatelyInitially)\r\n        {\r\n          nextRunTime = Date.now() + freq;\r\n          // Sets last run time as today and now initially so that we donot push the run each time\r\n          // if the interval was never hit.\r\n          this.setLastRunTime(taskName);\r\n        }\r\n      }\r\n      else\r\n      {\r\n        nextRunTime = lastRunTime + freq;// Last time task was run plus frequency tells new run time.\r\n      }\r\n\r\n      if (nextRunTime <= Date.now()) // If next run time is already due then run it immediately so break out of loop\r\n      {\r\n        taskToScheduleName = taskName;\r\n        lowestNextRun = 0; // indicate to run immediately\r\n        break;\r\n      }\r\n      else\r\n      {\r\n        const taskNextFreq = nextRunTime - Date.now();\r\n        // If lowestNextRun was never calculated OR if previous lowestRun calculated is higher than current one\r\n        if (lowestNextRun === -1 || lowestNextRun > taskNextFreq)\r\n        {\r\n          taskToScheduleName = taskName;\r\n          lowestNextRun = taskNextFreq;\r\n        }\r\n      }\r\n    }\r\n\r\n    // run immediately for due task\r\n    if (lowestNextRun === 0)\r\n    {\r\n      Logger.log(`Next task to run is ${taskToScheduleName} at 0 minute(s)`);\r\n      Logger.log(`Running task ${taskToScheduleName}`);\r\n      this.schedulers[taskToScheduleName].task.run();\r\n      this.setLastRunTime(taskToScheduleName);\r\n      this.scheduleTask();\r\n\r\n      return;\r\n    }\r\n\r\n    // default set to Chrome minimum alarm interval 1 minute\r\n    let alarmInterval = 1;\r\n\r\n    // if the actual next run is more than 1 minute then convert it into minutes,\r\n    // otherwise use default 1 minute interval\r\n    if (lowestNextRun > 1000 * 60)\r\n    {\r\n      alarmInterval = parseInt(lowestNextRun / 1000 / 60, 10);\r\n    }\r\n    Logger.log(`Next task to run is ${taskToScheduleName} at ${alarmInterval} minute(s)`);\r\n    chrome.alarms.create(taskToScheduleName, { delayInMinutes: alarmInterval });\r\n  }\r\n\r\n  initListeners()\r\n  {\r\n    // avoid adding multiple listener and fired multiple times\r\n    if (!chrome.alarms.onAlarm.hasListener(this.alarmListener))\r\n    {\r\n      chrome.alarms.onAlarm.addListener(this.alarmListener);\r\n    }\r\n  }\r\n\r\n  clearAlarms()\r\n  {\r\n    for (const [taskName, task] of Object.entries(this.schedulers))\r\n    {\r\n      if (task.enabled === false)\r\n      {\r\n        continue;\r\n      }\r\n      chrome.alarms.clear(taskName);\r\n    }\r\n  }\r\n\r\n  clearListeners()\r\n  {\r\n    if (chrome.alarms.onAlarm.hasListener(this.alarmListener))\r\n    {\r\n      chrome.alarms.onAlarm.removeListener(this.alarmListener);\r\n    }\r\n  }\r\n\r\n  stop()\r\n  {\r\n    this.clearAlarms();\r\n    this.clearListeners();\r\n  }\r\n\r\n  reinit()\r\n  {\r\n    this.init();\r\n  }\r\n\r\n  async init()\r\n  {\r\n    this.clearAlarms();\r\n    const promises = [];\r\n\r\n    for (const [taskName, task] of Object.entries(this.schedulers))\r\n    {\r\n      try\r\n      {\r\n        promises.push(task.task.init(taskName, this.setTTL));\r\n      }\r\n      catch (e)\r\n      {\r\n        Logger.error(e.message);\r\n      }\r\n    }\r\n\r\n    // wati for all task to be initialized before running the listener and schedule task\r\n    await Promise.all(promises);\r\n\r\n    this.initListeners();\r\n    this.scheduleTask();\r\n  }\r\n\r\n  getTask(taskName)\r\n  {\r\n    const taskKey = Object.keys(this.schedulers).find((taskKey) => taskKey === taskName);\r\n    return this.schedulers[taskKey] || null;\r\n  }\r\n}\r\n","export default class HTIResponse\r\n{\r\n  constructor()\r\n  {\r\n    this.annotationMap = {};\r\n  }\r\n}\r\n","// Background\r\nimport HTIResponse from './hti_response';\r\n\r\n/**\r\n * Parse the HTI http response data.\r\n */\r\nexport default class HTIResponseBuilder\r\n{\r\n  constructor(reputationCache)\r\n  {\r\n    this.response = new HTIResponse(); // The response serialization object.\r\n    this.htiResponse = null; // The response array received from HTI Server.\r\n    this.requestData = null; // The request data from content page.\r\n    this.htiCache = reputationCache;\r\n    this.cachedItems = [];\r\n  }\r\n\r\n  init(htiResponse, requestdata)\r\n  {\r\n    this.htiResponse = htiResponse; // The response array received from HTI Server.\r\n    this.requestdata = requestdata; // The request data from content page.\r\n  }\r\n\r\n  addCachedItem(item)\r\n  {\r\n    this.cachedItems.push(item);\r\n  }\r\n\r\n  buildLinkInfo(url, linkInfo)\r\n  {\r\n    this.response.annotationMap[url] = linkInfo;\r\n  }\r\n\r\n  prepareFromCacheResponse()\r\n  {\r\n    for (let index = 0; index < this.cachedItems.length; index++)\r\n    {\r\n      const cacheInfo = this.cachedItems[index];\r\n      const { url, value } = cacheInfo;\r\n      this.buildLinkInfo(url, value);\r\n    }\r\n  }\r\n\r\n  prepareFromHTIResponse()\r\n  {\r\n    if (this.htiResponse.length === 0)\r\n    {\r\n      return;\r\n    }\r\n\r\n    // Array containing hti response of each url\r\n    this.htiResponse.forEach((respObj) =>\r\n    {\r\n      const { url } = respObj;\r\n      this.htiCache.setReputation(url, respObj);\r\n      this.buildLinkInfo(url, respObj);\r\n    });\r\n  }\r\n\r\n  prepareResponse(fncallback)\r\n  {\r\n    this.prepareFromHTIResponse();\r\n    this.prepareFromCacheResponse();\r\n    fncallback(this.response);\r\n  }\r\n}\r\n","export const HTIStorageVariables = {\r\n  CACHE_HTI: 'CACHE_HTI',\r\n  CSP_TOKEN_HTI: 'CSP_TOKEN_HTI',\r\n  EVER_GREEN_URLS: 'EVER_GREEN_URLS',\r\n\r\n  // Scheduler Refresh Cache ID\r\n  CSP_TOKEN_HTI_REFRESH: 'CSP_TOKEN_HTI_REFRESH',\r\n  EVER_GREEN_URL_REFRESH: 'EVER_GREEN_URL_REFRESH',\r\n};\r\n","import { HTIStorageVariables } from './hti_storage_variables';\r\nimport Logger from '../../Common-Utils-Package/logger/logger';\r\nimport { HTIConstants } from './hti_contants';\r\n\r\n/**\r\n * This class encompass the logic for handling HTI cache on the client\r\n * For further clarification on this please review this wiki:\r\n * https://confluence.int.mcafee.com/display/MTI/URL+Client+Side+Caching\r\n */\r\nexport default class HTICacheLogic\r\n{\r\n  constructor(cacheStore)\r\n  {\r\n    this.cacheStore = cacheStore;\r\n  }\r\n\r\n  get(url)\r\n  {\r\n    const cacheEntries = this.cacheStore.get(HTIStorageVariables.CACHE_HTI, null);\r\n    const everGreenUrls = this.cacheStore.get(HTIStorageVariables.EVER_GREEN_URLS, null);\r\n\r\n    // cache storage are empty, return null cache entry\r\n    if (!cacheEntries && !everGreenUrls)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const cachedUrlData = this.processUrl(url);\r\n\r\n    // not found in storage\r\n    if (!cachedUrlData)\r\n    {\r\n      Logger.debug(`HTI url not found in cache: ${url}`);\r\n      return null;\r\n    }\r\n\r\n    // found in storage, check for expiry\r\n    const expired = this.isExpired(cachedUrlData);\r\n    if (expired)\r\n    {\r\n      Logger.debug(`HTI cached url expired: ${url}`);\r\n      return null;\r\n    }\r\n\r\n    Logger.debug(`HTI url FOUND in cache: ${url}`);\r\n    return cachedUrlData;\r\n  }\r\n\r\n  set(url, value)\r\n  {\r\n    const repCache = this.cacheStore.get(HTIStorageVariables.CACHE_HTI, []);\r\n    if (!url && (repCache.length > HTIConstants.maxCacheRecords))\r\n    {\r\n      return;\r\n    }\r\n\r\n    // url details\r\n    const urlObject = new URL(url);\r\n\r\n    const hasChildPath = value.flags === 2 || value.flags === 3;\r\n\r\n    // default FQDN url to cache\r\n    let urlToCache = this.trimwww(urlObject.hostname);\r\n    if (hasChildPath)\r\n    {\r\n      // if path has child will include the paths\r\n      urlToCache += urlObject.pathname;\r\n    }\r\n\r\n    // Create new array of cached URL that doesn't contain the object matching the 'url'\r\n    // Basically filtering out the object so that we can add it back with the latest values\r\n    const filteredCache = repCache.filter((cacheObject) => cacheObject.url !== urlToCache);\r\n\r\n    // Add the new url data\r\n    filteredCache.push({\r\n      ...value,\r\n      timeCached: Date.now(),\r\n      url: urlToCache\r\n    });\r\n\r\n    // update cache store with reputation\r\n    this.cacheStore.set(HTIStorageVariables.CACHE_HTI, filteredCache);\r\n  }\r\n\r\n  // Cache object made of : { timeCached, value: { ttl, ... }}\r\n  // Check whether a cached object has expired\r\n  isExpired(cacheObj)\r\n  {\r\n    const { timeCached, ttl } = cacheObj;\r\n    const currentTime = Date.now();\r\n    const timeElapsedInSeconds = (currentTime - timeCached) / 1000;\r\n\r\n    if (timeElapsedInSeconds > ttl)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  trimwww(url)\r\n  {\r\n    if (url.startsWith('www.'))\r\n    {\r\n      url = url.substring(4);\r\n    }\r\n    return url;\r\n  }\r\n\r\n  processUrl(url)\r\n  {\r\n    // The first time we process the url we will do so with hostname and pathname (full url)\r\n    // exclude url params/arguments\r\n    const urlObject = new URL(url);\r\n\r\n    const hostname = this.trimwww(urlObject.hostname);\r\n    const cached = this.find(hostname + urlObject.pathname);\r\n\r\n    // if found, then return\r\n    if (cached)\r\n    {\r\n      return cached;\r\n    }\r\n\r\n    // if not found, then we continue but process only with FQDN (Check cache for FQDN)\r\n    // FQDN: Fully Qualified Domain Name (without the path)\r\n    return this.checkCacheForFQDN(hostname);\r\n  }\r\n\r\n  checkCacheForFQDN(fqdn)\r\n  {\r\n    const cached = this.find(fqdn);\r\n\r\n    // if found, then return\r\n    if (cached)\r\n    {\r\n      return cached;\r\n    }\r\n\r\n    const fqdnSplit = fqdn.split('.');\r\n    if (fqdnSplit.length <= 2 || fqdnSplit[0] === '')\r\n    {\r\n      // shortest fqdn is with one dot (ie, example.com)\r\n      // also there shouldn't be a domain like so: '.com', if so return null\r\n      return null;\r\n    }\r\n\r\n    // subDomainLevelsToAdd set to 2 because this is the beginning of the index that we want to start appending subdomains\r\n    // ie, this.is.an.example.com - 2 will take example.com\r\n    const subDomainLevelsToAdd = 2;\r\n    return this.checkCacheForRootDomain(fqdn, subDomainLevelsToAdd);\r\n  }\r\n\r\n  checkCacheForRootDomain(fqdn, level)\r\n  {\r\n    const domainToCheck = this.getIncrementalSubdomain(fqdn, level);\r\n    if (domainToCheck === fqdn)\r\n    {\r\n      // return null. There is nothing to check\r\n      // since the added subdomain is just the original fqdn\r\n      // which was verify before on checkCacheForFQDN function\r\n      return null;\r\n    }\r\n\r\n    const cached = this.find(domainToCheck);\r\n    if (cached)\r\n    {\r\n      // if found, only return if it does not have a subdomain flag\r\n      if (cached.flags !== 1 && cached.flags !== 3)\r\n      {\r\n        return cached;\r\n      }\r\n\r\n      // otherwise, we should continue to add the subdomain\r\n    }\r\n\r\n    return this.checkCacheForRootDomain(fqdn, level + 1);\r\n  }\r\n\r\n  /**\r\n   * This helper functions creates a new domain url with subdomains based on the provided level\r\n   * ie, fqdn: 'this.is.an.example.com' and level: 3\r\n   * will return 'an.example.com'\r\n   * @param {string} fqdn - full fqdn to be used for creating a domain\r\n   * @param {integer} level - the subdomain levels to be added\r\n   * @returns {string} - generated subdomains based on level\r\n   */\r\n  getIncrementalSubdomain(fqdn, level)\r\n  {\r\n    const reverseFqdn = fqdn.split('.').reverse();\r\n\r\n    const maxLevel = reverseFqdn.length;\r\n    if (maxLevel === level)\r\n    {\r\n      // No need to add subdomain as the level\r\n      // provided matches the fqdn itself\r\n      return fqdn;\r\n    }\r\n\r\n    const reverseFqdnResult = [];\r\n    for (let i = 0; i < level; i++)\r\n    {\r\n      reverseFqdnResult.push(reverseFqdn[i]);\r\n    }\r\n\r\n    return reverseFqdnResult.reverse().join('.');\r\n  }\r\n\r\n  /**\r\n   * Find and returns the cached data of the provided url from the EveryGreen and HTI Cache storage\r\n   * @param {string} url - url to be look in the cached database\r\n   * @returns {object|undefined} return object of the cached data url or undefined if not found\r\n   */\r\n  find(url)\r\n  {\r\n    // check if url is in the ever green cache\r\n    const eguObject = this.cacheStore.get(HTIStorageVariables.EVER_GREEN_URLS, {});\r\n    const { cacheTTL, timeCached, content } = eguObject;\r\n    if (cacheTTL && timeCached && content)\r\n    {\r\n      const eguCachedEntry = content.find((urlRep) => urlRep.url === url);\r\n      if (eguCachedEntry)\r\n      {\r\n        // converting evergreen url data to look the same as HTI cache data\r\n        return {\r\n          ...eguCachedEntry,\r\n          timeCached,\r\n          ttl: cacheTTL,\r\n          url,\r\n        };\r\n      }\r\n    }\r\n\r\n    // check if url is in the cache\r\n    const cacheEntries = this.cacheStore.get(HTIStorageVariables.CACHE_HTI, []);\r\n    const cachedUrl = cacheEntries.find((urlRep) => urlRep.url === url);\r\n    return cachedUrl;\r\n  }\r\n}\r\n","import HTICacheLogic from './hti_cache_logic';\r\nimport { HTIConstants } from './hti_contants';\r\nimport { HTIStorageVariables } from './hti_storage_variables';\r\n\r\n/**\r\n * TODO: Comments\r\n */\r\nexport default class HTICache\r\n{\r\n  constructor(cacheStore)\r\n  {\r\n    this.urlQueryMap = new Map();\r\n    this.cacheStore = cacheStore;\r\n    this.cacheLogic = new HTICacheLogic(this.cacheStore);\r\n  }\r\n\r\n  clear()\r\n  {\r\n    this.urlQueryMap = new Map();\r\n    this.cacheStore.set(HTIStorageVariables.CACHE_HTI, null);\r\n  }\r\n\r\n  setAlarmCacheClean()\r\n  {\r\n    // clear any pass created alarms\r\n    chrome.alarms.clear(HTIConstants.reputationAlarmName);\r\n\r\n    // create new alarm\r\n    chrome.alarms.create(HTIConstants.reputationAlarmName, { delayInMinutes: 60 });\r\n\r\n    // setup alarm listener\r\n    chrome.alarms.onAlarm.addListener((alarmInfo) =>\r\n    {\r\n      if (alarmInfo.name !== HTIConstants.reputationAlarmName)\r\n      {\r\n        return;\r\n      }\r\n\r\n      // Clean reputation cache when it is over half full\r\n      const cache = this.cacheStore.get(HTIStorageVariables.CACHE_HTI, []);\r\n      if (Object.keys(cache).length > HTIConstants.maxCacheRecords * 0.5)\r\n      {\r\n        this.cleanReputationCache();\r\n      }\r\n    });\r\n  }\r\n\r\n  // Look through the reputation cache and remove the expired entries\r\n  cleanReputationCache()\r\n  {\r\n    const repCache = this.cacheStore.get(HTIStorageVariables.CACHE_HTI, []);\r\n\r\n    const currentTime = Date.now();\r\n\r\n    const filteredCache = repCache.filter((cacheObject) =>\r\n    {\r\n      const { ttl, timeCached } = cacheObject;\r\n      const timeElapsed = (currentTime - timeCached) / 1000;\r\n\r\n      // return the objects which has not expired;\r\n      return timeElapsed < ttl;\r\n    });\r\n\r\n    this.cacheStore.set(HTIStorageVariables.CACHE_HTI, filteredCache);\r\n  }\r\n\r\n  setReputation(url, value)\r\n  {\r\n    this.cacheLogic.set(url, value);\r\n  }\r\n\r\n  // Get item from cache\r\n  getReputation(url)\r\n  {\r\n    return this.cacheLogic.get(url);\r\n  }\r\n\r\n  checkRequest(requestdata)\r\n  {\r\n    const listOfPromises = [];\r\n    requestdata.forEach((url) =>\r\n    {\r\n      if (this.urlQueryMap.has(url))\r\n      {\r\n        listOfPromises.push(this.urlQueryMap.get(url));\r\n      }\r\n    });\r\n    return listOfPromises;\r\n  }\r\n\r\n  addRequest(requestdata, promise)\r\n  {\r\n    requestdata.forEach((url) =>\r\n    {\r\n      this.urlQueryMap.set(url, promise);\r\n    });\r\n  }\r\n\r\n  deleteRequest(requestdata)\r\n  {\r\n    requestdata.forEach((url) =>\r\n    {\r\n      this.urlQueryMap.delete(url);\r\n    });\r\n  }\r\n}\r\n","import { HTIConstants } from './hti_contants';\r\nimport { HTIGlobals } from './hti_globals';\r\nimport { HTIStorageVariables } from './hti_storage_variables';\r\nimport Logger from '../../Common-Utils-Package/logger/logger';\r\n\r\nexport function generateHeaders()\r\n{\r\n  const headersData = {\r\n    'X-McAfee-ClientID': HTIGlobals.clientIdGuid,\r\n    'X-McAfee-ProductID': HTIConstants.productId,\r\n    'X-McAfee-ProductVersion': HTIGlobals.productVersion,\r\n    'Content-Type': HTIConstants.contentType,\r\n    'cache-control': HTIConstants.cacheControl,\r\n    'X-McAfee-Flag': 1\r\n  };\r\n\r\n  const cspToken = HTIGlobals.storage.get(HTIStorageVariables.CSP_TOKEN_HTI, {});\r\n  const accessToken = cspToken.access_token || '';\r\n  if (!accessToken)\r\n  {\r\n    Logger.error('Failed to retrieve cspToken from storage.');\r\n  }\r\n\r\n  headersData.Authorization = `Bearer ${accessToken}`;\r\n  return headersData;\r\n}\r\n","export default class ScheduledTaskBase\r\n{\r\n  run()\r\n  {\r\n  }\r\n}\r\n","import { HTIStorageVariables } from '../hti_storage_variables';\r\nimport CSPTokenRefresh from './csp_token_refresh';\r\nimport EverGreenUrlsRefresh from './ever_green_urls_refresh';\r\n\r\nexport const schedulers = {\r\n  [HTIStorageVariables.CSP_TOKEN_HTI_REFRESH]: { frequency: 1000 * 60 * 60 * 24, runImmediatelyInitially: true, enabled: true, task: new CSPTokenRefresh() },\r\n  [HTIStorageVariables.EVER_GREEN_URL_REFRESH]: { frequency: 1000 * 60 * 60 * 24, runImmediatelyInitially: true, enabled: false, task: new EverGreenUrlsRefresh() }, // This will get enabled by CSPTokenRefresh\r\n};\r\n","import Logger from '../../../Common-Utils-Package/logger/logger';\r\nimport ScheduledTaskBase from '../../../Common-Utils-Package/scheduler/scheduled_task_base';\r\nimport { HTIGlobals } from '../hti_globals';\r\nimport { HTIStorageVariables } from '../hti_storage_variables';\r\n\r\nexport default class CSPTokenRefresh extends ScheduledTaskBase\r\n{\r\n  async init(name, fsetTTL)\r\n  {\r\n    this.retryIntervals = [30, 30, 1 * 60, 3 * 60, 5 * 60, 15 * 60, 30 * 60]; // Retry after 30 seconds twice and then after 1 minute, 3 minute etc. AFter 30 minute then go to usual schedule frequency.\r\n    this.retryIndex = 0;\r\n    this.name = name;\r\n    this.fsetTTL = fsetTTL;\r\n    this.keys = await this.getCSPKeys();\r\n    this.appKey = this.keys.appKey;\r\n    this.sharedKey = this.keys.sharedKey;\r\n    this.body = JSON.stringify({ grant_type: 'client_credentials', client_id: HTIGlobals.cspClientId, claims: { csp_client_id: HTIGlobals.cspClientId } });\r\n  }\r\n\r\n  // fetch new csp token\r\n  run()\r\n  {\r\n    return this.fetchToken();\r\n  }\r\n\r\n  async getCSPKeys()\r\n  {\r\n    const keys = {\r\n      appKey: await HTIGlobals.wasm.get_wa_app_key('WA', 'APP_KEY'),\r\n      sharedKey: await HTIGlobals.wasm.get_wa_shared_key('WA', 'SHARED_KEY')\r\n    };\r\n\r\n    return keys;\r\n  }\r\n\r\n  getNextRetryInterval()\r\n  {\r\n    if (this.retryIndex >= this.retryIntervals.length - 1)\r\n    {\r\n      // revert to default interval\r\n      return 24 * 60 * 60; // i.e. 1 day 24 hours in seconds\r\n    }\r\n    ++this.retryIndex;\r\n    return this.retryIntervals[this.retryIndex];\r\n  }\r\n\r\n  async fetchToken()\r\n  {\r\n    /* eslint-disable */\r\n    const body = this.body;\r\n    /* eslint-disable */\r\n\r\n    const reqParams = {\r\n      HttpMethod: 'POST',\r\n      Body: body,\r\n      ClientId: HTIGlobals.cspClientId,\r\n      WA: true\r\n    };\r\n\r\n    const authContext = await HTIGlobals.wasm.generate_value_for_ac(JSON.stringify(reqParams));\r\n\r\n    try\r\n    {\r\n      const initBody = {\r\n        method: 'POST',\r\n        headers: {\r\n          ac: authContext,\r\n          ak: this.appKey,\r\n          cd: HTIGlobals.cspClientId,\r\n          st: 1,\r\n          sv: 'V1',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body\r\n\r\n      };\r\n      const response = await fetch(HTIGlobals.cspTokenUrl, initBody);\r\n      if (response !== null && response.status === 200)\r\n      {\r\n        const cspToken = await response.json();\r\n        if (cspToken && cspToken.access_token)\r\n        {\r\n          const tokenData = { access_token: cspToken.access_token, access_token_ttl: cspToken.access_token_ttl, token_type: cspToken.token_type };\r\n          HTIGlobals.storage.set(HTIStorageVariables.CSP_TOKEN_HTI, tokenData)\r\n          \r\n          const everGreenTask = HTIGlobals.scheduleManager.getTask(HTIStorageVariables.EVER_GREEN_URL_REFRESH);\r\n          if (everGreenTask !== null)\r\n          {\r\n            everGreenTask.enabled = true;\r\n          }\r\n          // The value in response is in seconds. Converting to milliseconds for scheduler manager.\r\n          // Lets set the ttl to be 15 minutes before expiry so that we keep customers protected better.\r\n          const fifteenMinutes = 60 * 15;\r\n\r\n          const ttl = cspToken.access_token_ttl <= fifteenMinutes ? cspToken.access_token_ttl : cspToken.access_token_ttl - fifteenMinutes;\r\n          this.fsetTTL(this.name, ttl * 1000);\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(e.message);\r\n    }\r\n\r\n    const retryInterval = this.getNextRetryInterval();\r\n    this.fsetTTL(this.name, retryInterval * 1000);\r\n    return false;\r\n  }\r\n}\r\n","import Logger from '../../../Common-Utils-Package/logger/logger';\r\nimport ScheduledTaskBase from '../../../Common-Utils-Package/scheduler/scheduled_task_base';\r\nimport { HTIGlobals } from '../hti_globals';\r\nimport { generateHeaders } from '../hti_headers';\r\nimport { HTIStorageVariables } from '../hti_storage_variables';\r\n\r\nexport default class EverGreenUrlsRefresh extends ScheduledTaskBase\r\n{\r\n  init(name, fsetTTL)\r\n  {\r\n    this.name = name;\r\n    this.fsetTTL = fsetTTL;\r\n  }\r\n\r\n  // fetch latest cache of Ever green URLs\r\n  async run()\r\n  {\r\n    const everGreenURLs = HTIGlobals.storage.get(HTIStorageVariables.EVER_GREEN_URLS, null);\r\n    if (!everGreenURLs || Date.now() > everGreenURLs.cacheTTL + everGreenURLs.timeCached)\r\n    {\r\n      await this.fetchEverGreenURLs();\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Ever Green URL list\r\n  */\r\n  async fetchEverGreenURLs()\r\n  {\r\n    try\r\n    {\r\n      const headers = generateHeaders();\r\n      const response = await fetch(HTIGlobals.serverUrl + HTIGlobals.urlEverGreen, {\r\n        method: 'GET',\r\n        headers\r\n      });\r\n\r\n      if (response !== null && response.status === 200)\r\n      {\r\n        const result = await response.json();\r\n\r\n        if (result.cacheid === 'url-evergreen')\r\n        {\r\n          // store url cache with TTL\r\n          const data = { cacheTTL: result.ttl, timeCached: Date.now(), content: result.content };\r\n          HTIGlobals.storage.set(HTIStorageVariables.EVER_GREEN_URLS, data);\r\n        }\r\n      }\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(e.message);\r\n    }\r\n  }\r\n}\r\n","import Storage from '../../Common-Utils-Package/storage/storage';\r\nimport Logger from '../../Common-Utils-Package/logger/logger';\r\nimport HttpService from '../../Common-Utils-Package/http_service/http_service';\r\nimport ScheduleManager from '../../Common-Utils-Package/scheduler/scheduler_manager';\r\nimport HTIResponseBuilder from './hti_response_builder';\r\nimport HTICache from './hti_cache';\r\nimport { HTIStorageVariables } from './hti_storage_variables';\r\nimport { HTIGlobals } from './hti_globals';\r\nimport { generateHeaders } from './hti_headers';\r\nimport { schedulers } from './schedulers/schedulers';\r\n\r\nexport default class HTIRequestor\r\n{\r\n  /**\r\n   * HTI Requestor: constructor\r\n   * @param {object} wasm - wasm engine object\r\n   * @param {function} wasm.get_wa_app_key - should contain function\r\n   * @param {function} wasm.get_wa_shared_key - should contain function\r\n   * @param {function} wasm.generate_value_for_ac - should contain function\r\n   * @param {object} options - object containinig optional params that alter the behavior of this lib\r\n   * @param {string} options.clientIdGuid - client id passed as part of the hti request header (default as: '87d8d1082c2f2f821f438b2359b7a5b4')\r\n   * @param {string} options.cspClientId - csp client id\r\n   * @param {string} options.serverUrl - url string to the hti server (default as: 'https://threat.api.mcafee.com/')\r\n   * @param {string} options.productVersion - product version for gti call (default as: '0.0.0.0')\r\n   */\r\n  constructor(wasm, options)\r\n  {\r\n    // required param\r\n    HTIGlobals.wasm = wasm;\r\n    this.httpService = null;\r\n    this.htiCache = null;\r\n    HTIGlobals.storage = null;\r\n\r\n    // optional params\r\n    HTIGlobals.clientIdGuid = options.clientIdGuid || HTIGlobals.clientIdGuid;\r\n    HTIGlobals.productVersion = options.productVersion || '0.0.0.0';\r\n    HTIGlobals.serverUrl = options.serverUrl || HTIGlobals.serverUrl;\r\n    HTIGlobals.cspClientId = options.cspClientId || HTIGlobals.cspClientId;\r\n  }\r\n\r\n  async init()\r\n  {\r\n    // verify wasm\r\n    if (!HTIGlobals.wasm\r\n      || typeof HTIGlobals.wasm.get_wa_app_key !== 'function'\r\n      || typeof HTIGlobals.wasm.get_wa_shared_key !== 'function'\r\n      || typeof HTIGlobals.wasm.generate_value_for_ac !== 'function')\r\n    {\r\n      Logger.error('Invalid wasm object given on hti requestor.');\r\n      return false;\r\n    }\r\n\r\n    // initialize storage\r\n    HTIGlobals.storage = new Storage(Object.keys(HTIStorageVariables));\r\n    const success = await HTIGlobals.storage.init();\r\n    if (!success)\r\n    {\r\n      Logger.error('Failed to initialize storage.');\r\n      return false;\r\n    }\r\n\r\n    this.htiCache = new HTICache(HTIGlobals.storage);\r\n    this.htiCache.setAlarmCacheClean();\r\n\r\n    this.httpService = new HttpService();\r\n\r\n    // initialize scheduler manager\r\n    HTIGlobals.scheduleManager = new ScheduleManager(HTIGlobals.storage, schedulers);\r\n    HTIGlobals.scheduleManager.init();\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * This function allows modifying the global variables\r\n   * ie: globalValues = { serverUrl: 'https://someurl.com', otherGlobal: 'somedata' }\r\n   * @param {object} globalValues\r\n   * @param {key} globalsValues.key\r\n   * @param {value} globalsValues.value\r\n   */\r\n  setGlobals(globalValues)\r\n  {\r\n    if (typeof globalValues !== 'object'\r\n    || Array.isArray(globalValues)\r\n    || globalValues === null)\r\n    {\r\n      Logger.error('Received invalid object (json) type when trying to call MTI setGlobals.');\r\n      return;\r\n    }\r\n\r\n    for (const [key, value] of Object.entries(globalValues))\r\n    {\r\n      Logger.log(`HTI Global values updated: ${key}: ${value}`);\r\n      HTIGlobals[key] = value;\r\n    }\r\n  }\r\n\r\n  async request(requestUrls, headers)\r\n  {\r\n    const promises = [];\r\n    requestUrls.forEach((url) =>\r\n    {\r\n      // remove params and anchor from url\r\n      const urlWithoutParams = url.split(/[?#]/)[0];\r\n\r\n      const base64URL = btoa(urlWithoutParams);\r\n      const request = {\r\n        method: 'GET',\r\n        url: HTIGlobals.serverUrl + HTIGlobals.urlReputation + base64URL,\r\n        headers,\r\n      };\r\n\r\n      const requestPromise = this.httpService.sendHttpRequest(request).then((res) =>\r\n      {\r\n        if (res.ok)\r\n        {\r\n          return res.json();\r\n        }\r\n\r\n        if (res.status === 404)\r\n        {\r\n          Logger.warn(`HTI reputation not found for url: ${url}, will return unrated reputation`);\r\n          return {\r\n            category: [],\r\n            flags: 0,\r\n            trust: 0,\r\n            ttl: 3600,\r\n          };\r\n        }\r\n\r\n        return {};\r\n      });\r\n\r\n      promises.push(requestPromise);\r\n    });\r\n\r\n    const response = await Promise.all(promises);\r\n\r\n    // Attach url from requestUrls back into the hti response object\r\n    const result = response.map((urlResult, index) =>\r\n    {\r\n      urlResult.url = requestUrls[index];\r\n      return urlResult;\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  prepareBody(requestData, builder, checkCacheOnly = false)\r\n  {\r\n    const requestUrls = [];\r\n\r\n    // loop through each request url to see whether we have cached data\r\n    for (let startIndex = 0; startIndex < requestData.length; startIndex++)\r\n    {\r\n      const url = requestData[startIndex];\r\n      const urlCacheObject = this.htiCache.getReputation(url);\r\n\r\n      if (urlCacheObject === null)\r\n      {\r\n        if (checkCacheOnly)\r\n        {\r\n          // if we are to do cache check only, no need to prepare\r\n          // for HTI request calls.\r\n          continue;\r\n        }\r\n\r\n        // There is no data for this uri in cache so add this to the question list.\r\n        requestUrls.push(url);\r\n      }\r\n      else\r\n      {\r\n        builder.addCachedItem({ url, value: urlCacheObject });\r\n        // Remove cached item from requestdata.\r\n        requestData.splice(startIndex, 1);\r\n        startIndex--;\r\n      }\r\n    }\r\n\r\n    return requestUrls;\r\n  }\r\n\r\n  toResponse(htiResponse, builder, requestData, fncallback)\r\n  {\r\n    builder.init(htiResponse, requestData); // \"[]\" = empty hti response.\r\n    builder.prepareResponse(fncallback); // Concatenate the responses and then return to content.\r\n  }\r\n\r\n  /**\r\n   * Does post to HTI splitting the requests as per guidelines to 5 questions per request.\r\n   * @param {object}   requestData    - Array of request URLs whose reputation is asked to HTI\r\n   * @param {function} fncallback     - Callback function invoked to respond to the query from content process\r\n   * @param {object}   options        - optional params\r\n   * @param {boolean}  options.checkCacheOnly - Check Cache only for HTI, do not make HTTP HTI request\r\n   */\r\n  async post(requestData, fncallback, options)\r\n  {\r\n    const checkCacheOnly = options.checkCacheOnly || false;\r\n\r\n    const promises = this.htiCache.checkRequest(requestData);\r\n    if (promises.length > 0)\r\n    {\r\n      await Promise.all(promises);\r\n    }\r\n\r\n    try\r\n    {\r\n      const builder = new HTIResponseBuilder(this.htiCache);\r\n\r\n      // requestData will only contain non-cached items after this\r\n      const requestUrls = this.prepareBody(requestData, builder, checkCacheOnly);\r\n      if (requestUrls.length > 0)\r\n      {\r\n        // If there are urls that we need to request for reputation\r\n        // then we proceed to call HTI\r\n        try\r\n        {\r\n          const promise = new Promise(async (resolve) =>\r\n          {\r\n            const headers = generateHeaders();\r\n            const response = await this.request(requestUrls, headers);\r\n            this.toResponse(response, builder, requestData, fncallback);\r\n            this.htiCache.deleteRequest(requestData);\r\n            resolve();\r\n          });\r\n\r\n          this.htiCache.addRequest(requestData, promise);\r\n        }\r\n        catch (error)\r\n        {\r\n          fncallback(null);\r\n          Logger.error(error);\r\n        }\r\n      }\r\n      else\r\n      {\r\n        // If there are no need to call HTI for requests (i.e. Everything is cached already)\r\n        // we can  prepare the response right away.\r\n        const htiResponse = [];\r\n        const fullRequestData = requestData.slice();\r\n        this.toResponse(htiResponse, builder, fullRequestData, fncallback);\r\n      }\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(e.message);\r\n    }\r\n  }\r\n\r\n  getCache()\r\n  {\r\n    return this.htiCache;\r\n  }\r\n}\r\n","import Logger from '../Common-Utils-Package/logger/logger';\r\nimport HTIBackgroundListener from './hti/hti_background_listener';\r\nimport { HTIGlobals } from './hti/hti_globals';\r\nimport HTIRequestor from './hti/hti_requestor';\r\n\r\nexport default class BackgroundHTIRequestor\r\n{\r\n  /**\r\n   * HTI Requestor: constructor\r\n   * @param {object} wasm - wasm engine object\r\n   * @param {function} wasm.get_wa_app_key - should contain function\r\n   * @param {function} wasm.get_wa_shared_key - should contain function\r\n   * @param {function} wasm.generate_value_for_ac - should contain function\r\n   * @param {object} options - object containinig optional params that alter the behavior of this lib\r\n   * @param {string} options.clientIdGuid - client id passed as part of the hti request header (default as: '87d8d1082c2f2f821f438b2359b7a5b4')\r\n   * @param {string} options.cspClientId - csp client id\r\n   * @param {string} options.serverUrl - url string to the hti server (default as: 'https://threat.api.mcafee.com')\r\n   * @param {string} options.productVersion - product version for gti call (default as: '0.0.0.0')\r\n   */\r\n  constructor(wasm, options)\r\n  {\r\n    this.promisesToComplete = null;\r\n    HTIGlobals.htiRequestor = new HTIRequestor(wasm, options);\r\n  }\r\n\r\n  /**\r\n   * TODO: can be removed when we fully transition to HTI from GTI\r\n   * This function returns the API type\r\n   * @param {string} returns 'HTI'\r\n   */\r\n  getType()\r\n  {\r\n    return 'HTI';\r\n  }\r\n\r\n  async init()\r\n  {\r\n    this.promisesToComplete = new Promise(async (resolve) =>\r\n    {\r\n      const htiRequestInit = await HTIGlobals.htiRequestor.init();\r\n      if (!htiRequestInit)\r\n      {\r\n        Logger.error('Failed to initialize HTI Requestor.');\r\n      }\r\n\r\n      resolve();\r\n    });\r\n\r\n    const htiListener = new HTIBackgroundListener(this.promisesToComplete);\r\n    htiListener.init();\r\n\r\n    await this.promisesToComplete;\r\n  }\r\n\r\n  /**\r\n   * This function allows modifying the global variables\r\n   * ie: globalValues = { serverUrl: 'https://someurl.com', otherGlobal: 'somedata' }\r\n   * @param {object} globalValues\r\n   * @param {key} globalsValues.key\r\n   * @param {value} globalsValues.value\r\n   */\r\n  setGlobals(globalValues)\r\n  {\r\n    HTIGlobals.htiRequestor.setGlobals(globalValues);\r\n  }\r\n\r\n  /**\r\n   * Does post to HTI splitting the requests as per guidelines to 5 questions per request.\r\n   * @param {object} requestData      - Array of request URLs whose reputation is asked to GTI\r\n   * @param {string} referrer         - Value of referer header (or undefined)\r\n   * @param {boolean} checkCacheOnly  - Check Cache only for GTI, do not make HTTP GTI request\r\n   */\r\n  async post(requestData, referrer = null, checkCacheOnly = false)\r\n  {\r\n    await this.promisesToComplete;\r\n\r\n    if (!HTIGlobals || !HTIGlobals.htiRequestor)\r\n    {\r\n      Logger.error('Error to post HTI request has HTIRequestor has not yet been initialized');\r\n      return null;\r\n    }\r\n\r\n    const options = { referrer, checkCacheOnly };\r\n    const promise = new Promise((resolve) => HTIGlobals.htiRequestor.post(requestData, resolve, options));\r\n    const result = await promise;\r\n    return result;\r\n  }\r\n\r\n  async clearCache()\r\n  {\r\n    HTIGlobals.htiRequestor.getCache().clear();\r\n  }\r\n\r\n  setReputation(url, value)\r\n  {\r\n    HTIGlobals.htiRequestor.getCache().setReputation(url, value);\r\n  }\r\n\r\n  getReputation(url)\r\n  {\r\n    return HTIGlobals.htiRequestor.getCache().getReputation(url);\r\n  }\r\n}\r\n","import { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport { LocalStorageVariables } from '@extension/common/cache_store_variables';\r\nimport { BuildSettings } from '@extension/common/constants';\r\nimport { Logger } from '@extension/common/logger';\r\nimport BackgroundGTIRequestor from '@mcafee/gti/background_gti_requestor';\r\nimport BackgroundHTIRequestor from '@mcafee/hti/background_hti_requestor';\r\n\r\nexport default class MTIInitializer\r\n{\r\n  static async initGtiPackage()\r\n  {\r\n    const options = {\r\n      clientIdGuid: MTIInitializer.getClientId(),\r\n      serverUrl: BackgroundGlobals.gtiServer,\r\n      productVersion: BuildSettings.EXTENSION_VERSION,\r\n      cspId: BackgroundGlobals.nativeSettings.CSP_ID_SETTING.value,\r\n    };\r\n    BackgroundGlobals.mtiRequestor = new BackgroundGTIRequestor(BackgroundGlobals.wasm, options);\r\n    await BackgroundGlobals.mtiRequestor.init();\r\n  }\r\n\r\n  static async initHtiPackage()\r\n  {\r\n    const options = {\r\n      serverUrl: BackgroundGlobals.htiServer,\r\n      productVersion: BuildSettings.EXTENSION_VERSION,\r\n      cspClientId: BackgroundGlobals.cspClientId,\r\n      clientIdGuid: MTIInitializer.getClientId(),\r\n    };\r\n    BackgroundGlobals.mtiRequestor = new BackgroundHTIRequestor(BackgroundGlobals.wasm, options);\r\n    await BackgroundGlobals.mtiRequestor.init();\r\n  }\r\n\r\n  static getClientId()\r\n  {\r\n    const clientIdGuid = BackgroundGlobals.nativeSettings.MTI_CLIENT_ID.value || BackgroundGlobals.cacheStore.get(LocalStorageVariables.EXTN_UUID2.name, '');\r\n    return clientIdGuid;\r\n  }\r\n\r\n  static async init()\r\n  {\r\n    const shouldUseHTIPackage = MTIInitializer.shouldUseHTIPackage();\r\n\r\n    // update flags to reflect what package is initialized\r\n    MTIInitializer.updateHTIFlag(shouldUseHTIPackage);\r\n\r\n    if (shouldUseHTIPackage)\r\n    {\r\n      // only initialize HTI package if:\r\n      // - we pass HTI checks\r\n      // and either:\r\n      // - the mti requestor object has not yet been initialized or\r\n      // - if it was initialized with the GTI Package, we proceed to re-initialize it as HTI\r\n      if (!BackgroundGlobals.mtiRequestor || BackgroundGlobals.mtiRequestor.getType() === 'GTI')\r\n      {\r\n        Logger.log('MTI requestor: initialize as HTI package.');\r\n        await MTIInitializer.initHtiPackage();\r\n      }\r\n      else\r\n      {\r\n        Logger.log('HTI package has been previously initialized. Will not initialize again.');\r\n      }\r\n    }\r\n\r\n    if (!shouldUseHTIPackage)\r\n    {\r\n      // only initialize GTI package if:\r\n      // - we failed the HTI checks\r\n      // and either:\r\n      // - the mti requestor object has not yet been initialized or\r\n      // - if it was initialized with the HTI Package, we proceed to re-initialize it as GTI\r\n      if (!BackgroundGlobals.mtiRequestor || BackgroundGlobals.mtiRequestor.getType() === 'HTI')\r\n      {\r\n        Logger.log('MTI requestor: initialize as GTI package.');\r\n        await MTIInitializer.initGtiPackage();\r\n      }\r\n      else\r\n      {\r\n        Logger.log('GTI package has been previously initialized. Will not initialize again.');\r\n      }\r\n    }\r\n\r\n    // Update existing mti requestor with latest values retrieved from native\r\n    if (BackgroundGlobals.mtiRequestor)\r\n    {\r\n      const clientIdGuid = MTIInitializer.getClientId();\r\n      const cspid = BackgroundGlobals.nativeSettings.CSP_ID_SETTING.value;\r\n      BackgroundGlobals.mtiRequestor.setGlobals({ cspid, clientIdGuid });\r\n    }\r\n  }\r\n\r\n  static updateHTIFlag(value = null)\r\n  {\r\n    BackgroundGlobals.cacheStore.set(LocalStorageVariables.IS_HTI.name, value);\r\n    BackgroundGlobals.isHTI = value;\r\n  }\r\n\r\n  static shouldUseHTIPackage()\r\n  {\r\n    const isHTI = BackgroundGlobals.cacheStore.get(LocalStorageVariables.IS_HTI.name, false);\r\n\r\n    // Process the following check, after we know the background globals were updated\r\n    // Otherwise, we just rely on what we know based on isHTI flag\r\n    if (BackgroundGlobals.updatedByNative)\r\n    {\r\n      // Always HTI if WPS is installed\r\n      if (BackgroundGlobals.isWPSInstalled)\r\n      {\r\n        Logger.log('MTI requestor WPS Installed: true - shall use HTI package.');\r\n        return true;\r\n      }\r\n\r\n      // If WSS installed the do not turn on HTI\r\n      if (BackgroundGlobals.WSS_INSTALLED)\r\n      {\r\n        Logger.log('MTI requestor WSS Installed: true - shall not use HTI package.');\r\n        return false;\r\n      }\r\n\r\n      // if throttle is 0, feature is disabled\r\n      if (BackgroundGlobals.nativeSettings.HTI_THROTTLE.value === 0)\r\n      {\r\n        BackgroundGlobals.cacheStore.set(LocalStorageVariables.HTI_THROTTLE.name, BackgroundGlobals.nativeSettings.HTI_THROTTLE.value);\r\n        Logger.log('MTI requestor: HTI throttle at 0 percent (feature disabled) - shall not use HTI package.');\r\n        return false;\r\n      }\r\n\r\n      // otherwise, lets try to process the throttle value\r\n      // If WPS is not installed or WSS is not installed and if throttle is set to more than 0%\r\n      if (BackgroundGlobals.nativeSettings.HTI_THROTTLE.value > 0)\r\n      {\r\n        // If previously throttle value is same as current value then stick to earlier HTI Flag value (based on previous calculations)\r\n        const prevHTIThrottle = BackgroundGlobals.cacheStore.get(LocalStorageVariables.HTI_THROTTLE.name);\r\n        if (BackgroundGlobals.nativeSettings.HTI_THROTTLE.value === prevHTIThrottle)\r\n        {\r\n          Logger.log(`MTI requestor throttle check pass (no change) - isHTI set to ${isHTI}`);\r\n          return isHTI;\r\n        }\r\n\r\n        // otheriwse, pick the new value and recalculate.\r\n        BackgroundGlobals.cacheStore.set(LocalStorageVariables.HTI_THROTTLE.name, BackgroundGlobals.nativeSettings.HTI_THROTTLE.value);\r\n        const randVal = Math.random();\r\n        const percent = Math.ceil(randVal * 100);\r\n        // Initializing HTI package and storing current flag whether this is HTI or not. Subsequent run of this\r\n        // extension instance will stick to the value set till there is a change in the throttle.\r\n        if (percent <= BackgroundGlobals.nativeSettings.HTI_THROTTLE.value)\r\n        {\r\n          Logger.log('MTI requestor throttle check passed - shall use HTI package.');\r\n          return true;\r\n        }\r\n\r\n        Logger.log('MTI requestor throttle check failed - shall not use HTI package.');\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Check if HTI was initialized before. This is to handle service-worker going to sleep and waking back up\r\n    // And also to handle the case where Native response happens afer we initialized\r\n    if (isHTI)\r\n    {\r\n      Logger.log('MTI requestor: HTI set to true - shall use HTI package.');\r\n      return true;\r\n    }\r\n\r\n    Logger.log('MTI requestor - shall not use HTI package.');\r\n    return false;\r\n  }\r\n}\r\n","/* eslint-disable */\r\n/* eslint-disable class-methods-use-this */\r\n/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable camelcase */\r\n\r\nconst NativeBrowserTypes = {\r\n  Unknown: -1,\r\n  Firefox: 1,\r\n  Chrome: 2,\r\n  Edge: 3\r\n};\r\n\r\nconst NativeMessages = {\r\n  Ping: 110, // Ping from another low priority extension\r\n  Handshake: 9, //  Handshake message send to native if this extension is connecting to native\r\n  HighPriorityAlive: 111, // Message from another high priority extension saying that it is alive.\r\n  Disconnected: 106 //Message send when a low priority extension is removed or disabled\r\n};\r\n\r\nconst logType = {\r\n  Info: 0,\r\n  Err: 1,\r\n  Warn: 2,\r\n  Debug: 3,\r\n};\r\n\r\nconst ConnectionState = {\r\n  CONNECTING: 'CONNECTING',\r\n  CONNECTED: 'CONNECTED',\r\n  DISCONNECTED: 'DISCONNECTED',\r\n};\r\n\r\n/* eslint-disable no-unused-vars */\r\nexport default class SmartNativeClient\r\n{\r\n  constructor(connectionString, onExternalEventCb = null, onNativeEventCb = null, onDisconnectEventCb = null,\r\n    logger = null, handshakeSettings = {}, onConnectHandler = null)\r\n  {\r\n    // Public methods\r\n    this.onExternalMessage = onExternalEventCb; // Callback to receive external messages from another extension.\r\n    this.onNativeMessage = onNativeEventCb; // Callback to receive native messages from native process.\r\n    this.onDisconnectEvent = onDisconnectEventCb; // Callback to send when disconnected from High priority extension or from native.\r\n    this.nativeConnectionString = connectionString; // The native connection string\r\n    this.onConnectHandler = onConnectHandler; // Handler to disable chrome extension if edge extension is installed.\r\n\r\n    // Private methods\r\n    this._connectedToExtension = false; // If this extension is connecting to extension rather than to native this is set to true\r\n    this._extensionId = chrome.runtime.id;\r\n    this._callbackMap = new Map();\r\n    this._callbackId = 5; // Running number for the message generated by this extension\r\n    this._nativeCallbackMap = new Map(); // Callback map for messages directly sent to native\r\n    this._forwardExtensionId = null; // The id of extension to which the messages get forwarded\r\n    this._port = null;\r\n    this._logger = logger;\r\n    this._onConnectExternal = this._onConnectExternal.bind(this);\r\n    this._onMessageExternal = this._onMessageExternal.bind(this);\r\n    this._onMessage = this._onMessage.bind(this);\r\n    this._onDisconnect = this._onDisconnect.bind(this);\r\n    this._onDisconnectHighPriorityExtension = this._onDisconnectHighPriorityExtension.bind(this);\r\n    this._connectedExtensions = [];\r\n    this._connectedToNative = false;\r\n    this._handshakeSettings = handshakeSettings;\r\n    this._nativeConnectionStatus = ConnectionState.DISCONNECTED;\r\n    this._initExtensionList();\r\n  }\r\n\r\n  init(callback)\r\n  {\r\n    chrome.runtime.onConnectExternal.addListener(this._onConnectExternal);\r\n    chrome.runtime.onMessageExternal.addListener(this._onMessageExternal);\r\n    this._connect(0, callback);\r\n  }\r\n\r\n  // Checks whether the passed extension is a supported one.\r\n  _isSupported(extensionId)\r\n  {\r\n    return this.extensions.includes(extensionId);\r\n  }\r\n\r\n  // Checks whether the passed extension id is of a supported extension.\r\n  _isHigherPriority(extensionid)\r\n  {\r\n    for (let index = 0; index < this.extensions.length; ++index)\r\n    {\r\n      // The extension is in list higher than current extension.\r\n      if (extensionid === this.extensions[index])\r\n      {\r\n        return true;\r\n      }\r\n\r\n      if (this._extensionId === this.extensions[index]) // We have hit current extension id so break\r\n      {\r\n        break;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  _addConnectedExtension(extensionid)\r\n  {\r\n    this._connectedExtensions.push(extensionid);\r\n  }\r\n\r\n  _removeConnectedExtension(extensionid)\r\n  {\r\n    const index = this._connectedExtensions.indexOf(extensionid);\r\n    if (index !== -1)\r\n    {\r\n      this._connectedExtensions.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  //  If an unauthorized extension connects to us then disconnect immediately. External extensions connect\r\n  //  to just track and identify when this extension is removed or disabled\r\n  _onConnectExternal(port)\r\n  {\r\n    this._log(logType.Info, `External entity ${port.sender.id} connected`);\r\n    if (!this._isSupported(port.sender.id))\r\n    {\r\n      this._log(logType.Info, `Unsupported external entity ${port.sender.id} is forcefully disconnected`);\r\n      port.disconnect();\r\n      return;\r\n    }\r\n    \r\n    this.onConnectHandler && this.onConnectHandler(this._extensionId, port.sender.id);\r\n\r\n    /// We donot do anything or connect back as this smartclient object is not expected to connect back.\r\n    /// this was intended for another smartclient object in this extension.\r\n    if (this.nativeConnectionString.toLowerCase() !== port.name.toLowerCase())\r\n    {\r\n      return;\r\n    }\r\n\r\n    // If a low priority extension connected to us, then connect back so that we are notified if that extension\r\n    // is disabled.\r\n    if (!this._isHigherPriority(port.sender.id))\r\n    {\r\n      this._addConnectedExtension(port.sender.id);\r\n      const lport = chrome.runtime.connect(port.sender.id);\r\n      if (lport !== null)\r\n      {\r\n        lport.onDisconnect.addListener(() =>\r\n        {\r\n          if (chrome.runtime.lastError)\r\n          {\r\n            this._log(`Error connecting to native host ${extension.runtime.lastError.message}`);\r\n          }\r\n\r\n          this._removeConnectedExtension(port.sender.id);\r\n          // The low priority extension disconnected so now send message to native that lp extension is not active.\r\n          this._sendDisconnect(port.sender.id);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Internal callback id which is auto incremented for each request send to native\r\n  _incrementCallbackId()\r\n  {\r\n    const MAX_SIGNED_INT32 = 2147483647;\r\n\r\n    if (this._callbackId < 0 || this._callbackId >= MAX_SIGNED_INT32)\r\n    {\r\n      this._callbackId = 5;\r\n    }\r\n    else\r\n    {\r\n      this._callbackId += 1;\r\n    }\r\n    return this._callbackId;\r\n  }\r\n\r\n  // Wait for messages from extension.\r\n  _onMessageExternal(message, sender, sendResponse)\r\n  {\r\n    let bRet = false;\r\n\r\n    try\r\n    {\r\n      if (!this._isSupported(sender.id))\r\n      {\r\n        this._log(logType.Info, `Message received from unsupported entity ${sender.id}. Message is ${JSON.stringify(message)}`);\r\n        return;\r\n      }\r\n\r\n      if (message === null || !('request_type' in message))\r\n      {\r\n        this._log(logType.Err, `Message received does not have request_type field : ${JSON.stringify(message)}`);\r\n        return;\r\n      }\r\n\r\n      //If this message is not intended to the native that this smartclient object is connected to, then ignore the message.\r\n      if (message.nativeConnectionString && message.nativeConnectionString.toLowerCase() !== this.nativeConnectionString.toLowerCase()) \r\n      {\r\n        return;\r\n      }\r\n\r\n      this._log(logType.Info, `Message received from external extension ${sender.id} ${JSON.stringify(message)}`);\r\n\r\n      // Will forward only if this smart client is connected to same native as expected by low priority extension\r\n      if (message.request_type === NativeMessages.Ping) //  This is initial ping, so send response.\r\n      {\r\n        sendResponse({ forwardingsupported: true, connectedToNative: this._connectedToNative });\r\n        this._log(logType.Info, `Ping message from low priority extension ${sender.id}`);\r\n        return;\r\n      }\r\n      \r\n      // A high priority extension is live so disconnect and reconnect.\r\n      if (message.request_type === NativeMessages.HighPriorityAlive)\r\n      {\r\n        this._nativeConnectionStatus = ConnectionState.DISCONNECTED;\r\n        this._log(logType.Info, `Message from high priority extension ${sender.id} broadcasting its presence`);\r\n\r\n        if (this._port !== null)\r\n        {\r\n          this._log(logType.Info, 'Disconnection the direct native connection');\r\n          this._port.disconnect();\r\n          this._port = null;\r\n        }\r\n\r\n        this._log(logType.Info, `Attempting reconnection to the high priority extension  ${sender.id} which broadcasted its presence`);\r\n        this._connect(0, null);\r\n      }\r\n\r\n      let forwardMessage = true;\r\n\r\n      if (this.onExternalMessage !== null) // If external message handler is available then\r\n      {\r\n        this._log(logType.Info, `Passing the message ${JSON.stringify(message)} from ${sender.id} to external message listener of this extension`);\r\n        const response = this.onExternalMessage(message, sender, sendResponse);\r\n\r\n        if (response !== null && response !== undefined)\r\n        {\r\n          forwardMessage = response.forwardMessage || true;\r\n\r\n          // If message is not intended to be forwarded, check what should be the return from this function\r\n          if (forwardMessage !== true)\r\n          {\r\n            bRet = response.ret;\r\n          }\r\n        }\r\n      }\r\n\r\n      // If connected to native then forward the message else skip it.\r\n      if (forwardMessage && this._port !== null && this._connectedToNative)\r\n      {\r\n        // If the message had Id then it is expecting a callback so generate a unique callback id for this forwarded message\r\n        // So store the callback id from another extension, generate this extensions callback id and then forward message.\r\n        if ('id' in message)\r\n        {\r\n          const callbackId = this._incrementCallbackId();\r\n          this._callbackMap.set(callbackId, { extensionId: sender.id, id: message.id, callback: sendResponse });\r\n          message.id = callbackId;\r\n          bRet = true;\r\n        }\r\n\r\n        this._log(logType.Info, `Message ${JSON.stringify(message)} is forwarded to native`);\r\n        this._nativePostMessage(message);\r\n      }\r\n    }\r\n    catch (exception)\r\n    {\r\n      this._logException(exception);\r\n    }\r\n\r\n    return bRet;\r\n  }\r\n\r\n  // This is message from native.\r\n  _onMessage(message)\r\n  {\r\n    if (message === null || !('request_type' in message))\r\n    {\r\n      this._log(logType.Err, `Message received from native does not have request_type. Hence skipping the message. ${JSON.stringify(message)}`);\r\n      return;\r\n    }\r\n\r\n    this._nativeConnectionStatus = ConnectionState.CONNECTED;\r\n    if (message.id)\r\n    {\r\n      // If a native callback exists then just fire that and return. This is the callback registered for this particular message in this extension.\r\n      const nCallback = this._nativeCallbackMap.get(message.id);\r\n      if (nCallback !== null && nCallback !== undefined)\r\n      {\r\n        this._log(logType.Info, `Callback exists for message in this extension itself, hence firing that for message : ${JSON.stringify(message)}`);\r\n        nCallback(message);\r\n        this._nativeCallbackMap.delete(message.id);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // The message has to be forwarded\r\n    if ('id' in message) // A message to forward as a return for another message sent needs to have an id\r\n    {\r\n      const ret = this._callbackMap.get(message.id); // Get the cached message sender details.\r\n      if (ret !== undefined)\r\n      {\r\n        this._log(logType.Info, `Forwarding message ${JSON.stringify(message)} to callback extension ${ret.extensionId}`);\r\n        this._callbackMap.delete(message.id);\r\n        // Replace with original callbackid\r\n        message.id = ret.id;\r\n        ret.callback(message); // send message to extension\r\n        return;\r\n      }\r\n    }\r\n    else if ('forwardid' in message) // Forward id is identifier of the destination extension to which to forward the message\r\n    {\r\n      chrome.runtime.sendMessage(message.forwardid, message, null, null);\r\n      return;\r\n    }\r\n    \r\n    if (this.onNativeMessage !== null)\r\n    {\r\n      this._log(logType.Info, `Calling native generic callback for message received from native ${JSON.stringify(message)}`);\r\n      this.onNativeMessage(message);\r\n    }\r\n  }\r\n\r\n  //Fired when disconnection happens. Disconnection can be from the high priority extension or\r\n  //it can be from native if this extension had directly connected to native. But not both as\r\n  //this extension could either be connecting to native or connecting to another extension.\r\n  _onDisconnect(eventPort)\r\n  {\r\n    const tempConnectionStatus = this._nativeConnectionStatus;\r\n    this._nativeConnectionStatus = ConnectionState.DISCONNECTED;\r\n\r\n    if (chrome.runtime.lastError)\r\n    {\r\n      this._log(logType.Warn, `Connection to native/extension failed Error is: ${chrome.runtime.lastError.message}`);\r\n    }\r\n\r\n    this._log(logType.Debug, 'Disconnected from native. Trying to connect loop again');\r\n    this._port = null;\r\n\r\n    if (this.onDisconnectEvent !== null)\r\n    {\r\n      this.onDisconnectEvent(eventPort);\r\n    }\r\n\r\n    // This is the fallback and if this has failed there is nothing to do. Maybe native is not available.\r\n    if (this._connectedToNative)\r\n    {\r\n      this._connectedToNative = false;\r\n      return;\r\n    }\r\n\r\n    // If this extension tried to connect to native but failed,\r\n    // we can ignore calling connect again, since native was not there\r\n    // and no other extension had higher priority (otherwise we wouldn't have\r\n    // tried to connect to native to begin with)\r\n    if (tempConnectionStatus !== ConnectionState.CONNECTING)\r\n    {\r\n      this._connect(0, null);\r\n    }\r\n  }\r\n\r\n  /// Initialize the list of supported extension. The highest priority is at 0th index and the lowest is the last item.\r\n  _initExtensionList()\r\n  {\r\n    const browserType = this._toBrowserType();\r\n\r\n    switch (browserType)\r\n    {\r\n      case NativeBrowserTypes.Chrome:\r\n        this.extensions = [\r\n          'fheoggkfdfchfphceeifdbepaooicaho', // WA\r\n          'cpaibbcbodhimfnjnakiidgbpiehfgci', // TK\r\n          'klekeajafkkpokaofllcadenjdckhinm', // WB\r\n          'enppghjcblldgigemljohkgpcompnjgh', // SS\r\n          'kanjcmmieblbpbihaafnedamppkhfadn', // NT\r\n          'ciahhpibjeonlihjdefecmhminjpmfkk', // TK\r\n          'nbeldjopgciegccabfohnefghfpinncn'  // TK\r\n        ];\r\n        break;\r\n      case NativeBrowserTypes.Edge:\r\n        this.extensions = [\r\n          'fdhgeoginicibhagdmblfikbgbkahibd', // WA\r\n          'gnnbmcifkkjgjdbkilfglpdpmidkgefn', // TK\r\n          'lamehkegphbbfdailghaeeleoajilfho',  // WB\r\n          'fheoggkfdfchfphceeifdbepaooicaho', // WA_CH\r\n        ];\r\n        break;\r\n      case NativeBrowserTypes.Firefox:\r\n        this.extensions = [\r\n          '{4ED1F68A-5463-4931-9384-8FFF5ED91D92}', // WA\r\n          '@true-key'\r\n          \r\n        ];\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /// Internal method to detect current browser type. This is used primarily to initiatize the extension list.\r\n  _toBrowserType()\r\n  {\r\n    if (navigator.userAgent.indexOf('Edg') >= 0)\r\n    {\r\n      return NativeBrowserTypes.Edge;\r\n    }\r\n    if (navigator.userAgent.indexOf('Chrome') >= 0)\r\n    {\r\n      return NativeBrowserTypes.Chrome;\r\n    }\r\n    if (navigator.userAgent.indexOf('Gecko') >= 0)\r\n    {\r\n      return NativeBrowserTypes.Firefox;\r\n    }\r\n    return NativeBrowserTypes.Unknown;\r\n  }\r\n\r\n  /// Logging helper function\r\n  _log(logtype, msg)\r\n  {\r\n    if (!this._logger)\r\n    {\r\n      return;\r\n    }\r\n     \r\n    if (logtype === logType.Info)\r\n    {\r\n      this._logger.log(msg, 'SMART_NATIVE_CLIENT', '#004d7c');\r\n    }\r\n    else if (logType === logType.Err)\r\n    {\r\n      this._logger.error(msg, 'SMART_NATIVE_CLIENT');\r\n    }\r\n    else if (logType === logType.Warn)\r\n    {\r\n      this._logger.warn(msg, 'SMART_NATIVE_CLIENT', '#004d7c');\r\n    }\r\n    else if (logType === logType.Debug)\r\n    {\r\n      this._logger.debug(msg, 'SMART_NATIVE_CLIENT', '#004d7c');\r\n    }\r\n  }\r\n\r\n  /// Logging helper function to log exceptions.\r\n  _logException(exception)\r\n  {\r\n    let msg = exception.message;\r\n    if (chrome.runtime.lastError && chrome.runtime.lastError.message)\r\n    {\r\n      msg += `LastError :${chrome.runtime.lastError.message}`;\r\n    }\r\n    this._log(logType.Err, msg);\r\n  }\r\n\r\n  _toDisconnectMessage(extensionid)\r\n  {\r\n    const discmessage = {};\r\n    discmessage.request_type = NativeMessages.Disconnected;\r\n    discmessage.payload = {};\r\n    discmessage.payload.browser_type = this._toBrowserType();\r\n    discmessage.payload.extn_id = extensionid;\r\n    return discmessage;\r\n  }\r\n\r\n  /// Send disconnect message to native.\r\n  _sendDisconnect(extensionId)\r\n  {\r\n    try\r\n    {\r\n      const disconnectmsg = this._toDisconnectMessage(extensionId);\r\n      this._nativePostMessage(disconnectmsg);\r\n      this._log(logType.Info, `Sent disconnect message directly to native ${JSON.stringify(handshake)}`);\r\n    }\r\n    catch (exception)\r\n    {\r\n      this._logException(exception);\r\n    }\r\n  }\r\n\r\n  /// Generate the handshake message for current extension\r\n  _toHandshakeMessage()\r\n  {\r\n    return {\r\n      request_type: NativeMessages.Handshake,\r\n      id: this._incrementCallbackId(),\r\n      payload: {\r\n        extn_id: this._extensionId,\r\n        extn_version: chrome.runtime.getManifest().version,\r\n        browser_type: this._toBrowserType(),\r\n        user_agent: navigator.userAgent,\r\n        ...this._handshakeSettings,\r\n      }\r\n    };\r\n  }\r\n\r\n  /// Send handshake message to native.\r\n  _sendhandshake()\r\n  {\r\n    try\r\n    {\r\n      const handshake = this._toHandshakeMessage();\r\n      this._nativeConnectionStatus = ConnectionState.CONNECTING;\r\n      if (this._nativePostMessage(handshake))\r\n      { \r\n        this._log(logType.Info, `Sent handshake message directly to native ${JSON.stringify(handshake)}`);\r\n        return true;\r\n      }\r\n    }\r\n    catch (exception)\r\n    {\r\n      this._logException(exception);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // We create a function that checks every 0.3s for up to 3s\r\n  // to see if connection to Native was successful or not\r\n  // DISCONNECTED - happens onDisconnect listener\r\n  // CONNECTED - happens when a handshake response is returned from native\r\n  _isNativeConnected()\r\n  {\r\n    return new Promise ((resolve) =>\r\n    {\r\n      const check = (tries) =>\r\n      {\r\n        if (tries >= 11 || this._nativeConnectionStatus === ConnectionState.DISCONNECTED)\r\n        {\r\n          resolve(false);\r\n        }\r\n        else if (this._nativeConnectionStatus === ConnectionState.CONNECTED)\r\n        {\r\n          resolve(true);\r\n        }\r\n        else\r\n        {\r\n          setTimeout(() =>\r\n          {\r\n            check(tries + 1);\r\n          }, 300);\r\n        }\r\n      };\r\n\r\n      check(0);\r\n    });\r\n  }\r\n\r\n  // Attempts to connect to the extension in the list at the index passed. If such a connection could  not be\r\n  // established it will attempt to connect to the next priority extension till it reaches this extensions id.\r\n  // Upon that, it is assumed that\r\n  async _connect(index, callback = null)\r\n  {\r\n    if (index >= this.extensions.length)\r\n    {\r\n      callback && callback({ connected: false });\r\n      return;\r\n    }\r\n\r\n    // If attempts to connect to all high priority extensions failed connect to native directly\r\n    if (this.extensions[index] === this._extensionId)\r\n    {\r\n      // We try to connect to native, only if we dont have a higher priority extension to connect to\r\n      // And only if this it is not connected (DISCONNECTED)\r\n      if (this._nativeConnectionStatus === ConnectionState.DISCONNECTED)\r\n      {\r\n        this._log(logType.Info, 'No other high priority extension available, hence connecting directly to native');\r\n        this._port = chrome.runtime.connectNative(this.nativeConnectionString);\r\n        this._connectedToExtension = false;\r\n        this._port.onMessage.addListener(this._onMessage);\r\n        this._port.onDisconnect.addListener(this._onDisconnect);\r\n        this._forwardExtensionId = null;\r\n        this._sendhandshake();\r\n      }\r\n\r\n      const nativeConnected = await this._isNativeConnected();\r\n      if (nativeConnected)\r\n      {\r\n        this._connectedToNative = true;\r\n        // Notify all lower priority extensions that I am there and I have connected to native so that they\r\n        // can disconnect and route through me now. Do this only if handshake was successfully sent.\r\n\r\n        const hpAliveMsg = {};\r\n        hpAliveMsg.request_type = NativeMessages.HighPriorityAlive;\r\n        hpAliveMsg.payload = {};\r\n\r\n        for (let ilower = index + 1; ilower < this.extensions.length; ++ilower)\r\n        {\r\n          chrome.runtime.sendMessage(this.extensions[ilower], hpAliveMsg, () =>\r\n          {\r\n            if (chrome.runtime.lastError)\r\n            {\r\n              this._log(logType.Warn, `Failed to sendMessage to extension id: ${this.extensions[ilower]}, got err: ${chrome.runtime.lastError.message}`);\r\n            }\r\n          });\r\n        }\r\n        callback && callback({ connected: true });\r\n        return;\r\n      }\r\n      // Failed to connect to native\r\n      callback && callback({ connected: false });\r\n      return;\r\n    }\r\n\r\n    const pingMsg = {};\r\n    pingMsg.request_type = NativeMessages.Ping;\r\n    pingMsg.nativeConnectionString = this.nativeConnectionString;\r\n    pingMsg.payload = {};\r\n\r\n    chrome.runtime.sendMessage(this.extensions[index], pingMsg, (response) =>\r\n    {\r\n      if (chrome.runtime.lastError)\r\n      {\r\n        this._log(logType.Warn, `Message failed to send: ${chrome.runtime.lastError.message}`);\r\n        this._connect(index + 1, callback);\r\n        return;\r\n      }\r\n\r\n      // Extension did not respond. Now just try next priority extension.\r\n      if (response === null || response === undefined) \r\n      {\r\n        this._log(logType.Info, `High priority extension ${this.extensions[index]} did not respond with appropriate response. Hence trying the next high priority available extension`);\r\n        this._connect(index + 1, callback);\r\n        return;\r\n      }\r\n\r\n      // We received a response from high priority extension.\r\n      if (!response.forwardingsupported)\r\n      {\r\n        // Forwarding not supported by extension, attempt next priority extension\r\n        this._log(logType.Info, `High priority extension ${this.extensions[index]} responded but it does not support forwarding. Hence trying next priority extension`);\r\n        this._connect(index + 1, callback);\r\n        return;\r\n      }\r\n\r\n      this._log(logType.Info, `High priority extension ${this.extensions[index]} responded and supports forwarding.`);\r\n\r\n      if (response.connectedToNative)\r\n      {\r\n        this._log(logType.Info, `High priority extension ${this.extensions[index]} is connected to native, hence we are forwarding to it`);\r\n        this._port = chrome.runtime.connect(this.extensions[index], { name: this.nativeConnectionString });\r\n        this._connectedToExtension = true;\r\n        this._port.onMessage.addListener(this._onMessage);\r\n        this._port.onDisconnect.addListener(this._onDisconnectHighPriorityExtension);\r\n        this._forwardExtensionId = this.extensions[index];\r\n\r\n        const handshake = this._toHandshakeMessage();\r\n        this._postMessageInternal(handshake);\r\n\r\n        callback && callback({ connected: true });\r\n      }\r\n      else\r\n      {\r\n        this._log(logType.Info, `High priority extension ${this.extensions[index]} supports forwarding, but is not connected to native`);\r\n        callback && callback({ connected: false });\r\n      }\r\n    });\r\n  }\r\n\r\n  _onDisconnectHighPriorityExtension()\r\n  {\r\n    this._log(logType.Info, 'Disconnected from high priority extension. Hence trying to connect to next priority extension');\r\n    this._forwardExtensionId = null;\r\n    this._nativeConnectionStatus = ConnectionState.DISCONNECTED;\r\n    this._connect(0, null);\r\n  }\r\n\r\n  _nativePostMessage(message)\r\n  {\r\n    try\r\n    {\r\n      this._port.postMessage(message);\r\n      return true;\r\n    }\r\n    catch (exception)\r\n    {\r\n      if (chrome.runtime.lastError)\r\n      {\r\n        this._log(logType.Err, `Post message failed with last Error ${chrome.runtime.lastError.message}`);\r\n      }\r\n\r\n      this._logException(exception);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  _postMessageInternal(message, callback = null)\r\n  {\r\n    message.id = this._incrementCallbackId();\r\n\r\n    if (this._forwardExtensionId !== null)\r\n    {\r\n      message.nativeConnectionString = this.nativeConnectionString;\r\n      chrome.runtime.sendMessage(this._forwardExtensionId, message, (response) =>\r\n      {\r\n        if (chrome.runtime.lastError)\r\n        {\r\n          return;\r\n        }\r\n\r\n        if (callback !== null)\r\n        {\r\n          callback(response);\r\n        }\r\n      });\r\n    }\r\n    else // This is connecting to native directly\r\n    {\r\n      if (this._port === null) return;\r\n\r\n      // If callback is specified the caller is expecting a response so append message id\r\n      if (callback !== null)\r\n      {\r\n        this._nativeCallbackMap.set(message.id, callback); // Callback function mapped to callback id to fire response\r\n      }\r\n\r\n      this._nativePostMessage(message);\r\n    }\r\n  }\r\n\r\n  getConnectedExtensions()\r\n  {\r\n    return this._connectedExtensions;\r\n  }\r\n\r\n  isConnected()\r\n  {\r\n    return this._connectedToExtension || this._connectedToNative;\r\n  }\r\n\r\n  isConnectedToExtensionIndex(index)\r\n  {\r\n    return this._forwardExtensionId === this.extensions[index];\r\n  }\r\n\r\n  postMessage(message, callback = null)\r\n  {\r\n    try\r\n    {\r\n      // If request type is null or is reserved then return false\r\n      if (\r\n        message === null ||\r\n        message.request_type === null ||\r\n        message.request_type === NativeMessages.Handshake ||\r\n        message.request_type === NativeMessages.HighPriorityAlive ||\r\n        message.request_type === NativeMessages.Ping\r\n      )\r\n      {\r\n        return false;\r\n      }\r\n\r\n      // If the message has to be forwarded to another extension then do so\r\n      this._postMessageInternal(message, callback);\r\n      return true;\r\n    }\r\n    catch (exception)\r\n    {\r\n      this._logException(exception);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","/* eslint-disable camelcase */\r\n// c++ is sending in snakecase, change to camel case here later\r\n\r\n// Background\r\nimport { BuildSettings, BrowserType } from '@extension/common/constants';\r\nimport WhitelistWrapper from '@extension/background/whitelist_wrapper';\r\nimport NativeSetValues from '@extension/background/dispatchers/native/native_set_values';\r\nimport FeatureStats from '@extension/background/feature_stats';\r\nimport BackgroundUtils from '@extension/background/background_utils';\r\nimport NativeGenericRequest from '@extension/background/dispatchers/native/native_generic_request';\r\nimport { NativeConstants, SETTINGS_TYPE, SCOPE } from '@extension/background/dispatchers/native/native_settings';\r\nimport FeatureSettings from '@extension/background/feature_settings';\r\n// Common\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport { extension } from '@extension/common/webextension';\r\nimport { CacheStorageVariables, LocalStorageVariables } from '@extension/common/cache_store_variables';\r\nimport BackgroundCommon from '@extension/common/background_common';\r\nimport { SocialMediaAllTypes } from '@extension/common/sma_variables';\r\nimport ExternalExtensions from '@extension/common/external_extensions';\r\nimport { Logger } from '@extension/common/logger';\r\nimport MTIInitializer from '@extension/background/mti_initializer';\r\n\r\nimport SmartNativeClient from '@mcafee/browser-host/smartnativeclient';\r\n\r\nconst ExtensionCommands = {\r\n  GET_VALUES_RESPONSE: 0,\r\n  EXECUTE_COMMAND: 1,\r\n  REDIRECT_URL: 3,\r\n  REFRESH: 4,\r\n  RESTART: 5,\r\n  LOGMSG: 6,\r\n  HANDSHAKE_GREETING: 8,\r\n  EXTENSION_STATE_RESPONSE: 9,\r\n  GENERIC_NATIVE_REQUEST: 12,\r\n  DOWNLOAD_SCAN_RESULT: 13,\r\n  DELETE_FILE_RESULT: 14\r\n};\r\n\r\nexport const NativeCommands = {\r\n  GET_VALUES: 0,\r\n  SET_VALUES: 1,\r\n  EXECUTE_COMMAND: 2,\r\n  LOG_MSG: 6,\r\n  ON_DOWNLOAD_FINISHED: 7,\r\n  HANDSHAKE_GREETING: 9,\r\n  GET_EXTENSION_STATUS: 12,\r\n  INSTALL_EXTENSION: 13,\r\n  TELEMETRY: 14,\r\n  EXTENSION_STATUS_UPDATE: 15,\r\n  AUTO_PLAY_VIDEO_SITE: 16,\r\n  GET_CACHE_REQUEST: 18,\r\n  ADD_CACHE_REQUEST: 19,\r\n  SHOULD_SHOW_TOAST: 20,\r\n  MFW_REQUEST: 21,\r\n  DOWNLOAD_SCANNING_DELETE_FILE: 22,\r\n  SHOW_TOAST: 23,\r\n  EFFICACY_DETAILS: 25,\r\n  SUBSCRIBER_INFO_REQUEST: 26,\r\n};\r\n\r\n// Native settings\r\nconst { INT, BOOL, STRING } = SETTINGS_TYPE;\r\nconst { SYSTEM } = SCOPE;\r\nconst {\r\n  SMA_ANNOTATION_OPTIONS,\r\n  SMA_USER_TOGGLE,\r\n  BROWSER_TYPE,\r\n  USER_AGENT,\r\n  EXTENSION_VERSION_CH,\r\n  EXTENSION_VERSION_ED,\r\n  EXTENSION_VERSION_FF,\r\n  ANNOTATION_JOURNEY_COHORT\r\n} = BackgroundGlobals.nativeSettings;\r\n\r\n/**\r\n * Dispatcher class handling all communication between extension and native.\r\n * Both extension and native maintain a persistent connection.\r\n */\r\nexport default class NativeMessageDispatcherV1\r\n{\r\n  constructor()\r\n  {\r\n    this.browserStartSent = false;\r\n    this.nativeClient = null;\r\n    this.portNames = ['webadvisor.mcafee.chrome.extension', 'siteadvisor.mcafee.chrome.extension'];\r\n    this.portIndex = 0;\r\n    this.port = null;\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  sendInitialSettings()\r\n  {\r\n    const browserMap = {\r\n      [BrowserType.CHROME]: EXTENSION_VERSION_CH.name,\r\n      [BrowserType.FIREFOX]: EXTENSION_VERSION_FF.name,\r\n      [BrowserType.EDGE]: EXTENSION_VERSION_ED.name,\r\n    };\r\n\r\n    const settings = new NativeSetValues(this);\r\n    settings.add(BROWSER_TYPE.name, BackgroundGlobals.browserType.toString(), SYSTEM, STRING);\r\n    settings.add(USER_AGENT.name, navigator.userAgent, SYSTEM, STRING);\r\n    settings.add(browserMap[BackgroundGlobals.browserType], BuildSettings.EXTENSION_VERSION.toString(), SYSTEM, STRING);\r\n    settings.send();\r\n\r\n    // Update native settings with what is in browser local storage\r\n    const cacheStorage = BackgroundGlobals.cacheStore;\r\n    const updateNativeSettings = async () =>\r\n    {\r\n      try\r\n      {\r\n        const userToggleOption = cacheStorage.get(LocalStorageVariables.SMA_USER_TOGGLE.name, true);\r\n        const smaOption = cacheStorage.get(LocalStorageVariables.SMA_ANNOTATION_OPTIONS.name, SocialMediaAllTypes);\r\n\r\n        const updateSettings = new NativeSetValues(this);\r\n        updateSettings.add(SMA_USER_TOGGLE.name, userToggleOption, SYSTEM, BOOL);\r\n        updateSettings.add(SMA_ANNOTATION_OPTIONS.name, smaOption, SYSTEM, INT);\r\n        updateSettings.send();\r\n      }\r\n      catch (error)\r\n      {\r\n        Logger.error(`updateNativeSettings error: ${error}`);\r\n      }\r\n    };\r\n\r\n    updateNativeSettings();\r\n  }\r\n\r\n  toNativeSettingNames()\r\n  {\r\n    const map = new Map();\r\n    const bkNativeSettingNames = Object.getOwnPropertyNames(BackgroundGlobals.nativeSettings);\r\n    bkNativeSettingNames.forEach((name) =>\r\n    {\r\n      map.set(BackgroundGlobals.nativeSettings[name].name, name);\r\n    });\r\n    return map;\r\n  }\r\n\r\n  /**\r\n   * Update BackgroundGlobals Settings\r\n   */\r\n  updateBackgroundGlobals(settings)\r\n  {\r\n    const names = Object.getOwnPropertyNames(settings);\r\n\r\n    const map = this.toNativeSettingNames();\r\n\r\n    names.forEach((name) =>\r\n    {\r\n      let value = settings[name];\r\n      if (value !== undefined)\r\n      {\r\n        const actualName = map.get(name);\r\n        if (actualName !== undefined) // Check whether the property exists\r\n        {\r\n          const nativeObj = BackgroundGlobals.nativeSettings[actualName];\r\n          if (nativeObj.preprocess !== undefined) // If there is a pre-processing of values\r\n          {\r\n            value = nativeObj.preprocess(value);\r\n          }\r\n          nativeObj.value = value;\r\n        }\r\n      }\r\n    });\r\n\r\n    if (ANNOTATION_JOURNEY_COHORT.value !== 0)\r\n    {\r\n      const ajAPSEnable = BackgroundGlobals.cacheStore.get(LocalStorageVariables.AJ_APS_ENABLE.name, null);\r\n      if (ajAPSEnable !== null)\r\n      {\r\n        BackgroundGlobals.nativeSettings.APS_COHORT.value = ajAPSEnable;\r\n      }\r\n    }\r\n\r\n    BackgroundGlobals.updatedByNative = true;\r\n  }\r\n\r\n  /**\r\n   * Handle the response of get Settings\r\n   */\r\n  handleNativeSettings(settings)\r\n  {\r\n    // Set BackgroundGlobal feature flags\r\n    this.updateBackgroundGlobals(settings);\r\n\r\n    // If HTI is supposed to be initialized it will be done from the init call based\r\n    // on the flags and values retrieved from native.\r\n    MTIInitializer.init();\r\n\r\n    // Setup features based on Native settings\r\n    FeatureSettings.setupFeatures();\r\n\r\n    // Populate feature statistics from native counters\r\n    const { USER_NATIVE_STATS } = LocalStorageVariables;\r\n    const useNativeStats = BackgroundGlobals.cacheStore.get(USER_NATIVE_STATS.name, true);\r\n    if (useNativeStats)\r\n    {\r\n      FeatureStats.init();\r\n      BackgroundGlobals.cacheStore.set(USER_NATIVE_STATS.name, false);\r\n    }\r\n\r\n    // Save AFFID value from native to localstorage and update extension telemetry context\r\n    const { WA_AFFID } = LocalStorageVariables;\r\n    BackgroundGlobals.cacheStore.set(WA_AFFID.name, BackgroundGlobals.nativeSettings.AFF_ID.value);\r\n    BackgroundGlobals.telemetryEngine.updateContext('affid', BackgroundGlobals.nativeSettings.AFF_ID.value);\r\n\r\n    // Populate whitelist from native cache\r\n    this.cacheWhitelist(BackgroundGlobals.nativeSettings.BLOCKPAGE_WHITELIST.value, BackgroundGlobals.nativeSettings.TS_WHITELIST.value);\r\n  }\r\n\r\n  /**\r\n   * Grab the app settings from native then initialize the background globals.\r\n   */\r\n  async getInitialSettings()\r\n  {\r\n    const jsettings = Object.values(BackgroundGlobals.nativeSettings).filter((setting) => setting.writeOnly !== true);\r\n    const response = await this.getValues(jsettings);\r\n    this.handleNativeSettings(response);\r\n  }\r\n\r\n  connectToPort()\r\n  {\r\n    if (this.portIndex >= this.portNames.length)\r\n    {\r\n      // If we failed to connect to Native, then we use the default values\r\n      // from our extension to initialize the features\r\n      FeatureSettings.setupFeatures();\r\n      BackgroundGlobals.isNativeConnected = false;\r\n      const task = BackgroundGlobals.scheduleManager.getTask(LocalStorageVariables.TELEMETRY_HEARTBEAT_TASK.name);\r\n      if (task !== null)\r\n      {\r\n        task.enabled = true;\r\n      }\r\n\r\n      // Failed to connect to native so setting background globals and extension telemetry affid value to the one from local storage\r\n      const localStorageAffidValue = BackgroundGlobals.cacheStore.get(LocalStorageVariables.WA_AFFID.name, 0);\r\n      BackgroundGlobals.nativeSettings.AFF_ID.value = localStorageAffidValue;\r\n      BackgroundGlobals.telemetryEngine.updateContext('affid', localStorageAffidValue);\r\n\r\n      // Ask schedule manager to recalculate\r\n      BackgroundGlobals.scheduleManager.reinit();\r\n      return;\r\n    }\r\n\r\n    const application = this.portNames[this.portIndex++];\r\n    Logger.log(`Connecting to native host ${application}`);\r\n\r\n    /**\r\n     * When external extension or native disconnected from long-lived connection\r\n     */\r\n    const onDisconnectEvent = (port) =>\r\n    {\r\n      if (port.error)\r\n      {\r\n        Logger.warn(`Error connecting to native host or external extension: ${port.error.message}`);\r\n      }\r\n      this.connectToPort();\r\n    };\r\n\r\n    /**\r\n     * Incoming messages from native\r\n     * @returns {Boolean} Return false to disallow forwarding of message to other extensions\r\n     */\r\n    const onNativeMessage = (message) =>\r\n    {\r\n      this.processMessage(message);\r\n      return false;\r\n    };\r\n\r\n    const onConnectHandler = (currentExtId, requestedExtId) =>\r\n    {\r\n      if (currentExtId === ExternalExtensions.get('ChromeWebAdvisorExtension') && requestedExtId === ExternalExtensions.get('EdgeWebAdvisorExtension'))\r\n      {\r\n        chrome.management.uninstallSelf();\r\n      }\r\n    };\r\n\r\n    // regex: seperate the each setting with '|'\r\n    const handshakeSettings = { setting_subscription_regex: `\\\\${BackgroundGlobals.nativeSettings.DOWNLOADS_BLOCKED.name}|\\\\${BackgroundGlobals.nativeSettings.ANNOTATION_JOURNEY_TOAST.name}` };\r\n    this.nativeClient = new SmartNativeClient(application, null, onNativeMessage, onDisconnectEvent, Logger, handshakeSettings, onConnectHandler);\r\n    this.nativeClient.init((status) =>\r\n    {\r\n      if (!status.connected)\r\n      {\r\n        Logger.error(`Failed to connect to native host ${application}`);\r\n        this.connectToPort();\r\n      }\r\n      else\r\n      {\r\n        // Once established connection after that, if it's disconnected then it should retry all port again\r\n        this.portIndex = 0;\r\n\r\n        this.sendInitialSettings();\r\n\r\n        this.getSubscriberInfo().then((wssEmail) =>\r\n        {\r\n          BackgroundGlobals.cacheStore.set(CacheStorageVariables.WSS_EMAIL.name, wssEmail.toLowerCase());\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize the dispatcher class, setting up the event listeners and initializing setting variables\r\n   * @param {Object} port - Runtime port object\r\n   * @param {String} initialMessage - TODO: Comment\r\n   */\r\n  init()\r\n  {\r\n    try\r\n    {\r\n      this.connectToPort();\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(e.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add whiltelisting of mcafee domains\r\n   */\r\n  autoPlayVideoSite(msg)\r\n  {\r\n    this.nativeClient.postMessage(msg);\r\n  }\r\n\r\n  /**\r\n   * Obtain the whitelisted urls from native. The urls that were whitelisted earlier are stored in native and require\r\n   * the extension to send a request to obtain this information. The whitelisted information obtained are globally stored.\r\n   */\r\n  cacheWhitelist(blockPageArray, typosquatArray)\r\n  {\r\n    const { BLOCK_PAGE_WHITELIST, TYPOSQUATTING_WHITELIST, WHITELIST_FLAG } = LocalStorageVariables;\r\n    const whiteListFlag = BackgroundGlobals.cacheStore.get(WHITELIST_FLAG.name);\r\n\r\n    if (whiteListFlag) return;\r\n\r\n    const blockPageWhitelist = blockPageArray !== undefined ? blockPageArray.split(';') : [];\r\n    const typosquatWhitelist = typosquatArray !== undefined ? typosquatArray.split(';') : [];\r\n\r\n    // cache items into local storage\r\n    WhitelistWrapper.addDomainsToWhitelist(blockPageWhitelist, BLOCK_PAGE_WHITELIST.name);\r\n    WhitelistWrapper.addDomainsToWhitelist(typosquatWhitelist, TYPOSQUATTING_WHITELIST.name);\r\n    BackgroundGlobals.cacheStore.set(WHITELIST_FLAG.name, true);\r\n  }\r\n\r\n  /**\r\n   * Obtain the extension status from the native app.\r\n   * @param {Object}   extension_id - Destructured property referring to the extension id\r\n   * @param {Function} onExtStatusRetrievedCb - Invoke after recieving information from the native app\r\n   */\r\n  getExtensionStatus({ extension_id }, onExtStatusRetrievedCb)\r\n  {\r\n    if (!ExternalExtensions.isWhiteListed(extension_id))\r\n    {\r\n      return;\r\n    }\r\n\r\n    const message = {\r\n      request_type: NativeCommands.GET_EXTENSION_STATUS,\r\n      payload: { extension_id }\r\n    };\r\n\r\n    this.nativeClient.postMessage(message, (response) =>\r\n    {\r\n      const { payload } = response;\r\n\r\n      if (typeof onExtStatusRetrievedCb === 'function')\r\n      {\r\n        onExtStatusRetrievedCb(payload.extension_state);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Push logged messages to the native app to log.\r\n   * @param {Object} logDetails - Log details information\r\n   */\r\n  logger(details)\r\n  {\r\n    try\r\n    {\r\n      const {\r\n        browserType,\r\n        extensionType,\r\n        logLevel,\r\n        message,\r\n        processType\r\n      } = details;\r\n\r\n      const postMessage = {\r\n        request_type: NativeCommands.LOG_MSG,\r\n        id: 0,\r\n        payload: {\r\n          process_type: processType,\r\n          browser_type: browserType,\r\n          extension_type: extensionType,\r\n          log_level: logLevel,\r\n          msg: message\r\n        }\r\n      };\r\n\r\n      this.nativeClient.postMessage(postMessage);\r\n    }\r\n    catch (error)\r\n    {\r\n      Logger.setNativeLogging(false);\r\n      Logger.error(`Failed to log with details: ${JSON.stringify(details)}. Exception: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The values retrieved from native after the first initial communication step.\r\n   * @param {Object} payload - The payload retrieved from the native app\r\n   */\r\n  handleNativeHandshake(payload)\r\n  {\r\n    // Settings related responses from native\r\n    const { settings } = payload;\r\n\r\n    if (!settings)\r\n    {\r\n      return;\r\n    }\r\n\r\n    // Set logger to native logger if needed\r\n    const useNativeLogger = settings[NativeConstants.USE_NATIVE_LOGGER];\r\n\r\n    if (useNativeLogger)\r\n    {\r\n      Logger.setNativeLogging(true);\r\n    }\r\n\r\n    BackgroundGlobals.AUTO_PLAY_NOTIFICATION_ENABLED = settings[NativeConstants.WEBBOOST_AUTO_PLAY_NOTIFICATION] || false;\r\n\r\n    // Update browser with native settings\r\n    this.getInitialSettings();\r\n\r\n    this.getNativeCache();\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  SetXYViewport(xView, yView)\r\n  {\r\n    const args = { X: xView, Y: yView };\r\n    BackgroundGlobals.ffViewports = args;\r\n\r\n    if (this.browserStartSent)\r\n    {\r\n      return;\r\n    }\r\n\r\n    this.executeCommand({ command_id: 0, args });\r\n    this.browserStartSent = true;\r\n  }\r\n\r\n  /**\r\n   * Messages being sent from native to the extension.\r\n   * @param {Object} payload - eg. [{\"request_type\": \"action\", \"name\": \"ss_toast\", \"value\": <JSON string>}]\r\n   */\r\n  genericNativeRequest(payload)\r\n  {\r\n    const genericRequest = new NativeGenericRequest(this);\r\n    genericRequest.processMessage(payload);\r\n  }\r\n\r\n  /**\r\n   * Parse the incoming JSON serialized message from the native app.\r\n   * @param {Object} nativeMessage - JSON serialized object which was sent from native\r\n   */\r\n  processInwardMessage(nativeMessage)\r\n  {\r\n    const { payload, request_type } = nativeMessage;\r\n    const commandName = Object.keys(ExtensionCommands).find((key) => ExtensionCommands[key] === request_type);\r\n    Logger.log(`Processing message from binary: ${request_type} (${commandName})\\n${JSON.stringify(payload)}`);\r\n\r\n    switch (request_type)\r\n    {\r\n      case ExtensionCommands.HANDSHAKE_GREETING:\r\n        this.handleNativeHandshake(payload);\r\n        break;\r\n      case ExtensionCommands.RESTART:\r\n        extension.runtime.reload();\r\n        break;\r\n      case ExtensionCommands.GENERIC_NATIVE_REQUEST:\r\n        this.genericNativeRequest(payload);\r\n        break;\r\n      case ExtensionCommands.REDIRECT_URL:\r\n      {\r\n        const { redirect_url } = payload;\r\n        if (redirect_url && BackgroundCommon.isPropertRedirectUrl(redirect_url)) BackgroundUtils.focusOrCreateTab(redirect_url);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the default behaviour for messages being returned or captured by the \"onMessage\" event listener.\r\n   * @param {Object} nativeResponse - JSON serialized object containing information send from the native app\r\n   */\r\n  processMessage(nativeResponse)\r\n  {\r\n    const message = JSON.stringify(nativeResponse);\r\n\r\n    if (!('request_type' in nativeResponse && 'id' in nativeResponse && 'payload' in nativeResponse))\r\n    {\r\n      Logger.log(`Invalid native json message: ${message} `);\r\n      return;\r\n    }\r\n\r\n    try\r\n    {\r\n      this.processInwardMessage(nativeResponse);\r\n    }\r\n    catch (error)\r\n    {\r\n      Logger.log(`Native json message may be missing some keys: ${message} + ${error.message} `);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the fields on the database settings used by the native app.\r\n   * @param {Object} settings - The fields to set in the db\r\n   */\r\n  setValues(settings)\r\n  {\r\n    this.nativeClient.postMessage({\r\n      request_type: NativeCommands.SET_VALUES,\r\n      payload: {\r\n        VERB: 'set-setting',\r\n        PAYLOAD: settings\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Obtain the values that are stored in the db by the native app.\r\n   * @param {Object} getList - Payload specifying the information to be retrieved from the native\r\n   */\r\n  getValues(getList)\r\n  {\r\n    const messageOptions = {\r\n      request_type: NativeCommands.GET_VALUES,\r\n      payload: {\r\n        VERB: 'get-setting',\r\n        PAYLOAD: getList\r\n      }\r\n    };\r\n\r\n    const postMessage = (resolve) =>\r\n    {\r\n      this.nativeClient.postMessage(messageOptions, (jsonMsg) =>\r\n      {\r\n        const { response } = jsonMsg.payload;\r\n        const responseObject = {};\r\n        if (!Array.isArray(response))\r\n        {\r\n          resolve(responseObject);\r\n          return;\r\n        }\r\n\r\n        for (const item of response)\r\n        {\r\n          if (item.name !== undefined && item.value !== undefined)\r\n          {\r\n            responseObject[item.name] = item.value;\r\n          }\r\n        }\r\n\r\n        resolve(responseObject);\r\n      });\r\n    };\r\n\r\n    return new Promise(postMessage);\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  onDownloadFinished(msg)\r\n  {\r\n    this.nativeClient.postMessage(msg);\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  executeCommand({ command_id, args })\r\n  {\r\n    this.nativeClient.postMessage({\r\n      request_type: NativeCommands.EXECUTE_COMMAND,\r\n      id: 0,\r\n      payload: {\r\n        command_id,\r\n        args\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  installExtension(extension_id, redirectUrl)\r\n  {\r\n    this.nativeClient.postMessage({\r\n      request_type: NativeCommands.INSTALL_EXTENSION,\r\n      id: 0,\r\n      payload: {\r\n        extension_id,\r\n        redirect_url: redirectUrl,\r\n      }\r\n    });\r\n  }\r\n\r\n  postMessage(message)\r\n  {\r\n    this.nativeClient.postMessage(message);\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  sendTelemetry(message)\r\n  {\r\n    if (!BackgroundCommon.isPersonalPolicyEnabled() || !BackgroundCommon.isActivityPolicyEnabled())\r\n    {\r\n      return;\r\n    }\r\n\r\n    this.nativeClient.postMessage(message);\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  extensionStatusUpdate({ extensionId })\r\n  {\r\n    this.nativeClient.postMessage({\r\n      request_type: NativeCommands.EXTENSION_STATUS_UPDATE,\r\n      id: 0,\r\n      payload: {\r\n        extension_id: extensionId\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  getNativeCache(lastUrl = '')\r\n  {\r\n    const messageOptions = {\r\n      request_type: NativeCommands.GET_CACHE_REQUEST,\r\n      payload: {\r\n        last_url: lastUrl\r\n      }\r\n    };\r\n\r\n    this.nativeClient.postMessage(messageOptions, (response) =>\r\n    {\r\n      try\r\n      {\r\n        if (!response || !response.payload)\r\n        {\r\n          Logger.warn('Native Client response payload is empty for GET_CACHE_REQUEST');\r\n          return;\r\n        }\r\n\r\n        const resultArray = JSON.parse(response.payload);\r\n\r\n        if (!Array.isArray(resultArray) || resultArray.length !== 1)\r\n        {\r\n          return;\r\n        }\r\n\r\n        const responseElement = resultArray[0].a;\r\n\r\n        if (!responseElement || !Array.isArray(responseElement) || responseElement.length === 0)\r\n        {\r\n          return;\r\n        }\r\n\r\n        let nextUrl = '';\r\n\r\n        for (const cacheItem of responseElement)\r\n        {\r\n          nextUrl = cacheItem.url;\r\n          delete cacheItem.url;\r\n\r\n          if (!BackgroundGlobals.mtiRequestor.setReputation(nextUrl, cacheItem))\r\n          {\r\n            // Cache reached maximum size, no point adding\r\n            return;\r\n          }\r\n        }\r\n\r\n        this.getNativeCache(nextUrl);\r\n      }\r\n      catch (e)\r\n      {\r\n        Logger.error(`Exception in getNativeCache: ${e.message}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Send cache data to the native app.\r\n   * @param {String} gtiString - Cache information\r\n   */\r\n  pushCacheToNative(gtiString)\r\n  {\r\n    const messageOptions = {\r\n      request_type: NativeCommands.ADD_CACHE_REQUEST,\r\n      payload: {\r\n        cache_data: gtiString\r\n      }\r\n    };\r\n\r\n    this.nativeClient.postMessage(messageOptions);\r\n  }\r\n\r\n  getSubscriberInfo(product, attribute)\r\n  {\r\n    const payload = {};\r\n    if (product)// if null - vso (virus scan) will be used\r\n    {\r\n      payload.product = product;\r\n    }\r\n\r\n    if (attribute)// if null - e_mail will be used\r\n    {\r\n      payload.attribute = attribute;\r\n    }\r\n\r\n    const messageOptions = {\r\n      request_type: NativeCommands.SUBSCRIBER_INFO_REQUEST,\r\n      payload\r\n    };\r\n\r\n    const postMessage = (resolve) =>\r\n    {\r\n      this.nativeClient.postMessage(messageOptions, (response) =>\r\n      {\r\n        // response = {\r\n        // id,\r\n        // payload: {valid, value, error_message},\r\n        // request_type\r\n        // }\r\n        if (!response || !response.payload || !response.payload.valid)\r\n        {\r\n          const err = response.payload ? response.payload.error_message : 'unknown_error';\r\n          Logger.warn(`[native_message_dispatcher] Error retrieving WSS Subscriber information, error: ${err}`);\r\n          resolve('');\r\n        }\r\n\r\n        resolve(response.payload.value);\r\n      });\r\n    };\r\n\r\n    return new Promise(postMessage);\r\n  }\r\n\r\n  onTabClose()\r\n  {\r\n    const payload = {\r\n      name: 'event_on_tab_close',\r\n      data: {}\r\n    };\r\n\r\n    this.nativeClient.postMessage({\r\n      request_type: NativeCommands.MFW_REQUEST,\r\n      payload\r\n    });\r\n  }\r\n\r\n  mfwResetNativeSettings()\r\n  {\r\n    const payload = {\r\n      name: 'event_on_reset_settings',\r\n      data: {}\r\n    };\r\n\r\n    this.nativeClient.postMessage({\r\n      request_type: NativeCommands.MFW_REQUEST,\r\n      payload\r\n    });\r\n  }\r\n}\r\n","export const ANNOTATION_OPTIONS = {\r\n  none: 'NONE',\r\n  onlySecureSearch: 'ONLY_SECURE_SEARCH',\r\n  all: 'ALL'\r\n};\r\n\r\nexport const SEARCH_ANNOTATION_ACTIONS = {\r\n  get: 'GET',\r\n  set: 'SET',\r\n};\r\n\r\n// DO NOT CHANGE the number for the search engine types\r\n// Some of these numbers are mapped to native's search providers\r\nexport const SEARCH_ENGINE_TYPES = {\r\n  UNKNOWN: 0,\r\n  // Search engine annotations\r\n  GOOGLE: 1,\r\n  YAHOO: 2,\r\n  AOL: 3,\r\n  ASK: 4,\r\n  UOL: 5,\r\n  GOO: 6,\r\n  MYWAY: 7,\r\n  TERRA: 8,\r\n  WEB: 9,\r\n  BIGLOBE: 10,\r\n  GMX: 11,\r\n  EXCITE: 12,\r\n  SKY: 13,\r\n  NAVER: 14,\r\n  NIFTY: 15,\r\n  RAKUTEN: 16,\r\n  IXQUICK: 17,\r\n  XFINITY: 18,\r\n  SOGOU: 19,\r\n  DOGPILE: 20,\r\n  SEARCH: 21,\r\n  WEBCRAWLER: 22,\r\n  BING: 23,\r\n  INFO: 24,\r\n  YANDEX: 25,\r\n  YIPPY: 26, // No longer supported\r\n  WOW: 27,\r\n  HAOSO: 28,\r\n  DUCKDUCKGO: 30,\r\n  // Social media annotations\r\n  LINKEDIN: 100,\r\n  FACEBOOK: 101,\r\n  YOUTUBE: 102,\r\n  INSTAGRAM: 103,\r\n  REDDIT: 104,\r\n  TWITTER: 105,\r\n};\r\n\r\nexport const EngineType = {\r\n  SEARCH: 0,\r\n  SOCIALMEDIA: 1,\r\n};\r\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport SearchEngine from '@core-engine/search_engine';\r\nimport { ANNOTATION_OPTIONS } from '@mcafee/wa-annotations/Annotation/annotation_variables';\r\nimport { ContentCommands } from '@extension/common/commands';\r\nimport InjectBase from '@extension/background/content_injector/inject_base';\r\nimport { SocialMediaTypes } from '@extension/common/sma_variables';\r\n\r\nexport default class InjectAnnotation extends InjectBase\r\n{\r\n  constructor({ url, data })\r\n  {\r\n    super('content_annotation.js');\r\n    this.url = url;\r\n    this.data = data;\r\n    this.pingCommand = ContentCommands.PING_CONTENT_ANNOTATION;\r\n  }\r\n\r\n  check()\r\n  {\r\n    const { sma, searchAnnotationOption } = this.data;\r\n    const { socialMediaToggle, socialMediaOption } = sma;\r\n    const searchEngine = new SearchEngine(BackgroundGlobals.searchEngines, socialMediaToggle, socialMediaOption, BackgroundGlobals.nativeSettings.SECURE_SEARCH_REGEXES);\r\n    const engine = searchEngine.getEngineForUrl(this.url);\r\n\r\n    // If annotations have to be displayed then check whether the page is part of our engines\r\n    if (!engine)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    // Handle scenario when the site is of an SMA site\r\n    if (engine.socialMediaType)\r\n    {\r\n      if (socialMediaToggle && socialMediaOption !== SocialMediaTypes.NONE && engine.enabled)\r\n      {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    // Handle scenario when the site is of a search engine site\r\n    const { all, onlySecureSearch } = ANNOTATION_OPTIONS;\r\n    // Inject if annotations have to be displayed for all search engine\r\n    if (searchAnnotationOption === all)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    // If has to show only for secure search and if engine is secure search then also inject\r\n    if (searchAnnotationOption === onlySecureSearch && engine.issecuresearch)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { LocalStorageVariables } from '@extension/common/cache_store_variables';\r\n\r\nexport const WhitelistTypes = {\r\n  BLOCK_PAGE: 'BLOCK_PAGE',\r\n  CRYPTOJACKING: 'CRYPTOJACKING',\r\n  TYPOSQUATTING: 'TYPOSQUATTING',\r\n  IFRAME: 'IFRAME',\r\n  RAT_DETECTION: 'RAT_DETECTION'\r\n};\r\n\r\nexport const WhitelistStoreMappings = {\r\n  BLOCK_PAGE: LocalStorageVariables.BLOCK_PAGE_WHITELIST.name,\r\n  CRYPTOJACKING: LocalStorageVariables.CRYPTO_WHITELIST.name,\r\n  TYPOSQUATTING: LocalStorageVariables.TYPOSQUATTING_WHITELIST.name,\r\n  IFRAME: LocalStorageVariables.BLOCK_PAGE_WHITELIST.name,\r\n  RAT_DETECTION: LocalStorageVariables.RAT_DETECTION_WHITELIST.name\r\n};\r\n\r\nexport const WhitelistActions = {\r\n  ADD: 'ADD',\r\n  GET: 'GET',\r\n  REMOVE: 'REMOVE',\r\n  CLEAR: 'CLEAR',\r\n};\r\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport UrlParser from '@extension/common/url_parser';\r\nimport { CacheStorageVariables } from '@extension/common/cache_store_variables';\r\nimport { WhitelistActions, WhitelistTypes } from '@extension/common/whitelist_variables';\r\n\r\nimport BackgroundCommon from '@extension/common/background_common';\r\nimport { ContentCommands } from '@extension/common/commands';\r\nimport { Logger } from '@extension/common/logger';\r\nimport InjectBase from '@extension/background/content_injector/inject_base';\r\n\r\nexport default class InjectRATDetection extends InjectBase\r\n{\r\n  constructor({ url, tabId, categories })\r\n  {\r\n    super('content_rat_detection.js');\r\n    this.url = url;\r\n    this.domain = UrlParser.getDomain(this.url);\r\n    this.tabId = tabId;\r\n    this.categories = categories;\r\n    this.nativeSettings = BackgroundGlobals.nativeSettings;\r\n    this.pingCommand = ContentCommands.PING_CONTENT_RAT_DETECTION;\r\n    this.ratBlacklist = BackgroundGlobals.ratBlacklist;\r\n  }\r\n\r\n  check()\r\n  {\r\n    const { RAT_DETECTION_ENABLED } = this.nativeSettings;\r\n    if (!RAT_DETECTION_ENABLED.value)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    // not proper URL or SiteAdvisor URL: not show\r\n    if (!BackgroundCommon.isProperWebURL(this.url) || BackgroundCommon.isSiteAdvisorUrl(this.url))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    // inside a same tab and a same domain that already showed once: not show\r\n    const domainVisited = this.getDomainVisitedDetails(this.tabId);\r\n    if (domainVisited === this.domain)\r\n    {\r\n      return false;\r\n    }\r\n    this.updateRatDetectionShowingFlag(false);\r\n\r\n    // inside RAT Whitelist: not show\r\n    const whitelist = BackgroundGlobals.messageDispatcher.whitelistNoCallback(WhitelistActions.GET, WhitelistTypes.RAT_DETECTION, {});\r\n    if (!Array.isArray(whitelist))\r\n    {\r\n      Logger.error('Invalid RAT whitelist from background cache storage');\r\n      return false;\r\n    }\r\n\r\n    if (this.isDomainWhitelisted(whitelist, this.domain))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    // inside RAT Blacklist: show\r\n    for (const site of this.ratBlacklist)\r\n    {\r\n      if (site.domain === this.domain)\r\n      {\r\n        if (site.urls.length === 0)\r\n        {\r\n          return true;\r\n        }\r\n\r\n        if (site.urls.includes(UrlParser.getCleanURI(this.url)))\r\n        {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // ignore if page does not have any GTI categories\r\n    if (!this.categories)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (!Array.isArray(this.categories))\r\n    {\r\n      Logger.error('invalid category result from GTI response');\r\n      return false;\r\n    }\r\n\r\n    // Check if it contains the 'remote access' category\r\n    return this.categories.includes('ra');\r\n  }\r\n\r\n  isDomainWhitelisted(whitelistedList, domain)\r\n  {\r\n    for (let index = 0; index < whitelistedList.length; index++)\r\n    {\r\n      const whitelistItem = whitelistedList[index];\r\n      if (whitelistItem.includes(domain) || domain.includes(whitelistItem))\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getDomainVisitedDetails()\r\n  {\r\n    let response = '';\r\n    const storeVariables = CacheStorageVariables.RAT_DETECTION_SHOWING.name;\r\n    const allTabDomains = BackgroundGlobals.cacheStore.get(storeVariables);\r\n\r\n    if (!allTabDomains)\r\n    {\r\n      return response;\r\n    }\r\n\r\n    response = allTabDomains[this.tabId] || response;\r\n    return response;\r\n  }\r\n\r\n  updateRatDetectionShowingFlag(showed)\r\n  {\r\n    const storeVariables = CacheStorageVariables.RAT_DETECTION_SHOWING.name;\r\n    const allTabDomains = BackgroundGlobals.cacheStore.get(storeVariables) || {};\r\n    let currentTabDomain = allTabDomains[this.tabId] || '';\r\n\r\n    if (showed && this.domain)\r\n    {\r\n      currentTabDomain = this.domain;\r\n    }\r\n    else\r\n    {\r\n      currentTabDomain = '';\r\n    }\r\n\r\n    allTabDomains[this.tabId] = currentTabDomain;\r\n    BackgroundGlobals.cacheStore.set(storeVariables, allTabDomains);\r\n  }\r\n}\r\n","// Background\r\nimport { ContentCommands } from '@extension/common/commands';\r\nimport InjectBase from '@extension/background/content_injector/inject_base';\r\n\r\nexport default class InjectIframeBanner extends InjectBase\r\n{\r\n  constructor()\r\n  {\r\n    super('content_iframe_banner.js');\r\n    this.pingCommand = ContentCommands.PING_CONTENT_IFRAME_BANNER;\r\n  }\r\n}\r\n","// Background\r\nimport { ContentCommands } from '@extension/common/commands';\r\nimport InjectBase from '@extension/background/content_injector/inject_base';\r\n\r\nexport default class InjectIframeBlock extends InjectBase\r\n{\r\n  constructor()\r\n  {\r\n    super('iframe_block.js');\r\n    this.pingCommand = ContentCommands.PING_IFRAME_BLOCK;\r\n  }\r\n}\r\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport { ContentCommands } from '@extension/common/commands';\r\nimport InjectBase from '@extension/background/content_injector/inject_base';\r\n\r\nexport default class InjectAutoPlayDetection extends InjectBase\r\n{\r\n  constructor()\r\n  {\r\n    super('content_autoplay_detection.js');\r\n    this.pingCommand = ContentCommands.PING_CONTENT_AUTOPLAY_DETECTION;\r\n  }\r\n\r\n  check()\r\n  {\r\n    return BackgroundGlobals.AUTO_PLAY_NOTIFICATION_ENABLED;\r\n  }\r\n}\r\n","// Background\r\nimport { ContentCommands } from '@extension/common/commands';\r\nimport InjectBase from '@extension/background/content_injector/inject_base';\r\nimport Utils from '@extension/utilities/utils';\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\n\r\nexport default class InjectFormCheck extends InjectBase\r\n{\r\n  constructor()\r\n  {\r\n    super('iframe_form_check.js');\r\n    this.pingCommand = ContentCommands.PING_IFRAME_FORM_CHECK;\r\n  }\r\n\r\n  check()\r\n  {\r\n    const { IDPS_FEATURE_ENABLED, APS_COHORT } = BackgroundGlobals.nativeSettings;\r\n    const idpsFeatureEnabled = BackgroundGlobals.IDPS_IS_ENTITLED && IDPS_FEATURE_ENABLED.value === 2;\r\n\r\n    const isSupported = Utils.isChromeBrowser() && Utils.isBrowserEN();\r\n    if (idpsFeatureEnabled && isSupported)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (APS_COHORT.value > 0 && Utils.isChromeBrowser())\r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","// Background\r\nimport { ContentCommands } from '@extension/common/commands';\r\nimport InjectBase from '@extension/background/content_injector/inject_base';\r\nimport Utils from '@extension/utilities/utils';\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\n\r\nexport default class InjectFormDetection extends InjectBase\r\n{\r\n  constructor()\r\n  {\r\n    super('iframe_form_detection.js');\r\n    this.pingCommand = ContentCommands.PING_IFRAME_FORM_DETECTION;\r\n  }\r\n\r\n  check()\r\n  {\r\n    const { IDPS_FEATURE_ENABLED, APS_COHORT } = BackgroundGlobals.nativeSettings;\r\n    const idpsFeatureEnabled = BackgroundGlobals.IDPS_IS_ENTITLED && IDPS_FEATURE_ENABLED.value === 2;\r\n\r\n    const isSupported = Utils.isChromeBrowser() && Utils.isBrowserEN();\r\n    if (idpsFeatureEnabled && isSupported)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    if (APS_COHORT.value > 0 && Utils.isChromeBrowser())\r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","// Background\r\nimport { ContentCommands } from '@extension/common/commands';\r\nimport InjectBase from '@extension/background/content_injector/inject_base';\r\nimport Utils, { digestMessage } from '@extension/utilities/utils';\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport { CacheStorageVariables, LocalStorageVariables } from '@extension/common/cache_store_variables';\r\nimport { Logger } from '@extension/common/logger';\r\n\r\nexport default class InjectIDPS extends InjectBase\r\n{\r\n  constructor({ tabId })\r\n  {\r\n    super('content_idps.js');\r\n    this.tabId = tabId;\r\n    this.pingCommand = ContentCommands.PING_CONTENT_IDPS;\r\n    this.email = null;\r\n  }\r\n\r\n  async check()\r\n  {\r\n    const { IDPS_FEATURE_ENABLED } = BackgroundGlobals.nativeSettings;\r\n    const idpsFeatureEnabled = BackgroundGlobals.IDPS_IS_ENTITLED && IDPS_FEATURE_ENABLED.value === 2;\r\n\r\n    const isSupported = Utils.isChromeBrowser() && Utils.isBrowserEN();\r\n    if (!idpsFeatureEnabled || !isSupported)\r\n    {\r\n      Logger.debug('InjectIDPS: not supported/enabled.');\r\n      return false;\r\n    }\r\n\r\n    this.email = BackgroundGlobals.cacheStore.get(CacheStorageVariables.WSS_EMAIL.name, '');\r\n    if (!this.email)\r\n    {\r\n      Logger.debug('InjectIDPS: Invalid email.');\r\n      return false;\r\n    }\r\n\r\n    const whitelisted = await this.isDWSWhitelisted(this.email);\r\n    if (whitelisted)\r\n    {\r\n      Logger.debug('InjectIDPS: Whitelisted email.');\r\n      return false;\r\n    }\r\n\r\n    // You have to sign into a page using the same email as the one used for your wss subscription, in order for this toast to show.\r\n    const formInfoCache = this.getFormInfo(this.tabId);\r\n    if (!formInfoCache || !this.email || this.email.toLowerCase() !== formInfoCache.username.toLowerCase())\r\n    {\r\n      Logger.debug('InjectIDPS: Invalid formCache or mismatch email.');\r\n      formInfoCache && this.removeFormInfo(this.tabId);\r\n      return false;\r\n    }\r\n\r\n    const dwsInfo = this.getCachedDWSInfo(this.email);\r\n    // If dwsInfo is null, this is the first time and no data is yet available\r\n    // so we can proceed to show the IDPS UI, if not null we need to verify some values\r\n    if (dwsInfo !== null)\r\n    {\r\n      if (dwsInfo.shownCount >= 3)\r\n      {\r\n        Logger.debug('InjectIDPS: shownCount exceeded.');\r\n        return false;\r\n      }\r\n\r\n      // 24 hours must elapse for balloon to show subsequent times (first time shown omits this check)\r\n      const has24HoursElapsed = this.has24HoursElapsed(dwsInfo);\r\n      if (!has24HoursElapsed)\r\n      {\r\n        Logger.debug('InjectIDPS: 24 hours not yet ellapsed.');\r\n        return false;\r\n      }\r\n    }\r\n\r\n    Logger.debug('InjectIDPS: success.');\r\n    return true;\r\n  }\r\n\r\n  async isDWSWhitelisted(email)\r\n  {\r\n    const hash = await digestMessage(email);\r\n    const whitelist = BackgroundGlobals.cacheStore.get(LocalStorageVariables.DWS_WHITELIST.name, []);\r\n    return whitelist.includes(hash);\r\n  }\r\n\r\n  getCachedDWSInfo(email)\r\n  {\r\n    const cache = BackgroundGlobals.cacheStore.get(LocalStorageVariables.DWS_INFO.name, {});\r\n    return cache[email] || null;\r\n  }\r\n\r\n  getFormInfo(tabId)\r\n  {\r\n    const cache = BackgroundGlobals.cacheStore.get(CacheStorageVariables.FORM_INFO.name, {});\r\n    return cache[tabId] || null;\r\n  }\r\n\r\n  removeFormInfo(tabId)\r\n  {\r\n    const cache = BackgroundGlobals.cacheStore.get(CacheStorageVariables.FORM_INFO.name, {});\r\n    const updatedCache = { ...cache };\r\n\r\n    if (!updatedCache[tabId]) return;\r\n    delete updatedCache[tabId];\r\n\r\n    BackgroundGlobals.cacheStore.set(CacheStorageVariables.FORM_INFO.name, updatedCache);\r\n  }\r\n\r\n  has24HoursElapsed(info)\r\n  {\r\n    // Check if it has been 24h since last time we show the offer for that email.\r\n    // Only check if the email has not been scanned before.\r\n    const { lastShown } = info;\r\n    if (lastShown)\r\n    {\r\n      const oneDayInMiliseconds = 1000 * 3600 * 24;\r\n      const now = new Date().getTime();\r\n\r\n      if (now < (lastShown + oneDayInMiliseconds))\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import { extension } from '@extension/common/webextension';\r\nimport UIStrings from '@extension/utilities/ui_strings';\r\nimport { EventNames } from '@extension/telemetry/common_telemetry';\r\nimport ContextTelemetry from '@extension/telemetry/context_telemetry';\r\nimport UIContentUtils from '@extension/utilities/ui_content_utils';\r\nimport { Logger } from '@extension/common/logger';\r\nimport { Globals } from '@core-engine/globals';\r\n\r\nconst BALLOON_STATE = {\r\n  COLLAPSE: 'COLLAPSE',\r\n  EXPAND: 'EXPAND',\r\n  CLOSE: 'CLOSE',\r\n};\r\n\r\nexport const BALLOON_TRIGGER_TYPE = {\r\n  FINANCIAL: 'FINANCIAL',\r\n  EMAIL: 'EMAIL',\r\n  ECOMMERCE: 'ECOMMERCE',\r\n  SIGNUP: 'SIGNUP',\r\n};\r\n\r\nexport default class AdvancedProtectionSignal\r\n{\r\n  constructor(data, container)\r\n  {\r\n    this.data = data;\r\n    this.container = container; // ShadowDomContainer\r\n    this.strConvertor = new UIStrings(null, this.container.shadowRoot);\r\n\r\n    // Details\r\n    this.triggerType = data.triggerType && data.triggerType.toLowerCase();\r\n    this.color = data.rating && data.rating.toLowerCase();\r\n    this.sequence = 2;\r\n\r\n    // Common Selectors\r\n    this.shield = this.container.querySelector('.shield');\r\n    this.shieldImage = this.container.querySelector('.shield > img');\r\n    this.signalExpanded = this.container.querySelector('.signal--expanded');\r\n\r\n    // Shield Animation\r\n    this.autoExpandedByTimer = false;\r\n    this.autoCollapseTimer = null;\r\n    this.shieldAnimation = null;\r\n    this.onFinishAnimation = this.onFinishAnimation.bind(this);\r\n\r\n    // telemetry\r\n    this.telemetryBalloonSent = false;\r\n    this.telemetryHoverSent = false;\r\n\r\n    // balloon text\r\n    this.balloonText = null;\r\n  }\r\n\r\n  async init()\r\n  {\r\n    if (!this.triggerType || !this.color)\r\n    {\r\n      Logger.warn('APS Balloon init: triggerType/color not provided');\r\n      return;\r\n    }\r\n\r\n    // Initialize Font on document\r\n    await UIContentUtils.initFontOnDocument();\r\n\r\n    const configureStyles = (color, imageSrc, locale) =>\r\n    {\r\n      const { waImageSecret } = this.data;\r\n      this.shield.style.backgroundColor = color;\r\n      this.signalExpanded.style.backgroundColor = color;\r\n\r\n      this.container.querySelector('.rating-image').src = extension.runtime.getURL(`${imageSrc}?secret=${waImageSecret}`);\r\n      this.container.querySelector('#expanded-text').textContent = this.strConvertor.localeData(locale);\r\n      this.balloonText = this.strConvertor.localeData(locale);\r\n    };\r\n\r\n    switch (this.data.rating)\r\n    {\r\n      case 'GREEN':\r\n        {\r\n          const GREEN = '#0a7155';\r\n          configureStyles(GREEN, 'images/advanced_protection_signals/checkmark_aps_signal.svg', `aps_expanded_shield_site_${this.triggerType.toLowerCase()}`);\r\n        }\r\n        break;\r\n      case 'GREY':\r\n        {\r\n          const GREY = '#848FAA';\r\n          configureStyles(GREY, 'images/advanced_protection_signals/question-mark.svg', 'aps_expanded_shield_site_unknown');\r\n        }\r\n        break;\r\n      default:\r\n        throw new Error('Site rating was not provided...');\r\n    }\r\n\r\n    let height = '96px';\r\n    let width = '378px';\r\n    if (this.balloonText && this.balloonText.length > 86)\r\n    {\r\n      height = '120px';\r\n      width = '430px';\r\n      this.container.query('.signal--expanded').width('370px');\r\n    }\r\n\r\n    const animationInfo = {\r\n      properties: [{ width, height }],\r\n      timing: { fill: 'both', duration: 1000, easing: 'ease-in-out', }\r\n    };\r\n\r\n    // Create animation and add listeners for mouse events\r\n    this.shieldAnimation = new Animation('shield', this.shield, animationInfo);\r\n    this.shieldAnimation.createAnimation(this.onFinishAnimation);\r\n    this.initAnimationListener();\r\n\r\n    // Show component on the page\r\n    this.container.showContainer();\r\n\r\n    this.shieldAnimation.startTimeout(); // Initialize auto close timer\r\n\r\n    // If we are to show the full message, we will set a timer to open the\r\n    // full message after 1 seconds, then we will set a time to auto collapse\r\n    // the BubbleSignal. Note that the \"startTimeout\" set above, will be stopped\r\n    // through the expandBubbleSignal() > enter() function\r\n    if (this.data.fullMessage)\r\n    {\r\n      this.sequence = 1;\r\n\r\n      setTimeout(() =>\r\n      {\r\n        // Send telemetry full message impression\r\n        this.options = {\r\n          identifier: EventNames.APS.IMPRESSION_BALLOON,\r\n          sequence: this.sequence,\r\n          trigger: this.triggerType,\r\n          color: this.color,\r\n        };\r\n        ContextTelemetry.handle(this.options);\r\n\r\n        this.autoExpandedByTimer = true;\r\n        // initialize timer (will stop when calling expandBubbleSignal)\r\n        this.expandBubbleSignal();\r\n\r\n        // Start 3 seconds countdown to close balloon\r\n        this.autoCollapseTimer = setTimeout(() =>\r\n        {\r\n          this.collapseBubbleSignal(true);\r\n        }, 5000);\r\n      }, 1000);\r\n    }\r\n    else\r\n    {\r\n      // Send telemetry full message impression\r\n      this.options = {\r\n        identifier: EventNames.APS.IMPRESSION_BALLOON,\r\n        sequence: this.sequence,\r\n        trigger: this.triggerType,\r\n        color: this.color,\r\n      };\r\n      ContextTelemetry.handle(this.options);\r\n    }\r\n  }\r\n\r\n  onFinishAnimation(state)\r\n  {\r\n    if (state === BALLOON_STATE.EXPAND)\r\n    {\r\n      this.signalExpanded.style.opacity = 1;\r\n    }\r\n\r\n    if (state === BALLOON_STATE.CLOSE)\r\n    {\r\n      UIContentUtils.fadeOut(this.shield, () =>\r\n      {\r\n        this.container.closeContainer();\r\n      });\r\n    }\r\n  }\r\n\r\n  initAnimationListener()\r\n  {\r\n    this.shield.addEventListener('mouseenter', () =>\r\n    {\r\n      // Send Telemetry once for on Hover\r\n      if (!this.telemetryHoverSent)\r\n      {\r\n        this.options = {\r\n          identifier: EventNames.APS.IMPRESSION_HOVER,\r\n          sequence: this.sequence,\r\n          trigger: this.triggerType,\r\n          color: this.color,\r\n        };\r\n        ContextTelemetry.handle(this.options);\r\n        this.telemetryHoverSent = true;\r\n      }\r\n\r\n      // If the user clicked on the X to close, we can ignore any other request and close the UI\r\n      if (this.shieldAnimation.isClosing())\r\n      {\r\n        return;\r\n      }\r\n\r\n      // Ignore expanding balloon since it already expanded by the auto timer\r\n      if (this.autoExpandedByTimer)\r\n      {\r\n        this.autoExpandedByTimer = false; // reset so user can leave and enter the shield\r\n        if (this.autoCollapseTimer !== null)\r\n        {\r\n          // Since user enter the balloon we can stop the auto close balloon timer\r\n          clearTimeout(this.autoCollapseTimer);\r\n        }\r\n        return;\r\n      }\r\n\r\n      this.expandBubbleSignal();\r\n    });\r\n\r\n    this.shield.addEventListener('mouseleave', () =>\r\n    {\r\n      if (this.shieldAnimation.isClosing())\r\n      {\r\n        return;\r\n      }\r\n\r\n      this.collapseBubbleSignal(false);\r\n    });\r\n\r\n    // Add listener to remove the component (shown on expanded view)\r\n    this.container.querySelector('#aps-close-icon').addEventListener('click', () =>\r\n    {\r\n      // Telemetry on close click\r\n      this.options = {\r\n        identifier: EventNames.APS.CLOSE_BALLOON,\r\n        sequence: this.sequence,\r\n        trigger: this.triggerType,\r\n        color: this.color,\r\n      };\r\n      ContextTelemetry.handle(this.options);\r\n\r\n      this.collapseBubbleSignal(true);\r\n    });\r\n  }\r\n\r\n  // common on collapse bubble function\r\n  collapseBubbleSignal(close)\r\n  {\r\n    this.shieldAnimation.pause();\r\n    this.signalExpanded.style.opacity = 0;\r\n    setTimeout(() =>\r\n    {\r\n      this.shieldImage.style.opacity = 1;\r\n      this.shieldAnimation.leave(close);\r\n    }, 200);\r\n  }\r\n\r\n  expandBubbleSignal()\r\n  {\r\n    this.shieldAnimation.pause();\r\n    this.shieldImage.style.opacity = 0;\r\n    this.shieldAnimation.enter();\r\n  }\r\n}\r\n\r\n// HELPER CLASS : Create bubble Animation\r\nclass Animation\r\n{\r\n  constructor(name, element, options)\r\n  {\r\n    this.options = options;\r\n    this.element = element;\r\n    this.name = name;\r\n    this.state = BALLOON_STATE.COLLAPSE;\r\n\r\n    // timer for auto close\r\n    this.timer = null;\r\n    this.onAnimationFinish = null;\r\n  }\r\n\r\n  createAnimation(onAnimationFinish = null)\r\n  {\r\n    if (onAnimationFinish)\r\n    {\r\n      this.onAnimationFinish = onAnimationFinish;\r\n    }\r\n\r\n    this.animation = this.element.animate(this.options.properties, this.options.timing);\r\n    this.animation.pause();\r\n    this.animation.onfinish = () =>\r\n    {\r\n      onAnimationFinish && onAnimationFinish(this.state);\r\n    };\r\n  }\r\n\r\n  pause()\r\n  {\r\n    if (this.animation.playState === 'running') this.animation.pause();\r\n  }\r\n\r\n  isClosing()\r\n  {\r\n    return this.state === BALLOON_STATE.CLOSE;\r\n  }\r\n\r\n  enter()\r\n  {\r\n    this.stopTimeout();\r\n    this.state = BALLOON_STATE.EXPAND;\r\n    this.runForwards();\r\n  }\r\n\r\n  leave(close)\r\n  {\r\n    if (!close && this.timer !== null)\r\n    {\r\n      this.startTimeout();\r\n    }\r\n\r\n    this.state = close ? BALLOON_STATE.CLOSE : BALLOON_STATE.COLLAPSE;\r\n    this.runReverse();\r\n  }\r\n\r\n  runReverse()\r\n  {\r\n    this.animation.playbackRate = -1;\r\n    this.animation.play();\r\n  }\r\n\r\n  runForwards()\r\n  {\r\n    this.animation.playbackRate = 1;\r\n    this.animation.play();\r\n  }\r\n\r\n  stopTimeout()\r\n  {\r\n    if (this.timer !== null)\r\n    {\r\n      clearTimeout(this.timer);\r\n    }\r\n  }\r\n\r\n  startTimeout()\r\n  {\r\n    if (this.timer !== null)\r\n    {\r\n      clearTimeout(this.timer);\r\n    }\r\n\r\n    this.timer = setTimeout(() =>\r\n    {\r\n      this.onAnimationFinish(BALLOON_STATE.CLOSE);\r\n    }, Globals.bkGlobals.apsAnimationTimeout);\r\n  }\r\n}\r\n","// Background\r\nimport { ContentCommands } from '@extension/common/commands';\r\nimport InjectBase from '@extension/background/content_injector/inject_base';\r\nimport Utils from '@extension/utilities/utils';\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport BackgroundCommon from '@extension/common/background_common';\r\nimport { CacheStorageVariables, LocalStorageVariables } from '@extension/common/cache_store_variables';\r\nimport { BALLOON_TRIGGER_TYPE } from '@extension/ui/balloon_message/advanced_protection_signal';\r\nimport UrlParser from '@extension/common/url_parser';\r\nimport { Color } from '@extension/common/constants';\r\nimport { Logger } from '@extension/common/logger';\r\n\r\nexport default class InjectAPSBalloon extends InjectBase\r\n{\r\n  constructor({\r\n    url, tabId, categories, color, isSignUp\r\n  })\r\n  {\r\n    super('content_aps_balloon.js');\r\n    this.pingCommand = ContentCommands.PING_CONTENT_APS_BALLOON;\r\n    this.url = url;\r\n    this.color = color;\r\n    this.tabId = tabId;\r\n    this.categories = categories;\r\n    this.isSignUp = false;\r\n    this.ratBlacklist = BackgroundGlobals.ratBlacklist;\r\n    this.domain = UrlParser.getDomain(this.url);\r\n\r\n    // set locally\r\n    this.balloonTriggerType = null;\r\n    this.apsEmailLinkIndexFound = -1;\r\n\r\n    // This is to handle request for Sign up page\r\n    // Triggered by the form detection sign up page observer\r\n    if (isSignUp)\r\n    {\r\n      this.isSignUp = true;\r\n      this.balloonTriggerType = BALLOON_TRIGGER_TYPE.SIGNUP;\r\n    }\r\n  }\r\n\r\n  check()\r\n  {\r\n    const apsToggleSetting = BackgroundGlobals.cacheStore.get(LocalStorageVariables.APS_TOGGLE_SETTING.name, true);\r\n    if (!apsToggleSetting)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    // Url Check\r\n    if (!BackgroundCommon.isProperWebURL(this.url) || BackgroundCommon.isSiteAdvisorUrl(this.url))\r\n    {\r\n      Logger.log(`InjectAPSBalloon: return false - not proper url ${this.url}`);\r\n      return false;\r\n    }\r\n\r\n    const { APS_COHORT, SS_DEF } = BackgroundGlobals.nativeSettings;\r\n    const isSupported = Utils.isChromeBrowser();\r\n    if (APS_COHORT.value === 0 || !isSupported)\r\n    {\r\n      Logger.log('InjectAPSBalloon: return false - feature not supported');\r\n      return false;\r\n    }\r\n\r\n    if (SS_DEF.value !== 1)\r\n    {\r\n      Logger.log('InjectAPSBalloon: return false - SS off');\r\n      return false;\r\n    }\r\n\r\n    if (this.isRemoteAccessSite())\r\n    {\r\n      Logger.log('InjectAPSBalloon: return false - remote access site');\r\n      return false;\r\n    }\r\n\r\n    // Check if color is green or grey\r\n    if (this.color !== Color.GREEN && this.color !== Color.UNKNOWN)\r\n    {\r\n      Logger.log('InjectAPSBalloon: return false - invalid color');\r\n      return false;\r\n    }\r\n\r\n    if (!this.isShoppingSite(this.url) && !this.isFinancialSite(this.categories) && !this.isPageRedirectedFromEmail(this.url) && !this.isSignUp)\r\n    {\r\n      Logger.log(`InjectAPSBalloon: return false - not supported aps site ${this.url}`);\r\n      return false;\r\n    }\r\n\r\n    this.saveAPSDetails(this.tabId, this.color, this.url, this.balloonTriggerType);\r\n    Logger.log(`InjectAPSBalloon: return true tabId : ${this.tabId} , ${this.url}`);\r\n    return true;\r\n  }\r\n\r\n  isRemoteAccessSite()\r\n  {\r\n    // check if category is Remote Access site\r\n    if (this.categories.includes('ra'))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    // inside RAT Blacklist: show\r\n    for (const site of this.ratBlacklist)\r\n    {\r\n      if (site.domain === this.domain)\r\n      {\r\n        if (site.urls.length === 0)\r\n        {\r\n          return true;\r\n        }\r\n\r\n        if (site.urls.includes(UrlParser.getCleanURI(this.url)))\r\n        {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // Handle shopping sites\r\n  isShoppingSite(url)\r\n  {\r\n    const urlObject = new URL(url);\r\n    const apsShoppingList = BackgroundGlobals.apsUrlList.shopping;\r\n    const shoppingObjectKeys = Object.keys(apsShoppingList);\r\n\r\n    if (shoppingObjectKeys.includes(urlObject.hostname))\r\n    {\r\n      const siteAPSPaths = apsShoppingList[urlObject.hostname].paths;\r\n      const pathFound = siteAPSPaths.find((path) => urlObject.pathname.includes(path));\r\n      if (pathFound)\r\n      {\r\n        this.balloonTriggerType = BALLOON_TRIGGER_TYPE.ECOMMERCE;\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Handle Financial Site\r\n  isFinancialSite(categories)\r\n  {\r\n    if (categories.includes('fi'))\r\n    {\r\n      this.balloonTriggerType = BALLOON_TRIGGER_TYPE.FINANCIAL;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // Handle Pages redirected from email pages\r\n  isPageRedirectedFromEmail(url)\r\n  {\r\n    // Check the array of domains to see if the\r\n    // site provided is part of the array\r\n    const apsEmailLinks = BackgroundGlobals.cacheStore.get(CacheStorageVariables.APS_EMAIL_LINKS.name, []);\r\n    for (let index = 0; index < apsEmailLinks.length; index++)\r\n    {\r\n      const domain = apsEmailLinks[index].split('www.').pop();\r\n      if (url.includes(domain) || domain.includes(url))\r\n      {\r\n        this.balloonTriggerType = BALLOON_TRIGGER_TYPE.EMAIL;\r\n        this.apsEmailLinkIndexFound = index;\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  runAfter(success)\r\n  {\r\n    if (!success)\r\n    {\r\n      return;\r\n    }\r\n\r\n    if (this.balloonTriggerType === BALLOON_TRIGGER_TYPE.EMAIL)\r\n    {\r\n      // Remove the url from the APS email link\r\n      const apsEmailLinks = BackgroundGlobals.cacheStore.get(CacheStorageVariables.APS_EMAIL_LINKS.name, []);\r\n      apsEmailLinks.splice(this.apsEmailLinkIndexFound, 1);\r\n      BackgroundGlobals.cacheStore.set(CacheStorageVariables.APS_EMAIL_LINKS.name, apsEmailLinks);\r\n    }\r\n  }\r\n\r\n  saveAPSDetails(tabId, color, uri, triggerType)\r\n  {\r\n    const apsInfo = { rating: 'GREY', fullMsgShown: true, triggerType };\r\n\r\n    // Check if this has been shown previously\r\n    const domain = UrlParser.getDomain(uri);\r\n    const apsDomainsShownFM = BackgroundGlobals.cacheStore.get(LocalStorageVariables.APS_FULL_MSG_SHOWN_ARRAY.name, []);\r\n    const fullMsgShown = apsDomainsShownFM.includes(domain);\r\n\r\n    // find which balloon should be displayed (full or minimized)\r\n    if (!fullMsgShown)\r\n    {\r\n      apsInfo.fullMsgShown = false;\r\n      apsDomainsShownFM.push(domain);\r\n      BackgroundGlobals.cacheStore.set(LocalStorageVariables.APS_FULL_MSG_SHOWN_ARRAY.name, apsDomainsShownFM);\r\n    }\r\n    // Allocate appropriate rating\r\n    if (color === Color.GREEN)\r\n    {\r\n      apsInfo.rating = 'GREEN';\r\n    }\r\n    // Save this details into the tabdata to be retrieved later by the content script\r\n    BackgroundGlobals.tabData.update(tabId, { url: uri, apsDetails: apsInfo });\r\n  }\r\n}\r\n","import { ContentCommands } from '@extension/common/commands';\r\nimport InjectBase from '@extension/background/content_injector/inject_base';\r\nimport UrlParser from '@extension/common/url_parser';\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\n\r\nexport default class InjectSiteListener extends InjectBase\r\n{\r\n  constructor({ url })\r\n  {\r\n    super('content_site_listener.js');\r\n    this.url = url;\r\n    this.pingCommand = ContentCommands.PING_CONTENT_SITE_LISTENER;\r\n  }\r\n\r\n  check()\r\n  {\r\n    const domain = UrlParser.getDomain(this.url);\r\n    return BackgroundGlobals.SUPPORTED_WEBSITE_LIST.includes(domain);\r\n  }\r\n}\r\n","// Background\r\nimport { ContentCommands } from '@extension/common/commands';\r\nimport InjectBase from '@extension/background/content_injector/inject_base';\r\nimport Utils from '@extension/utilities/utils';\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport SearchEngine from '@core-engine/search_engine';\r\nimport { LocalStorageVariables } from '@extension/common/cache_store_variables';\r\n\r\nexport default class InjectAPSToast extends InjectBase\r\n{\r\n  constructor({ url })\r\n  {\r\n    super('content_aps_toast.js');\r\n    this.pingCommand = ContentCommands.PING_CONTENT_APS_TOAST;\r\n    this.url = url;\r\n  }\r\n\r\n  check()\r\n  {\r\n    const apsToggleSetting = BackgroundGlobals.cacheStore.get(LocalStorageVariables.APS_TOGGLE_SETTING.name, true);\r\n    if (!apsToggleSetting)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { APS_COHORT } = BackgroundGlobals.nativeSettings;\r\n    const isSupported = Utils.isChromeBrowser();\r\n    if (APS_COHORT.value === 0 || !isSupported)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const searchEngine = new SearchEngine(BackgroundGlobals.searchEngines, null, null, BackgroundGlobals.nativeSettings.SECURE_SEARCH_REGEXES);\r\n    const engine = searchEngine.getEngineForUrl(this.url);\r\n    const isSSEngine = engine && engine.issecuresearch;\r\n    if (!isSSEngine)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    // Check if this is the first time showing the APS toast\r\n    const apsToastFirstTime = BackgroundGlobals.cacheStore.get(LocalStorageVariables.APS_TOAST_FIRST_TIME.name, true);\r\n    if (!apsToastFirstTime)\r\n    {\r\n      // Return as the toast has been shown previously\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  runAfter(success)\r\n  {\r\n    if (!success)\r\n    {\r\n      return;\r\n    }\r\n\r\n    // Update Global Native settings SS_DEF set to 1\r\n    BackgroundGlobals.nativeSettings.SS_DEF.value = 1;\r\n\r\n    // Update first time variable\r\n    BackgroundGlobals.cacheStore.set(LocalStorageVariables.APS_TOAST_FIRST_TIME.name, false);\r\n  }\r\n}\r\n","// Background\r\nimport { ContentCommands } from '@extension/common/commands';\r\nimport InjectBase from '@extension/background/content_injector/inject_base';\r\nimport Utils from '@extension/utilities/utils';\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport BackgroundCommon from '@extension/common/background_common';\r\nimport { LocalStorageVariables } from '@extension/common/cache_store_variables';\r\n\r\nexport default class InjectAPSObserver extends InjectBase\r\n{\r\n  constructor({ url })\r\n  {\r\n    super('content_aps_observer.js');\r\n    this.pingCommand = ContentCommands.PING_CONTENT_APS_OBSERVER;\r\n    this.url = url;\r\n  }\r\n\r\n  check()\r\n  {\r\n    const apsToggleSetting = BackgroundGlobals.cacheStore.get(LocalStorageVariables.APS_TOGGLE_SETTING.name, true);\r\n    if (!apsToggleSetting)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    // Url Check\r\n    if (!BackgroundCommon.isProperWebURL(this.url) || BackgroundCommon.isSiteAdvisorUrl(this.url))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    const { APS_COHORT, SS_DEF } = BackgroundGlobals.nativeSettings;\r\n    const isSupported = Utils.isChromeBrowser();\r\n    if (APS_COHORT.value === 0 || !isSupported)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (SS_DEF.value !== 1)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    if (this.isSupportedEmail(this.url))\r\n    {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  // If url matches an email we will create a mutation observer\r\n  // Gmail re-renders the dom element on demand, therefore we need to observe for changes\r\n  isSupportedEmail(url)\r\n  {\r\n    const apsEmailList = BackgroundGlobals.apsUrlList.email;\r\n    const emailObjectKeys = Object.keys(apsEmailList);\r\n\r\n    const emailUrl = emailObjectKeys.find((emailUrl) => url.includes(emailUrl));\r\n\r\n    return emailUrl;\r\n  }\r\n}\r\n","import { BackgroundGlobals } from '@extension/background/background_globals';\nimport BrowserAction from '@extension/background/browser_action';\nimport WhitelistWrapper from '@extension/background/whitelist_wrapper';\nimport Typosquatting from '@extension/background/typosquatting';\nimport BackgroundCommon from '@extension/common/background_common';\nimport BlockPageCommon from '@extension/background/block_page_common';\n// Common\nimport { LocalStorageVariables } from '@extension/common/cache_store_variables';\nimport SearchEngine from '@core-engine/search_engine';\nimport { extension } from '@extension/common/webextension';\nimport { BlockState, Color, BrowserType, WPSBlockPageType } from '@extension/common/constants';\nimport UrlParser from '@extension/common/url_parser';\nimport FeatureStats, { featureStatsTypes } from '@extension/background/feature_stats';\nimport { EngineType } from '@extension/common/annotation_variables';\nimport { Logger } from '@extension/common/logger';\n// Telemetry\nimport ContextTelemetry from '@extension/telemetry/context_telemetry';\nimport { PageLevel, EventNames } from '@extension/telemetry/common_telemetry';\nimport { NativeCommands } from '@extension/background/dispatchers/native/native_message_dispatcher_v1';\n// Injector\nimport Injector from '@extension/background/content_injector/injector';\nimport InjectAnnotation from '@extension/background/content_injector/inject_annotations';\nimport InjectRATDetection from '@extension/background/content_injector/inject_rat_detection';\nimport InjectIframeBanner from '@extension/background/content_injector/inject_iframe_banner';\nimport InjectIframeBlock from '@extension/background/content_injector/inject_iframe_block';\nimport InjectAutoPlayDetection from '@extension/background/content_injector/inject_autoplay_detection';\nimport InjectFFDownloadOverlay from '@extension/background/content_injector/inject_ff_download_overlay';\nimport InjectFFViewports from '@extension/background/content_injector/inject_ff_viewports';\nimport InjectFormCheck from '@extension/background/content_injector/inject_form_check';\nimport InjectFormDetection from '@extension/background/content_injector/inject_form_detection';\nimport InjectIDPS from '@extension/background/content_injector/inject_idps';\nimport InjectAPSBalloon from '@extension/background/content_injector/inject_aps_balloon';\nimport InjectSiteListener from '@extension/background/content_injector/inject_site_listener';\nimport InjectAPSToast from '@extension/background/content_injector/inject_aps_toast';\nimport InjectAPSObserver from '@extension/background/content_injector/inject_aps_observer';\n\nexport default class WebRequestDispatcher\n{\n  /**\n   * Invoked in the GTI Request and handle the response.\n   * Route the user to the safest destination accordingly.\n   * @param {string} url        - Url being navigated to\n   * @param {number} tabId      - Current tab id\n   * @param {number} frameId    - Frame id if called from an iframe\n   * @param {string} referer    - value of Referer header or undefined\n   */\n  static async onHeadersReceived(url, tabId, frameId, referer)\n  {\n    // Don't check reputation or typosquatting for localhost\n    const domain = UrlParser.getDomain(url);\n    if (domain === 'localhost' && !BackgroundGlobals.ALLOW_LOCALHOST)\n    {\n      return;\n    }\n\n    const results = await WebRequestHelper.toUrlReputation(url, tabId, frameId, referer, false, true);\n    WebRequestHelper.handleUrlReputation(results, url, tabId, frameId, referer);\n  }\n\n  /**\n   * Invoked in the GTI Request and handle the response.\n   * Route the user to the safest destination accordingly.\n   * @param {string} url        - Url being navigated to\n   * @param {number} tabId      - Current tab id\n   * @param {number} frameId    - Frame id if called from an iframe\n   * @param {string} referer    - value of Referer header or undefined\n   */\n  static async onNavigateComplete(url, tabId, frameId)\n  {\n    const isTopFrame = frameId <= 0;\n    if (isTopFrame)\n    {\n      WebRequestHelper.sendRespectiveTelemetry([EventNames.BROWSER_NAVIGATE], { url });\n\n      // Telemetry for Secure Search Hit\n      WebRequestHelper.onSSHitTelemetry(url);\n\n      // On Engine Search trigger\n      WebRequestHelper.onEngineSearch(url);\n\n      // Inject code into top level navigate complete\n      WebRequestDispatcher.handleTopFrameNavigateComplete(url, tabId);\n    }\n    else\n    {\n      const contentToInject = [\n        new InjectAutoPlayDetection(),\n      ];\n\n      // Temporary code to keep current form detection functionality while also\n      // being able to test new form detection optimization.\n      const { IFRAME_FORM_CHECK_ENABLED } = BackgroundGlobals.nativeSettings;\n      contentToInject.push(IFRAME_FORM_CHECK_ENABLED.value ? new InjectFormCheck() : new InjectFormDetection());\n\n      Injector.inject(tabId, contentToInject, frameId);\n    }\n  }\n\n  static async handleTopFrameNavigateComplete(url, tabId)\n  {\n    // if the top frame is a chrome page or chrome extension ignore content script injects, will give errors otherwise\n    if (url.startsWith('chrome')) return;\n\n    if (!BackgroundGlobals.messageDispatcher)\n    {\n      Logger.error('handleTopFrameNavigateComplete: messageDispatcher is invalid.');\n      return;\n    }\n\n    const promises = [];\n    promises.push(new Promise((resolve) => BackgroundGlobals.messageDispatcher.getSettingsData(resolve)));\n    promises.push(BackgroundGlobals.messageDispatcher.getURLReputation(url));\n    const [data, gtiResponse] = await Promise.all(promises);\n    const { color, categories } = gtiResponse;\n\n    // Content Script Inject\n    const contentToInject = [\n      new InjectAnnotation({ url, data }),\n      new InjectAPSToast({ url }),\n      new InjectAPSObserver({ url }),\n      new InjectRATDetection({ url, tabId, categories }),\n      new InjectAutoPlayDetection(),\n      new InjectIDPS({ tabId }),\n      new InjectSiteListener({ url }),\n      new InjectAPSBalloon({ tabId, url, categories, color }),\n    ];\n\n/////////////////////////////////////\n///////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////\n//////////////\n\n    // Temporary code to keep current form detection functionality while also\n    // being able to test new form detection optimization.\n    const { IFRAME_FORM_CHECK_ENABLED } = BackgroundGlobals.nativeSettings;\n    contentToInject.push(IFRAME_FORM_CHECK_ENABLED.value ? new InjectFormCheck() : new InjectFormDetection());\n\n    Injector.inject(tabId, contentToInject);\n  }\n}\n\nexport class WebRequestHelper\n{\n  /**\n   * Get the block state and color for the url passed.\n   * @param {string} url, or object with url and referer - The url being examined\n   * @param {boolean} checkCacheOnly - checkCacheOnly - only get URL reputation from cache and not do an actual HTTP request call\n   * @return {promise} containing reputation data\n   */\n  static async toUrlReputation(originalUrl, tabId, frameId, referer, checkCacheOnly = false)\n  {\n    let url = originalUrl;\n    const isTopFrame = frameId <= 0;\n\n    if (!BackgroundCommon.isProperWebURL(url))\n    {\n      return {\n        color: Color.UNKNOWN,\n        statusOfBlocking: BlockState.UNKNOWN,\n        whitelisted: false\n      };\n    }\n\n    if (BackgroundCommon.isSafeUrl(url))\n    {\n      return {\n        color: Color.GREEN,\n        statusOfBlocking: BlockState.GREEN,\n        whitelisted: false\n      };\n    }\n\n    // Don't check reputation if main frame is a known trusted domain\n    const tabData = BackgroundGlobals.tabData.get(tabId);\n    if (tabData.tabDomainTrusted)\n    {\n      return {\n        color: Color.GREEN,\n        statusOfBlocking: BlockState.GREEN,\n        whitelisted: false\n      };\n    }\n\n    if (BackgroundGlobals.browserType === BrowserType.FIREFOX)\n    {\n      url = BackgroundGlobals.messageDispatcher.removeSearchTermOnEngineUrl(originalUrl);\n    }\n\n    // if is TopFrame, check if tab's domain is trusted, if so update tabData and return GOOD result.\n    if (isTopFrame)\n    {\n      const tabDomain = UrlParser.getDomain(url);\n      const isTrusted = BackgroundGlobals.trustedDomains.has(tabDomain);\n\n      if (isTrusted)\n      {\n        BackgroundGlobals.tabData.update(tabId, { tabDomainTrusted: true });\n        return {\n          color: Color.GREEN,\n          statusOfBlocking: BlockState.GREEN,\n          whitelisted: false\n        };\n      }\n    }\n\n    // Make GTI/HTI reputation request\n    const response = await BackgroundGlobals.messageDispatcher.makeMTIRequest([url], referer, checkCacheOnly);\n    const domain = UrlParser.getDomain(url);\n    const isWhitelisted = WhitelistWrapper.isDomainInWhitelist(domain, LocalStorageVariables.BLOCK_PAGE_WHITELIST.name);\n    let result = {\n      state: BlockState.UNKNOWN,\n      color: Color.UNKNOWN\n    };\n\n    let cat = [];\n    if (response && response.annotationMap)\n    {\n      const annotationDetails = response.annotationMap[url];\n      if (annotationDetails)\n      {\n        result = BackgroundGlobals.messageDispatcher.toBlockState(annotationDetails);\n\n        // Page GTI categories\n        cat = annotationDetails.category || [];\n      }\n      else\n      {\n        Logger.warn('WebRequestHelper makeMTIRequest: annotation details undefined');\n      }\n    }\n\n    // If it is whitelisted or if the page is unknown or good then alone go and check for typosquatting. In otherwords malicious url takes\n    // precedence over typosquatting url. Again if the url is whitelisted and if this is top level page then.\n    if ((isWhitelisted || result.state === BlockState.GREEN || result.state === BlockState.UNKNOWN) && (tabId > 0 && frameId <= 0))\n    {\n      // Check for typosquatting\n      const { whitelisted, domain } = await WebRequestHelper.handleTyposquatting(url);\n      let statusOfBlocking = result.state;\n      let whitelistVal = isWhitelisted; // Top-level url whitelist value (not taken typosquatting into account)\n\n      // If typosquatting then handle it so\n      if (domain !== null)\n      {\n        statusOfBlocking = BlockState.TYPOSQUATTING;\n        whitelistVal = whitelisted; // Use the typosquatting equivalent value\n      }\n\n      return {\n        color: result.color,\n        statusOfBlocking,\n        whitelisted: whitelistVal,\n        typoDomain: domain,\n        categories: cat || []\n      };\n    }\n\n    // If URL is not whitelisted and is malicious then handle it so.\n    return {\n      color: result.color,\n      statusOfBlocking: result.state,\n      whitelisted: isWhitelisted,\n      categories: cat || []\n    };\n  }\n\n  /**\n      * Handle typosquatting call\n      * @param  {string} url - url to check for typosquatting\n      * @return {object} typosquatting data (whitelisted and domain)\n      */\n  static async handleTyposquatting(url)\n  {\n    const ts = new Typosquatting();\n    if (ts.isInWhitelist(UrlParser.getDomain(url)))\n    {\n      BlockPageCommon.sendBlockPageEvent(WPSBlockPageType.Typoquatting, url, url, true);\n      return { whitelisted: true, domain: null };\n    }\n\n    try\n    {\n      const domain = await ts.lookupTypoSquatFromServer(url);\n      return { whitelisted: false, domain };\n    }\n    catch (error)\n    {\n      Logger.error(`handleTyposquatting Error: ${error}`);\n      return { whitelisted: false, domain: null };\n    }\n  }\n\n  static async handleUrlReputation(results, url, tabId, frameId, referer)\n  {\n    const {\n      color = null,\n      statusOfBlocking = null,\n      typoDomain = null,\n      whitelisted,\n      categories = [],\n    } = results;\n\n    const isBlocked = [...BlockState].includes(statusOfBlocking);\n    const isTopFrame = frameId <= 0;\n\n    if (isTopFrame)\n    {\n      WebRequestHelper.increasePageScannedCounter();\n    }\n\n    // We can return early if it's not blocked or whitelisted\n    if (whitelisted || !isBlocked)\n    {\n      if (isTopFrame)\n      {\n        BrowserAction.setIcon(color, tabId);\n        // whitelisted is a normal block page (red/yellow/phishing/typo), does not require the top url\n        if (whitelisted)\n        {\n          BlockPageCommon.checkWhitelistedBlockpage(statusOfBlocking, null, url, true);\n        }\n      }\n      else\n      {\n        // whitelisted is iframe blocker, required the top url\n        if (whitelisted)\n        {\n          BlockPageCommon.checkWhitelistedBlockpage(statusOfBlocking, referer, url, true);\n        }\n      }\n      return;\n    }\n\n    // Add stats if it's blocked\n    FeatureStats.add(featureStatsTypes.PAGES_BLOCKED);\n\n    // For telemetry purposes\n    let pageLevel;\n    const telemetryContext = [];\n\n    if (isTopFrame)\n    {\n      // Telemetry\n      if (statusOfBlocking === BlockState.TYPOSQUATTING)\n      {\n        // Send telemetry for typosquatting page\n        telemetryContext.push(EventNames.TYPOSQUATTING);\n      }\n      else\n      {\n        pageLevel = PageLevel.TOP;\n        telemetryContext.push(EventNames.BLOCK_PAGE);\n      }\n\n      // Navigate to block page URL. If it is typosquatted then typoDomain is a valid string\n      const qUrl = typoDomain !== null ? typoDomain : url;\n      const blockPageStatus = BlockPageCommon.toBlockPageUrl(statusOfBlocking, color, qUrl);\n      BackgroundGlobals.tabData.setTabBlockPageData(tabId, { bState: statusOfBlocking, url: qUrl, categories });\n\n      // If native is not available then always show block page in this scenario.\n      // If the page is not a direct download item then show block page else donot show block page\n      if (!BackgroundGlobals.isNativeConnected || !BackgroundGlobals.downloadUrls.has(url))\n      {\n        // Lets check again to see whether this URL was a top level download URL or not.\n        extension.tabs.update(tabId, { url: blockPageStatus.url });\n      }\n      // Set browser action always for top level page\n      BrowserAction.setIcon(color, tabId);\n      // Send block page event to browserhost\n      // Converts red, yellow, typo, phishing from blockStatus to the appropriate WPS block page type\n      const WPSBlockType = BlockPageCommon.convertWABlockTypeToWPS(statusOfBlocking);\n      BlockPageCommon.sendBlockPageEvent(WPSBlockType, url, url, false);\n    }\n    else\n    {\n      BackgroundGlobals.tabData.addBlockedFrame(tabId, { url, frameId });\n\n      // Inject Iframe block page to iframe page\n      let contentToInject = [new InjectIframeBlock()];\n      Injector.inject(tabId, contentToInject, frameId);\n\n      // Inject Iframe banner to content page\n      contentToInject = [new InjectIframeBanner()];\n      Injector.inject(tabId, contentToInject);\n\n      pageLevel = PageLevel.FRAME;\n      telemetryContext.push(EventNames.BLOCK_PAGE);\n\n      BlockPageCommon.sendBlockPageEvent(WPSBlockPageType.iFrame, referer, url, false);\n    }\n\n    WebRequestHelper.sendRespectiveTelemetry(telemetryContext, { color, pageLevel, pageStyle: null });\n  }\n\n  static increasePageScannedCounter()\n  {\n    FeatureStats.add(featureStatsTypes.PAGES_SCANNED);\n\n    const options = {\n      identifier: EventNames.WSS_ANALYTICS,\n      message: 'msad.sites.safe',\n      isFromBackground: true\n    };\n\n    ContextTelemetry.handle(options);\n  }\n\n  // Handling SSHit Telemetry\n  static onSSHitTelemetry(url)\n  {\n    if (!BackgroundGlobals.isNativeConnected)\n    {\n      const urlObj = new URL(url);\n      const isYahooSS = urlObj.host.includes('yahoo') && urlObj.searchParams.get('fr') === 'mcafee';\n\n      if (isYahooSS && BackgroundGlobals.telemetryEngine)\n      {\n        BackgroundGlobals.telemetryEngine.sendEvent('wa_secure_search_hit', {\n          hit_label_2: urlObj.searchParams.get('type'),\n        });\n      }\n    }\n  }\n\n  static onEngineSearch(url)\n  {\n    const { searchEngines, nativeSettings } = BackgroundGlobals;\n    const searchEngine = new SearchEngine(searchEngines, null, null, nativeSettings.SECURE_SEARCH_REGEXES);\n    const engine = searchEngine.getEngineForUrl(url);\n    if (engine && engine.enginetype === EngineType.SEARCH)\n    {\n      // On Engine Search trigger Native\n      const { name, issecuresearch } = engine;\n      BackgroundGlobals.messageDispatcher.postMessage({\n        request_type: NativeCommands.MFW_REQUEST,\n        payload: {\n          name: 'event_on_engine_search',\n          data: {\n            engine: name,\n            secure_search: issecuresearch,\n          }\n        }\n      });\n\n      // Trigger NPS Checklist\n//////////////////////////////////////\n      BackgroundGlobals.messageDispatcher.postMessage({\n        request_type: NativeCommands.MFW_REQUEST,\n        payload: {\n          name: 'EVENT_BROWSER_SearchPageNavigate',\n          data: {\n            Url: url\n          }\n        }\n      });\n////////////////\n    }\n  }\n\n  // For handling telemetry\n  static sendRespectiveTelemetry(telemetryContext, attributes)\n  {\n    const options = {\n      isFromBackground: true\n    };\n\n    telemetryContext.forEach((context) =>\n    {\n      switch (context)\n      {\n        case EventNames.BLOCK_PAGE:\n          options.identifier = context;\n          options.colour = attributes.color;\n          options.level = attributes.pageLevel;\n          options.blockPageStyle = attributes.pageStyle;\n          break;\n        case EventNames.TYPOSQUATTING:\n          options.identifier = context;\n          break;\n        case EventNames.BROWSER_NAVIGATE:\n          options.identifier = context;\n          options.url = attributes.url;\n          break;\n        default:\n          break;\n      }\n\n      if (options.identifier)\n      {\n        ContextTelemetry.handle(options);\n      }\n    });\n  }\n}\n","// Background\nimport { BackgroundGlobals } from '@extension/background/background_globals';\nimport WhitelistWrapper from '@extension/background/whitelist_wrapper';\nimport { WebRequestHelper } from '@extension/background/dispatchers/webrequest_dispatcher';\n// Common\nimport { extension } from '@extension/common/webextension';\nimport { ExternalCommands } from '@extension/common/commands';\nimport { LocalStorageVariables, CacheStorageVariables } from '@extension/common/cache_store_variables';\nimport { ListenerTypes } from '@extension/background/listeners/listener_manager';\nimport ExternalExtensions from '@extension/common/external_extensions';\nimport BackgroundCommon from '@extension/common/background_common';\nimport { Logger } from '@extension/common/logger';\n\n/**\n * TODO: Comments\n */\nexport default class ExternalMessageListener\n{\n  init()\n  {\n    extension.runtime.onMessageExternal.addListener((request, sender, sendResponse) =>\n    {\n      if (!BackgroundCommon.isPersonalPolicyEnabled())\n      {\n        return false;\n      }\n\n      if (sender.id === undefined || !ExternalExtensions.isWhiteListed(sender.id))\n      {\n        return false;\n      }\n\n      return this.processMessage(sender.id, request, sendResponse);\n    });\n\n    extension.runtime.onConnectExternal.addListener((port) =>\n    {\n      if (!BackgroundCommon.isPersonalPolicyEnabled())\n      {\n        return;\n      }\n\n      port.postMessage({ waOnBrowser: true });\n    });\n  }\n\n  [ExternalCommands.CLEAN_TYPOSQUATING_WHITELIST](request, sendResponse)\n  {\n    WhitelistWrapper.clearWhitelist(LocalStorageVariables.TYPOSQUATTING_WHITELIST.name);\n    sendResponse({ done: true });\n    return false;\n  }\n\n  [ExternalCommands.CLEAN_CRYPTO_WHITELIST](request, sendResponse)\n  {\n    WhitelistWrapper.clearWhitelist(LocalStorageVariables.CRYPTO_WHITELIST.name);\n    sendResponse({ done: true });\n    return false;\n  }\n\n  [ExternalCommands.CLEAN_RAT_WHITELIST](request, sendResponse)\n  {\n    WhitelistWrapper.clearWhitelist(LocalStorageVariables.RAT_DETECTION_WHITELIST.name);\n    sendResponse({ done: true });\n    return false;\n  }\n\n  [ExternalCommands.CLEAN_RAT_CACHE](request, sendResponse)\n  {\n    BackgroundGlobals.cacheStore.clear(CacheStorageVariables.RAT_DETECTION_SHOWING.name);\n    sendResponse({ done: true });\n    return false;\n  }\n\n  [ExternalCommands.RESET_CRYPTO](request, sendResponse)\n  {\n    const cryptoListener = BackgroundGlobals.listenerManager.getListener(ListenerTypes.CRYPTO);\n    cryptoListener.uninit();\n    cryptoListener.init();\n    sendResponse({ done: true });\n    return false;\n  }\n\n  [ExternalCommands.GET_PROPERTY](request, sendResponse)\n  {\n    const property = BackgroundGlobals[request.payload.name];\n    const ret = {};\n    ret.value = undefined === property ? null : property;\n    sendResponse(ret);\n    return false;\n  }\n\n  [ExternalCommands.CLEAR_GTI_CACHE](request, sendResponse)\n  {\n    BackgroundGlobals.mtiRequestor.clearCache();\n    sendResponse({ done: true });\n    return false;\n  }\n\n  async [ExternalCommands.VERIFY_GTI_REQUEST](request, sendResponse)\n  {\n    const url = request.payload.value;\n    const response = await BackgroundGlobals.messageDispatcher.makeMTIRequest([url], null);\n    const { rep, ufg } = response.annotationMap[url];\n    if (rep !== null && ufg !== null)\n    {\n      sendResponse({ done: true });\n    }\n    else\n    {\n      sendResponse({ done: false });\n    }\n    return true;\n  }\n\n  [ExternalCommands.REPLACE_TRUSTED_DOMAIN](request, sendResponse)\n  {\n    BackgroundGlobals.trustedDomains.clear();\n    BackgroundGlobals.trustedDomains.add(request.payload.value);\n    sendResponse({ done: true });\n    return false;\n  }\n\n  [ExternalCommands.CLEAR_TYPOSQUATING_CACHE](request, sendResponse)\n  {\n    BackgroundGlobals.typoCache.clearEntries();\n    sendResponse({ done: true });\n    return false;\n  }\n\n  async [ExternalCommands.VERIFY_TYPOSQUAT_SERVER](request, sendResponse)\n  {\n    const url = request.payload.value;\n    const { domain } = await WebRequestHelper.handleTyposquatting(url);\n\n    if (domain)\n    {\n      sendResponse({ done: true });\n    }\n    else\n    {\n      sendResponse({ done: false });\n    }\n    return true;\n  }\n\n  [ExternalCommands.SET_PROPERTY_EX](request, sendResponse)\n  {\n    const property = BackgroundGlobals[request.payload.propname];\n    if (undefined === property)\n    {\n      sendResponse({ done: false });\n      return true;\n    }\n    const ret = this.findAndApplyProperties(request.payload, property);\n    sendResponse({ done: ret });\n    return true;\n  }\n\n  [ExternalCommands.REINIT_SCHEDULED_TASKS](request, sendResponse)\n  {\n    BackgroundGlobals.scheduleManager.reinit();\n    sendResponse({ done: true });\n    return true;\n  }\n\n  [ExternalCommands.SET_PROPERTY](request, sendResponse)\n  {\n    const { payload } = request;\n    if (!payload)\n    {\n      sendResponse({ done: false });\n    }\n\n    const { name, value } = payload;\n    if (!name)\n    {\n      sendResponse({ done: false });\n    }\n    if (name === 'nativeSettings')\n    {\n      BackgroundGlobals.nativeSettings = {\n        ...BackgroundGlobals.nativeSettings,\n        ...value,\n      };\n      sendResponse({ done: true });\n      return false;\n    }\n\n    const property = BackgroundGlobals[name];\n    if (undefined === property)\n    {\n      sendResponse({ done: false });\n    }\n\n    if (Array.isArray(property))\n    {\n      if (value === '')\n      {\n        property.splice(0, property.length);\n      }\n      else\n      {\n        property.push(value);\n      }\n    }\n    else\n    {\n      BackgroundGlobals[name] = value;\n    }\n\n    sendResponse({ done: true });\n    return false;\n  }\n\n  [ExternalCommands.SHOW_UNUSED_SELECTORS](request, sendResponse)\n  {\n    const unusedSelectors = {};\n\n    for (const engine of BackgroundGlobals.searchEngines)\n    {\n      if (engine.name === null || engine.enabled === false || engine.selectors === null)\n      {\n        continue;\n      }\n\n      unusedSelectors[engine.name] = [];\n      for (const selector of engine.selectors)\n      {\n        // the selector is unused or 0 matches\n        if (!selector.matched)\n        {\n          unusedSelectors[engine.name].push(selector.selector);\n        }\n      }\n    }\n\n    sendResponse(unusedSelectors);\n    return false;\n  }\n\n  // NOTE: Can we remove this ? Seems to have been commented out for a while at this point (Nov 24 2022)\n  // Commented out because it's not being used atm and it's interfering with when the Search Extension sends it's get values request to\n  // main to be redirected to the native\n  // [ExternalCommands.PING](request, sendResponse, extensionId)\n  // {\n  //   Logger.log('Got a ping');\n\n  //   /// #if BROWSER_ENV === 'firefox'\n  //   // When search extension is installed update overlay content\n  //   if (extensionId === ExternalExtensions.get('SearchExtension'))\n  //   {\n  //     extension.tabs.query({ active: true }, (tabs) =>\n  //     {\n  //       const message = {\n  //         command: ContentCommands.PAGE_OVERLAY,\n  //         payload:\n  //         {\n  //           subcommand: PageOverlayCommands.FINISH_DOWNLOAD,\n  //         }\n  //       };\n\n  //       // Should be only one active tab to send msg to\n  //       extension.tabs.sendMessage(tabs[0].id, message, () =>\n  //       {\n  //         if (extension.runtime.lastError)\n  //         {\n  //           Logger.log(extension.runtime.lastError.message);\n  //         }\n  //       });\n  //     });\n  //   }\n  //   /// #endif\n  //   BackgroundGlobals.messageDispatcher.extensionStatusUpdate({ extensionId });\n  //   sendResponse({\n  //     request_type: ExternalResponse.PONG,\n  //     useNativeLogger: BackgroundGlobals.useNativeLogger\n  //   });\n  //   return true;\n  // }\n\n  [ExternalCommands.GET_ALL_WA_SETTINGS](_, sendResponse)\n  {\n    const store = {\n      cacheStore: BackgroundGlobals.cacheStore,\n      CacheStorageVariables,\n      LocalStorageVariables,\n    };\n\n    const payload = {\n      bkGlobals: BackgroundGlobals,\n      store\n    };\n\n    sendResponse(payload);\n    return false;\n  }\n\n  [ExternalCommands.GET_MEMORY_FOOTPRINT](request, sendResponse)\n  {\n    const MemoryUsage = performance.memory.usedJSHeapSize;\n    sendResponse({ MemoryUsage });\n    return false;\n  }\n\n  [ExternalCommands.ENDURANCE_TEST_RESET](request, sendResponse)\n  {\n    BackgroundGlobals.cacheStore.set(LocalStorageVariables.DWS_INFO.name, {});\n    BackgroundGlobals.cacheStore.set(LocalStorageVariables.DWS_WHITELIST.name, []);\n    BackgroundGlobals.cacheStore.set(CacheStorageVariables.FORM_INFO.name, {});\n    BackgroundGlobals.cacheStore.set(CacheStorageVariables.SAVE_MULTI_STEP_LOGIN.name, {});\n\n    sendResponse({ done: true });\n    return false;\n  }\n\n  [ExternalCommands.SET_MTI_GLOBALS](request, sendResponse)\n  {\n    BackgroundGlobals.mtiRequestor.setGlobals(request.payload);\n    sendResponse({ done: true });\n  }\n\n  [ExternalCommands.SET_STORAGE_PROPERTY](request, sendResponse)\n  {\n    const { payload } = request;\n    if (!payload)\n    {\n      sendResponse({ done: false });\n      return false;\n    }\n\n    const { name, value } = payload;\n    if (name === undefined || value === undefined)\n    {\n      sendResponse({ done: false });\n      return false;\n    }\n\n    BackgroundGlobals.cacheStore.set(name, value);\n    sendResponse({ done: true });\n    return false;\n  }\n\n  [ExternalCommands.GET_STORAGE_PROPERTY](request, sendResponse)\n  {\n    const value = BackgroundGlobals.cacheStore.get(request.payload.name);\n    sendResponse({ value });\n    return true;\n  }\n\n  findItem(query, obj)\n  {\n    for (let oindex = 0; oindex < obj.length; ++oindex) //  For each item in the obj array\n    {\n      let isMatched = true;\n      const oitem = obj[oindex];\n      for (let findex = 0; findex < query.find.length; ++findex) // For each item in find list.\n      {\n        const fitem = query.find[findex];\n        if (oitem[fitem.name] === undefined || oitem[fitem.name] !== fitem.value) // check whether the object has the property in the query.\n        {\n          isMatched = false;\n          break;\n        }\n      }\n\n      if (isMatched)\n      {\n        return oitem;\n      }\n    }\n    return null;\n  }\n\n  /// Does not cater to nested objects. This is for finding and applying properties to\n  /// bkglobals\n  findAndApplyProperties(query, obj)\n  {\n    if (query.find === undefined)\n    {\n      return false;\n    }\n\n    let found = null;\n\n    if (Array.isArray(obj)) //  If the passed object is an array\n    {\n      found = this.findItem(query, obj);\n    }\n    else if (obj instanceof Map) // If the passed object is a map\n    {\n      if (obj.has(query.find.name))\n      {\n        found = obj.get(query.find.name);\n      }\n    }\n    else\n    {\n      found = obj[query.find.name];\n    }\n\n    if (found !== null && found !== undefined)\n    {\n      for (let sindex = 0; sindex < query.set.length; ++sindex)\n      {\n        found[query.set[sindex].name] = query.set[sindex].value;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  processMessage(extensionId, request, sendResponse)\n  {\n    Logger.log(`Message from: ${extensionId} request received in external listener: ${JSON.stringify(request)}`);\n\n    if (!('request_type' in request && 'payload' in request))\n    {\n      Logger.log(`Invalid external extension json message: ${JSON.stringify(request)} `);\n      return false;\n    }\n\n    if (this[request.request_type])\n    {\n      return this[request.request_type](request, sendResponse, extensionId);\n    }\n    return false;\n  }\n}\n","import { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport { CacheStorageVariables } from '@extension/common/cache_store_variables';\r\nimport { Logger } from '@extension/common/logger';\r\nimport BackgroundUtils from '@extension/background/background_utils';\r\n\r\nexport default class UnifiedAuthClient\r\n{\r\n  async launchLoginFlow()\r\n  {\r\n    try\r\n    {\r\n      const wssEmail = BackgroundGlobals.cacheStore.get(CacheStorageVariables.WSS_EMAIL.name, '');\r\n      const authAAI = { ea: wssEmail };\r\n      const encryptedEmail = await BackgroundGlobals.wasm.uauth_aes_encrypt(JSON.stringify(authAAI));\r\n      const webAppLoginUrl = `${BackgroundGlobals.IDPS_LOGIN_DOMAIN}/identity?skip-welcome=1&source=wa&auth-aai=${encodeURIComponent(encryptedEmail)}`;\r\n      BackgroundUtils.focusOrCreateTab(webAppLoginUrl);\r\n    }\r\n    catch (error)\r\n    {\r\n      Logger.error('Unified Auth Login Error:', error);\r\n    }\r\n  }\r\n}\r\n","/*\r\n *This is the Background Global object passed to content script. The full BackgroundGlobal object\r\n * is heavy and takes 180KB hence that consume large memory usage when passed as value to each tab\r\n * and every frame and for every call from content script. Hence this new object which internally\r\n * references the relevant objects from Background Globals. Any new object from Background Globals\r\n * that need to be made available in content script through GET_BK_GLOBALS has to go here. Make\r\n * sure that you donot include large objects as the purpose of this is to reduce size of the object\r\n * passed.\r\n */\r\n\r\nclass ContentGlobals\r\n{\r\n  constructor()\r\n  {\r\n    this.isTrustCheckRequired = true;\r\n    this.shadowMode = null;\r\n    this.browserType = 0;\r\n    this.nativeSettings = null;\r\n    this.WA_IMAGE_SECRET = null;\r\n    this.apsAnimationTimeout = 0;\r\n    this.searchEngines = null;\r\n    this.IDPS_IS_ENTITLED = false;\r\n    this.ALLOW_LOCALHOST = false;\r\n    this.apsUrlList = {};\r\n    this.isHTI = false;\r\n  }\r\n}\r\n\r\nexport default class ContentGlobalManager\r\n{\r\n  static get(bkGlobals, bIncludeSearchEngines)\r\n  {\r\n    const cGlobals = new ContentGlobals();\r\n    const contentKeys = Object.keys(cGlobals);\r\n    contentKeys.forEach((key) =>\r\n    {\r\n      if (Object.prototype.hasOwnProperty.call(bkGlobals, key))\r\n      {\r\n        cGlobals[key] = bkGlobals[key];\r\n      }\r\n    });\r\n\r\n    if (!bIncludeSearchEngines)\r\n    {\r\n      cGlobals.searchEngines = null;\r\n    }\r\n    const globals = JSON.stringify(cGlobals);\r\n    return globals;\r\n  }\r\n}\r\n","export const crfParams = {\r\n  weights: [\r\n    [0.381795, -0.141134, 0.895091, 0.4152, -1.000788, -0.667826, -0.027234, -0.064718, -1.530344, -0.144345, 3.927885, -0.948485, -1.001871, 0.0, 0.0, 0.0, -0.785971, 0.0, 0.0, 1.750683, 1.768701, 0.971582, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, 0.0, 0.481379, -0.695442, 0.0, 0.0, 0.0, 0.0, 0.0, -0.406938, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.478202, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.128816, 0.0, 0.0, 0.270521, -0.826689, 0.0, 0.0, 0.0, 0.0, 0.0, -0.441895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.610749, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.83246, -1.284786, -0.598257, -1.096769, 1.846214, -0.127241, 2.758359, -0.853276, 4.584366, 0.509906, -1.354248, -1.442809, -0.142641, -0.290815, -0.25087, -0.525117, -1.012768, 0.058429, 0.043244, 0.064845, 0.0, 0.376031, 0.244695, -0.216576, 0.0, -0.010423],\r\n    [1.602964, 0.20862, 2.897313, -0.147831, 1.305479, -0.488555, 0.0, -0.650596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.778767, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.863036, -1.612535, -0.387017, 0.032134, 0.515154, 2.349682, 0.546325, 0.750414, -1.087337, 0.000388, -0.309076, -0.052011, 0.0, 0.0, -0.043785, 0.0, 0.342369, 1.197506, 0.525552, 0.0, 0.0, 0.0, -0.038573, 0.0, 0.0, 0.0],\r\n    [0.0, -0.135478, 0.0, 0.848678, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.820718, -0.257357, -1.497107, 0.098908, 1.851416, 0.789781, -0.212726, 0.0, 0.0, -0.392643, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [1.125944, -0.262615, -0.081844, -0.447291, -0.056192, -0.059738, 0.0, 0.0, 0.0, -0.149271, 1.829572, 2.09221, 0.955814, -0.595704, -0.539867, 0.0, -0.205244, 0.0, 0.0, 0.215021, 0.182279, 0.0, 0.0, 0.0, 0.0, -0.047724],\r\n    [-0.313058, -0.113097, 0.0, -0.368032, -0.86378, 0.0, 0.0, 0.0, 0.0, 0.0, 1.415035, 2.668143, 0.0, 0.0, 0.0, 0.0, -0.224738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, -0.029329, 0.0, 2.184573, -2.521663, -0.132974, 0.0, -1.442842, 0.0, 0.504434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.468014, 0.0, 3.277557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, 1.811732, -0.144675, 0.0, 1.692522, 0.0, 0.0, 0.0, -0.416755, 0.0, 0.0, 0.0, -0.477347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.915525, 0.0, -0.142585, -0.091916, 0.041813, 0.525833, 0.0, -0.406111, -0.099497, 0.0, 0.0, 0.0, 0.0, 0.408285, 0.539408, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.569828],\r\n    [0.0, -0.129542, 0.0, -0.25015, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.25544, -0.098303, 4.900412, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, 0.0, -0.714841, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.809584, -0.425822, -1.00082, 0.695062, 0.718933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.261547],\r\n    [-0.75285, -0.162089, -1.000651, 1.186818, 0.0, 0.0, 0.634387, 0.55371, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.048026, 0.0, -0.016873, -0.692728, 0.0, 0.0, 0.597913, 1.355288, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, 0.0, -0.511438, -1.160381, 1.153393, 0.0, 0.0, 0.0, 0.484766, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.327645, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.366797, 0.0, 0.0, 0.0, -0.146647, -0.54778, 0.0, -0.57904, 0.088394, 1.26638, -0.1168, -0.203159, 0.0, 3.211785, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.40173],\r\n    [0.0, 0.0, 0.0, 0.316885, -0.112518, 0.0, -0.021059, -0.086089, 0.195228, 1.024167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [1.280385, -0.779813, -0.19372, 0.310751, -0.797361, 0.0, 0.0, 0.0, 0.0, 0.0, -0.243724, 4.381849, 1.145305, 0.0, 0.0, 0.0, -1.014601, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, 0.0, 0.301864, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.651245, 1.660597, -0.17995, 0.21663, -1.099134, -1.336515, -0.49735, 1.218538, 0.0, -0.111016, 0.0, -0.471541, -0.454728, -0.004778, 0.0, -0.037613, 1.57871, 0.322953, 0.485828, 0.157945, 0.113672, 0.0, 0.755287, 0.0, 0.0, 0.0],\r\n    [0.0, 0.004217, 0.0, 0.073358, -0.49997, -0.895433, -0.12838, 0.441047, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.041412, 0.43627, 0.590406, 0.0, 0.0, 0.0, 0.893265, 0.0, 0.0, 0.0],\r\n    [0.337289, 0.0, 0.0, 1.907637, 0.0, 0.0, -0.477389, 0.0, -0.041029, -0.261163, 0.0, -0.009156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.318502, 0.0, 0.631995, 0.972745, -0.20651, -0.514667, 0.0, 0.489516, -1.192161, -0.09297, -0.01642, 0.0, 0.0, 0.0, 0.0, 3.027637, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.265751, 0.0],\r\n    [-0.235621, 0.0, 0.0, 0.032988, -0.265443, 0.0, -0.134804, 0.0, 0.445634, 1.248445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, 0.0, 0.550541, -0.029588, 0.0, 0.0, 0.0, 0.0, 0.0, -0.325164, -0.039447, 0.0, -0.251671, 2.177792, 0.0, 0.0, -0.00059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.455007],\r\n    [2.044646, -0.664972, -3.372012, 5.783028, 0.976938, -3.569558, 0.002436, -2.392874, 1.768584, -2.973729, 2.274664, 2.317583, 1.489434, -0.023236, -0.107204, 0.256304, -2.301394, -0.287394, -0.460935, 0.259944, 0.289779, 0.0, -0.248737, -0.526573, -0.848477, 1.168213],\r\n    [-0.72398, 3.149627, -2.958625, 4.264722, -1.86833, -2.269835, -0.25596, -0.473486, 0.0, 0.0, -0.089953, 0.0, 0.312428, 0.0, -0.097443, 0.0, 2.337368, 1.212925, 0.809953, 0.0, -0.007785, -0.044547, 0.794326, -0.243938, 0.0, 0.0],\r\n    [-1.540996, -2.110699, 2.091672, 6.575679, -2.024341, 2.248157, -1.617977, 2.473191, -0.464542, 2.211719, -0.43212, -0.316058, -1.591366, 0.0, 0.280776, 0.0, -1.684538, -0.567538, -0.594524, -0.315204, -0.062223, -0.119815, -0.134954, 0.803617, 1.779959, -0.177311],\r\n    [-0.046847, -0.114752, -0.546422, 6.717093, -0.950797, -1.559899, -0.146894, 0.0, 0.0, -0.38301, 0.0, -0.076322, 0.0, 2.379144, 2.104931, -0.01218, -1.552481, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.13792],\r\n    [-0.157614, 5.7e-05, -0.84044, 0.350256, 0.189209, 0.0, -0.044975, 0.0, 0.0, 0.029222, -0.41965, -0.074196, 0.016614, 0.0, 0.0, 0.823307, -0.346662, 0.0, 0.0, 0.0, 0.0, -0.011399, 0.0, 0.0, 0.803962, -0.006933],\r\n    [1.283639, 2.437621, 1.283845, -0.156417, -1.410924, -0.104389, 0.0, 0.0, -0.444781, 0.708356, -0.211518, -0.022454, 0.126144, 0.0, 0.0, -0.705058, -0.097343, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.362759, 0.0],\r\n    [0.569087, -0.585027, 1.732896, 0.163583, 1.142747, 2.650164, -2.260167, -1.913689, -1.223304, -0.930623, 0.491457, 0.370234, -0.253696, -0.164677, -0.152071, -0.261915, -0.513965, 0.186213, 0.142822, 0.0, 0.0, 0.315597, 0.151771, 0.426382, -0.02254, -0.19706],\r\n    [-0.800499, -1.071454, -0.505844, 0.131266, 0.155935, 0.334876, -0.315616, -0.04063, -0.438329, -0.055, -0.236537, 0.0, 0.061429, 0.0, 0.0, 0.0, 0.098768, 0.757904, 0.634431, 0.0, 0.0, 0.751569, 0.593082, 0.910203, 0.0, 0.0],\r\n    [-0.590933, -0.525608, 0.497593, -1.293198, 0.68666, 0.275076, 0.0, 0.888073, 0.062655, 0.911931, -0.298154, -0.022851, 0.132969, 0.0, 0.013505, 1.122152, 1.086461, -1.11535, -1.397043, 0.0, 0.0, 0.0, -0.613165, -0.079632, 1.109414, 0.0],\r\n    [-0.618072, 0.69215, 0.455333, 0.394815, -0.421568, -0.058803, 0.0, 1.206311, -0.779549, -0.129657, 0.617096, 0.53739, 0.0, 0.919153, 0.937451, -1.052408, 0.122054, 0.0, 0.0, 0.0, 0.0, -0.122177, 0.0, 0.0, -0.38777, 0.0],\r\n    [-0.115063, 0.880664, -0.647361, 0.118832, -0.109389, 0.641566, -0.267808, 0.60606, 0.0, -0.245453, 0.889146, -0.333387, 0.423983, -0.122709, 0.0, -0.100777, 1.132177, 0.0, 0.0, -0.013954, 0.0, -0.083507, 0.0, 0.0, 0.0, 0.0],\r\n    [-1.029024, -0.013609, -1.364573, 0.63361, -0.011449, 1.180715, -0.715098, -0.480089, -0.512437, -0.436019, 0.31252, 0.13189, 1.014098, 0.459488, 0.432379, -0.690656, 1.137731, 0.0, -0.101064, 0.896269, 0.819688, -0.004567, -0.088729, 0.0, -0.064577, 0.178212],\r\n    [1.74377, -0.023961, 0.489574, -0.081031, 0.75725, -0.155365, 0.573404, 0.677538, -0.71959, -0.934484, 0.401806, 0.411529, 0.158602, 0.0, 0.0, 0.0, -0.008078, -0.42179, -0.372878, -0.094365, -0.109616, -0.213469, -0.323901, -0.133976, 0.0, 0.127577],\r\n    [0.434151, -0.556136, -0.293487, -0.121384, 2.084792, 0.940905, -0.824765, -0.56775, 1.780757, 1.470539, -1.928662, -0.679918, -0.790243, -0.462134, -0.521623, -0.474362, 0.855773, 0.518745, 0.561256, -0.302241, -0.239926, 0.150388, 0.43171, 0.319732, 0.0, -0.240443],\r\n    [-0.665523, 0.0, 0.611491, 0.010126, -1.035762, -0.210247, -1.062504, -0.539166, 1.664837, 2.030464, -0.125029, 0.0, 0.075913, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, -1.320511, 0.389407, 0.016393, 0.0, -0.953268, -0.725107, 0.460777, 1.263861, 0.0, 0.0, -0.709514, 0.0, 0.100597, 0.0, 0.328592, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.661162, -0.235172, -0.080075, 0.684639, 0.746611, -0.563957, 0.188166, 0.0, 0.0, 0.0, 0.0, 0.046012, 0.0, 0.0, 0.0, 0.0, 0.267596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.105623, 0.600051, -0.334832, -0.062902, -0.068449, -1.092365, 0.699897, 0.0, -0.161136, 0.0, 0.0, 0.113987, 0.525982, 0.078266, 0.092243, 0.0, -1.480788, 0.429057, 0.31756, 0.0, 0.0, 0.0, 0.491321, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, -1.755271, 0.205024, 0.0, 0.0, 0.904761, 0.518967, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.077623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.42652, 0.0, -0.277567, 0.0, 1.204241, 0.0, 0.0, -0.268544, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.06671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.640547, 0.412393, 0.564482, 0.0, -0.882725, 1.279952, 1.009624, 0.0, -0.796017, -0.675471, -2.285137, 0.0, -0.678019, -1.035905, -0.811441, 0.0, 0.345574, 0.335378, 0.482092, 0.426586, 0.082787, 0.261597, 0.271051, -0.144855, -0.647516],\r\n    [-0.934452, -0.937321, -0.747941, -0.038538, -0.710237, -0.060102, 0.165251, 0.605232, -0.776593, -0.096066, 0.0, 0.100545, 0.27379, 0.01982, 0.078771, 0.0, 0.273431, 0.501709, 0.546939, 0.0, 0.0, 0.338102, 0.424829, 0.475519, 0.0, 0.0],\r\n    [0.478742, -0.179341, 0.168894, -0.010935, 0.0, -0.197505, 0.0, 0.0, 0.063019, 0.257728, -0.402021, 0.316677, -0.530409, 0.431219, 0.47143, 0.0, 0.8742, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.707798],\r\n    [-0.139202, 0.0, 0.0, 0.146566, -0.199509, -0.479374, -0.134675, 0.0, 0.0, 0.0, 0.053051, 0.153081, 0.720642, 0.0, 0.0, 0.0, 0.236857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.183549],\r\n    [-0.576026, -0.590848, -0.650777, 0.743385, 0.0, -0.564075, 0.0, -0.279353, -0.142854, -0.990666, 1.076814, 0.652833, 0.548592, 0.333405, 0.273754, 0.170086, 0.0, 0.0, 0.0, -0.180067, -0.2395, 0.0, 0.0, 0.0, 1.353212, 0.0],\r\n    [0.165343, 0.158712, 0.0, -0.053258, 0.80007, -0.757795, 0.0, 0.093105, -0.222263, 0.0, -0.19557, 0.0, 0.0, 0.0, 0.0, -0.019346, 0.331863, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.265267],\r\n    [-1.227386, -1.191434, -0.819804, 0.592247, -0.006817, -0.810421, -0.048771, -0.414692, -0.487166, -0.833789, 0.712999, 0.327435, 1.629537, 1.018602, 1.480439, -0.14808, -0.303711, 0.0, 0.0, 1.154573, 1.234709, 0.0, 0.0, 0.0, -0.046624, 0.598555],\r\n    [-0.572461, -0.51546, -0.914154, 0.001556, -0.227591, -1.004561, -0.184754, -0.266854, -0.281751, -0.2265, 0.955573, 1.217074, 0.713694, 0.868421, 0.843689, 0.0, -0.375449, 0.0, 0.0, 0.695469, 0.816463, 0.0, 0.0, 0.0, 0.0, 0.557298],\r\n    [-0.443772, -0.71206, 0.0, 0.165576, 1.181246, 0.568121, -0.071656, 0.0, 0.104399, -0.609734, -0.542829, 0.179815, -0.577271, -0.344739, -0.136442, 0.0, 0.081703, 0.0, 0.0, 1.443572, 1.458833, 0.0, 0.0, 0.0, 0.0, 0.208523],\r\n    [1.142579, 0.627625, 1.300571, 0.273166, 0.594279, 0.88161, 0.808283, 0.835987, -1.036386, -0.059478, -0.653543, -0.133844, -0.604523, -0.23569, -0.09319, 0.459933, -0.455002, -0.437017, -0.43552, -0.448695, -0.481975, 0.079719, 0.0, 0.0, -0.6382, -0.186462],\r\n    [0.709366, -0.068975, 0.067188, 0.520717, 0.592066, 0.729882, 1.067285, 0.564371, -0.367882, -0.432785, 0.0, 0.0, 0.0, 0.0, 0.0, -0.618254, -0.091287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.094683, 0.0],\r\n    [-0.476065, -0.969887, 0.117955, 0.088406, 0.038821, -0.120652, 0.028135, -0.836928, 0.0, 0.515609, 0.806256, 0.671381, -0.571047, 0.0, -0.037441, -0.160152, 0.0, 0.712189, 0.394479, -0.334078, -0.121737, 0.024269, 0.375468, 0.541458, -1.015712, -0.133332],\r\n    [0.37072, 0.780941, 0.063325, -0.080071, -0.491812, 0.30085, 0.938594, -0.160578, -0.056466, -0.589789, 0.0, 0.140101, 0.0, 0.0, 0.0, -0.096926, -1.459896, 0.355834, 0.302509, 0.0, 0.0, 0.0, 0.470048, 0.0, 0.0, 0.0],\r\n    [-0.093687, -0.710609, -0.523711, 0.313762, 0.0, -0.014469, 0.431208, 0.928449, -0.015776, 0.0, 0.0, 0.234007, 0.0, 0.0, 0.0, 0.0, 0.439359, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.69056, 0.0, 0.965475, 0.216278, 0.0, -0.745769, 0.0, -0.002921, 0.400919, 0.0, 0.0, 0.053657, 0.0, 0.0, 0.0, -1.005871, 0.0, 0.0, 0.0, 0.0, -0.002108, 0.0, 0.0, 0.0, -0.232539, 0.0],\r\n    [0.142284, 0.0, -0.868483, -0.119214, 0.665757, 0.471195, -0.581906, -0.320557, 1.265929, 0.7133, 0.0, 0.0, 0.0, 0.0, 0.0, -0.278199, 0.804881, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.99113, 0.200466, 0.0, -0.285143, 0.2074, 0.007016, 0.658248, 0.256312, 0.0, -0.093708, -0.103778, -1.310832, 0.0, -0.235142, -0.341705, 0.787912, -0.019206, 0.061789, 0.0, -1.155314, -1.04933, 0.0, 0.051453, 0.056124, 4.3e-05, 0.0],\r\n    [-0.508667, 0.087868, 0.216405, 0.071231, 0.450115, 0.0, -1.273801, -0.515393, -0.423938, -0.878284, -0.288306, 0.235612, 0.533528, 0.0, 0.0, -0.523617, 0.0, 0.373831, 0.232243, 0.0, 0.0, 0.476241, 0.3605, 0.52163, 0.0, 0.0],\r\n    [-0.188427, 0.20066, 0.0, 0.534192, 0.207359, 0.0, -0.228606, 0.0, 0.0, 0.683062, 0.0, 0.112729, 0.0, 0.0, 0.0, 0.0, 0.157455, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.193741, 0.205834, 1.482115, 0.66511, -0.644468, 0.0, -0.690408, -0.522438, 0.0, 0.0, 0.0, 0.177203, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.327608, -0.540239, 0.197689, 0.944748, -0.749768, -0.303382, -1.617242, -0.923179, 1.030558, 1.271163, 0.0, 0.0, -0.04744, 0.0, 0.0, 0.785679, 0.0, 0.0, 0.805827, 0.0, 0.0, 0.0, 0.0, 0.0, 1.245485, 0.0],\r\n    [-0.371161, 0.0, -0.496666, -0.222298, 0.0, 1.498899, 0.158495, 0.655343, 0.0, 0.0, 0.0, 0.162342, 0.0, 0.0, 0.0, -0.207017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.942384, 0.153619, 0.0, 0.51129, 0.545768, 0.0, -1.141268, -1.227107, -0.001739, -0.530788, 0.0, 0.18109, 0.0, 0.0, 0.0, 0.0, 0.950237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.767838, 1.224786, 1.220247, -0.712544, -0.506728, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.247033, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [1.525379, 0.557892, 0.654935, 0.755727, -0.102451, -0.171127, 0.094113, -0.374555, 0.305339, 0.0, -0.366062, 0.0, 0.0, 0.0, 0.0, -1.077958, 0.190468, 0.524208, 0.219351, 0.0, 0.0, 0.0, -0.242589, -0.279578, -0.596071, 0.0],\r\n    [-0.877036, -0.573395, -0.130649, 0.0, 0.936506, 1.778201, -0.090996, 0.0, -0.669414, 0.0, 0.0, 0.154277, 0.651352, 0.195171, 0.26904, 1.298335, 1.69068, -0.201096, 0.0, -0.467091, -0.421773, -0.214877, 0.0, -0.592428, -0.284413, 0.0],\r\n    [-0.087626, 0.0, -0.053642, 1.01503, 0.0, 0.0, 1.612528, 1.5294, -0.025041, -0.441124, 0.0, 0.0, 0.0, 0.0, 0.0, -0.379505, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-1.950805, -2.191738, -1.67129, 1.18876, 1.756465, 1.29438, 0.0, 0.0, 0.098765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.369895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.369556, -0.357668, -0.014664, 0.816821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.120309, 0.0, 0.0, 0.0, -0.043565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.672644, -1.666405, -0.800433, -0.50221, 0.251, 0.0, 0.983797, 0.674509, -0.718766, -0.229311, -0.861191, 0.0, -2.157253, 0.0, 0.0, 2.122205, 0.071043, 0.79028, 0.921097, -0.05112, -0.058604, 0.673864, 0.427944, 0.829513, 0.763047, -0.256791],\r\n    [-0.632425, 0.627145, 0.17052, 0.057967, -1.095389, -0.910546, 0.596005, 0.10205, 0.0, -0.055757, 0.0, 0.0, 0.0, 0.0, 0.0, -2.209408, -0.489742, 1.069867, 1.135408, 0.0, 0.0, 0.899651, 0.588818, 1.031769, -1.326332, 0.0],\r\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.735468, 0.0, -0.466023, 1.394471, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.303501, 0.0, 0.545533, 0.242522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.142686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.063533, 0.0],\r\n    [-0.18067, 0.0, 0.0, -0.243786, 0.0, 0.46051, 0.0, 0.0, 0.0, 0.0, 0.422782, 0.010207, -0.625691, 0.0, 0.134883, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, -0.628187, -0.943324, 0.696629, 0.852466, 0.518886, 0.0, 0.000453, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.041831, 0.0, 0.095553, 0.0, 0.0, 0.0, 0.608722, -0.330727, 0.0, 0.0]\r\n  ],\r\n  classes: ['login:username', 'login:password', 'login:submit', 'other:other', 'signup:username', 'signup:submit', 'resetpassword:username', 'resetpassword:submit', 'newsletter:email', 'newsletter:submit', 'creditcard:cc_name', 'creditcard:cc_number', 'creditcard:cc_cvc', 'creditcard:cc_mm', 'creditcard:cc_yy', 'search:query', 'signup:password', 'changepassword:newpassword', 'changepassword:confirmpassword', 'creditcard:cc_firstname', 'creditcard:cc_lastname', 'changepassword:username', 'changepassword:oldpassword', 'changepassword:submit', 'search:submit', 'creditcard:cc_date'],\r\n  transition_probs: [\r\n    [-2.471987, 4.720312, 2.159149, 0.38274, -1.262548, -0.594757, -0.454763, -0.446806, -0.004377, -0.153857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.435547, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-2.574788, -1.265169, 3.734198, 0.708541, 1.270195, -1.201177, 0.0, -0.156107, 0.901266, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.349711, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-1.416131, -1.226538, -2.897876, 1.100609, 1.317658, -1.632455, 2.203131, -0.358911, 0.34146, -0.129859, -0.089674, 0.0, 0.0, 0.0, 0.0, -0.067009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [1.347386, 0.908547, 1.962523, 2.458983, 0.672438, 1.897034, 1.521977, 0.734208, 0.902934, 0.77231, 0.110401, 1.0312, -0.463185, -2.002432, -0.651722, 1.141238, 1.673961, -0.61137, 0.642547, 0.407455, -0.755346, 0.754923, 0.0, -0.294406, -0.633223, 0.123765],\r\n    [-0.759857, -0.497984, -0.274914, 1.508401, -3.260297, 2.033054, -0.030741, 0.0, -0.145647, -0.103908, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.767797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.780007, 0.0, -0.30885, 0.273723, -1.487531, -2.028767, 0.0, 0.0, 1.779439, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.412704, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.286832, -0.069421, 0.0, 0.917093, 0.0, 0.0, -2.199708, 4.695203, -0.40073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.806478, -0.092757, 0.0, 0.315397, 0.0, 0.0, -1.701526, -0.977596, 0.625383, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, -0.254826, -0.624691, -0.379547, -0.681089, -0.068647, -0.144811, -1.746224, 3.310189, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.588497, 0.0, 0.0, 0.719194, -0.40707, 0.0, 0.0, 0.0, 0.657611, -0.877687, 0.0, -0.144294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.066912, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.812675, 2.08917, 2.171667, 1.631319, 0.0, 0.0, 0.0, 0.0, 0.0, -0.004394, 0.0, 0.0, 0.0, 0.0, 0.0, -0.34898],\r\n    [-0.111858, 0.0, 0.0, -2.707157, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.926138, -0.743081, 1.445863, 2.413528, -0.083629, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.041443],\r\n    [0.0, 0.0, -0.16164, 0.979985, 0.0, -0.106076, 0.0, 0.0, 0.0, -0.002018, 1.069059, 0.761828, -1.41778, 1.971785, 0.0, 0.0, 0.0, 0.0, 0.0, 1.252093, 0.0, 0.0, 0.0, 0.0, 0.0, -0.497945],\r\n    [0.0, 0.0, 0.0, -0.665847, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.505557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, 0.0, 0.939496, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.805883, -0.179366, 2.595503, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [-0.684751, 0.0, 0.0, 0.108679, 0.0, 0.0, -0.027593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.908827, 0.0],\r\n    [0.0, -0.32372, -0.130806, 2.218604, 0.356498, 2.643844, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.592049, -0.008481, -0.080353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.22658, 2.533259, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, 0.0, 0.674901, 0.0, -0.083253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.192587, -0.222482, 0.0, 0.0, 0.0, -0.024848, 1.981233, 0.0, 0.0],\r\n    [0.0, 0.0, 0.0, -0.935219, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.226414, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, 0.0, 0.045916, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.76074, -0.243833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.692922],\r\n    [0.0, 0.0, 0.0, -0.33606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.839407, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, 0.0, -0.580324, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.965034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, 0.0, -0.242238, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.642949, 0.0, 0.0, 0.789207, 0.0, 0.0, 0.926297, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\r\n    [0.0, 0.0, 0.0, 0.278741, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.199257, 0.0, 1.762241, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\r\n  ]\r\n};\r\n","// Common\r\nimport HttpService from '@extension/common/http_service';\r\nimport { Logger } from '@extension/common/logger';\r\n\r\n// Form Detection\r\nimport weights from '@mcafee/form-detection/weights.json';\r\nimport * as exceptions from '@mcafee/form-detection/exceptions.json';\r\nimport { crfParams } from '@mcafee/form-detection/crfParams';\r\n\r\n/**\r\n * TODO: Comments\r\n */\r\nexport default class FormDetection\r\n{\r\n  constructor()\r\n  {\r\n    this.http = new HttpService();\r\n  }\r\n\r\n  async sendAndReceiveRequest({ url })\r\n  {\r\n    let timeoutId = null;\r\n    try\r\n    {\r\n      timeoutId = setTimeout(() =>\r\n      {\r\n        throw new Error('Remembear API call timed out');\r\n      }, 3000);\r\n\r\n      const response = await this.http.sendHttpRequest({\r\n        headers: { 'Content-Type': 'application/json' },\r\n        url\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n      return response.json();\r\n    }\r\n    catch (error)\r\n    {\r\n      clearTimeout(timeoutId);\r\n      return Promise.reject(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the form detection model weights.\r\n   * @returns weights.json for the remembrear form detection library.\r\n   */\r\n  static getWeights()\r\n  {\r\n    try\r\n    {\r\n      // TODO: Make http call when json file is hosted or endpoint is ready to be used\r\n      return weights;\r\n    }\r\n    catch (error)\r\n    {\r\n      Logger.error(error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the exceptions for the form detection library.\r\n   * @returns exceptions.json for the remembear form detection library.\r\n   */\r\n  static getExceptions()\r\n  {\r\n    try\r\n    {\r\n      // TODO: Make http call when json file is hosted or endpoint is ready to be used\r\n      return exceptions;\r\n    }\r\n    catch (error)\r\n    {\r\n      Logger.error(error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the default crfParams for the form detection library.\r\n   * @returns default crfParams object for the remembear form detection library.\r\n   */\r\n  static getCrfParams()\r\n  {\r\n    try\r\n    {\r\n      // TODO: Make http call when json file is hosted or endpoint is ready to be used\r\n      return crfParams;\r\n    }\r\n    catch (error)\r\n    {\r\n      Logger.error(error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport BackgroundUtils from '@extension/background/background_utils';\r\nimport WhitelistWrapper from '@extension/background/whitelist_wrapper';\r\nimport UnifiedAuthClient from '@extension/background/UnifiedAuthClient';\r\nimport ContentGlobalManager from '@extension/background/content_globals';\r\nimport FormDetection from '@extension/background/form_detection';\r\n\r\n// Common\r\nimport { CacheStorageVariables, LocalStorageVariables } from '@extension/common/cache_store_variables';\r\nimport { BrowserType, BuildSettings } from '@extension/common/constants';\r\nimport { BackgroundCommands } from '@extension/common/commands';\r\nimport { extension } from '@extension/common/webextension';\r\nimport { Logger } from '@extension/common/logger';\r\nimport UrlParser from '@extension/common/url_parser';\r\n// Utilities\r\nimport { digestMessage } from '@extension/utilities/utils';\r\n\r\n/**\r\n * Handles communication from content to the background process. The content process has a number of commands that it may\r\n * call for or invoke in the background context. This class handles those requests. A dispatcher will then be invoked to handle\r\n * the content's request and response data may be sent back to the content process.\r\n */\r\nexport default class MessageListener\r\n{\r\n  constructor(promisesToComplete)\r\n  {\r\n    this.promisesToComplete = promisesToComplete;\r\n  }\r\n\r\n  getDomainName(srcvideo)\r\n  {\r\n    let url = null;\r\n\r\n    // If the protocol is not there as part of the video, then\r\n    // the srcvideo is treated as relative to chrome extensions location\r\n    if (srcvideo.startsWith('http') || srcvideo.startsWith('www'))\r\n    {\r\n      url = srcvideo;\r\n    }\r\n    else\r\n    {\r\n      url = `https://${srcvideo}`;\r\n    }\r\n\r\n    const link = UrlParser.getDomain(url);\r\n    return link.startsWith('www.') ? link.substr(4) : link;\r\n  }\r\n\r\n  init()\r\n  {\r\n    extension.runtime.onMessage.addListener((request, sender, cb) =>\r\n    {\r\n      try\r\n      {\r\n        const sendResponse = (details = null) =>\r\n        {\r\n          cb(details);\r\n        };\r\n\r\n        this.executeCommand(request, sender, sendResponse);\r\n      }\r\n      catch (e)\r\n      {\r\n        Logger.error(e.message);\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  async executeCommand(request, sender, cb)\r\n  {\r\n    // Make sure all promises that need to be initialized are completed.\r\n    await this.promisesToComplete;\r\n\r\n    this[request.command] && this[request.command]({ request, sender, cb });\r\n  }\r\n\r\n  [BackgroundCommands.IS_WHITELISTED]({ request, cb })\r\n  {\r\n    let bwhitelisted = false;\r\n    const domain = UrlParser.getDomain(request.url);\r\n    if (WhitelistWrapper.isDomainInWhitelist(domain, LocalStorageVariables.BLOCK_PAGE_WHITELIST.name))\r\n    {\r\n      bwhitelisted = true;\r\n    }\r\n    cb({ whitelisted: bwhitelisted });\r\n  }\r\n\r\n  [BackgroundCommands.GET_TAB_DATA]({ request, sender, cb })\r\n  {\r\n    let tabData = null;\r\n\r\n    if (request.tabId)\r\n    {\r\n      tabData = { ...BackgroundGlobals.tabData.get(request.tabId), url: sender.url };\r\n    }\r\n    else\r\n    {\r\n      tabData = BackgroundGlobals.tabData.get(sender.tab.id);\r\n    }\r\n\r\n    cb(tabData);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.VIEW_SITE_REPORT]({ request, sender, cb })\r\n  {\r\n    const siteReportPath = 'html/site_status_site_report.html';\r\n    const siteReportUrl = extension.runtime.getURL(siteReportPath);\r\n    if (request.showInNewTab)\r\n    {\r\n      extension.tabs.create({ url: siteReportUrl }, (tabInfo) =>\r\n      {\r\n        BackgroundGlobals.tabData.setTabBlockPageData(tabInfo.id, { url: request.url });\r\n      });\r\n    }\r\n    else\r\n    {\r\n      extension.tabs.update(sender.tab.id, { url: siteReportUrl });\r\n    }\r\n\r\n    cb(true);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.AUTO_RUN_VIDEO_SITE]({ request, sender, cb })\r\n  {\r\n    extension.tabs.get(sender.tab.id, (tabinfo) =>\r\n    {\r\n      const { ffViewports } = BackgroundGlobals;\r\n      let x = -1;\r\n      let y = -1;\r\n\r\n      if (BuildSettings.BROWSER_TYPE === BrowserType.FIREFOX && ffViewports !== null)\r\n      {\r\n        x = ffViewports.X;\r\n        y = ffViewports.Y;\r\n      }\r\n\r\n      const domain = this.getDomainName(tabinfo.url);\r\n      BackgroundGlobals.messageDispatcher.autoPlayVideoSite(domain, request.url, x, y);\r\n    });\r\n\r\n    cb(true);\r\n  }\r\n\r\n  [BackgroundCommands.CACHE_STORE]({ request, cb })\r\n  {\r\n    const { action, data } = request;\r\n    BackgroundGlobals.messageDispatcher.cacheStore(action, data, cb);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.EXECUTE_COMMAND]({ request, cb })\r\n  {\r\n    BackgroundGlobals.messageDispatcher.executeCommand(request.commandId, request.params);\r\n    cb(true);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.FOCUS_OR_CREATE_TAB]({ request, cb })\r\n  {\r\n    BackgroundUtils.focusOrCreateTab(request.url);\r\n    cb(true);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.REMOVE_TAB]({ sender, cb })\r\n  {\r\n    extension.tabs.remove(sender.tab.id, () => {});\r\n    cb(true);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.GET_BK_GLOBALS]({ request, cb })\r\n  {\r\n    const globals = ContentGlobalManager.get(BackgroundGlobals, request.bIncludeSearchEngines);\r\n    cb(globals);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.GET_CLICK_EVENT_TIME]({ sender, cb })\r\n  {\r\n    cb(BackgroundGlobals.tabIdToLastClickTime.get(sender.tab.id));\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.GET_EXTENSION_STATUS]({ request, cb })\r\n  {\r\n    BackgroundGlobals.messageDispatcher.getExtensionStatus(request, cb);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.TI_REQUEST]({ request, cb })\r\n  {\r\n    const { requestData, referrer } = request;\r\n    BackgroundGlobals.messageDispatcher.makeMTIRequest(requestData, referrer).then((response) => cb(response));\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.GET_TYPOSQUATTING_DATA]({ request, cb })\r\n  {\r\n    const entry = BackgroundGlobals.typoCache.getEntry(request.domain);\r\n    const response = entry || null;\r\n    cb(response);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.INSTALL_EXTENSION]({ request, cb })\r\n  {\r\n    BackgroundGlobals.messageDispatcher.installExtension(request.extension_id, request.redirect_url);\r\n    cb(true);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.IS_FRAME_BLOCKED]({ request, sender, cb })\r\n  {\r\n    const ret = BackgroundGlobals.messageDispatcher.isFrameBlocked(request.url, sender.tab.id);\r\n    cb(ret);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.SAVE_CLICK_EVENT_TIME]({ request, sender, cb })\r\n  {\r\n    BackgroundGlobals.tabIdToLastClickTime.set(sender.tab.id, request.last_event);\r\n    cb(true);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.SEND_TELEMETRY]({ request, cb })\r\n  {\r\n    BackgroundGlobals.messageDispatcher.sendTelemetry(request.telemetry);\r\n    cb(true);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.SET_VIEWPORT]({ request, cb })\r\n  {\r\n    const { x, y } = request;\r\n    BackgroundGlobals.messageDispatcher.SetXYViewport(x, y);\r\n    cb(true);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.ANY_BLOCKED_IFRAMES]({ request, sender, cb })\r\n  {\r\n    BackgroundGlobals.messageDispatcher.anyBlockedIframes(sender.tab.id, request.frameUrls, cb);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.UNBLOCK_ALL_IFRAMES]({ sender, cb })\r\n  {\r\n    BackgroundGlobals.messageDispatcher.unblockAllIframes(sender.tab.id, sender.tab.url);\r\n    cb(true);\r\n  }\r\n\r\n  /** For handling CryptoJacking Topbar */\r\n  [BackgroundCommands.ANY_BLOCKED_CRYPTOSCRIPTS]({ sender, cb })\r\n  {\r\n    BackgroundGlobals.messageDispatcher.anyBlockedCryptoScripts(sender.tab.id, cb);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.WHITELIST]({ request, sender, cb })\r\n  {\r\n    const { action, type, data } = request;\r\n    const tabId = sender.tab ? sender.tab.id : null;\r\n    data.tabId = tabId;\r\n    BackgroundGlobals.messageDispatcher.whitelist(action, type, data, cb);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.GET_POPUP_DATA]({ sender, cb })\r\n  {\r\n    BackgroundGlobals.messageDispatcher.getPopupData(sender.tab.id, sender.tab.url, cb);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.GET_SETTINGS_DATA]({ cb })\r\n  {\r\n    BackgroundGlobals.messageDispatcher.getSettingsData(cb);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.SEARCH_ANNOTATION]({ request, cb })\r\n  {\r\n    const { action, data } = request;\r\n    BackgroundGlobals.messageDispatcher.searchAnnotation(action, data, cb);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.SOCIAL_MEDIA_ANNOTATION]({ request, cb })\r\n  {\r\n    const { action, data } = request;\r\n    BackgroundGlobals.messageDispatcher.socialMediaAnnotation(action, data, cb);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.RESET_SETTINGS]({ cb })\r\n  {\r\n    BackgroundGlobals.messageDispatcher.resetSettings();\r\n    cb(true);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.RESET_NATIVE_SETTING]({ request, cb })\r\n  {\r\n    const { setting } = request;\r\n    BackgroundGlobals.messageDispatcher.resetNativeSetting(setting);\r\n    cb(true);\r\n  }\r\n\r\n  /**\r\n   * Update the stored engine stats.\r\n   * @param {Object} param0\r\n   * @param {Object} param0.request - The request object sent from the onMessage handler on the background\r\n   */\r\n  [BackgroundCommands.UPDATE_ENGINE_STATS]({ request, cb })\r\n  {\r\n    // Destructures object and array types by reference, other data types by value\r\n    for (const { name, selectors } of BackgroundGlobals.searchEngines)\r\n    {\r\n      if (name === request.engine.name && selectors.length === request.engine.selectors.length)\r\n      {\r\n        for (let index = 0; index < selectors.length; index++)\r\n        {\r\n          selectors[index].matched += request.engine.selectors[index].matched;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    cb(true);\r\n  }\r\n\r\n  /** TODO: comments */\r\n  [BackgroundCommands.CONTENT_HANDLER]({ sender, request, cb })\r\n  {\r\n    extension.tabs.sendMessage(sender.tab.id, request.message, () =>\r\n    {\r\n      if (extension.runtime.lastError)\r\n      {\r\n        Logger.log(extension.runtime.lastError.message);\r\n      }\r\n    });\r\n\r\n    cb(true);\r\n  }\r\n\r\n  [BackgroundCommands.UPDATE_RAT_DETECTION_SHOWING_FLAG]({ request, sender, cb })\r\n  {\r\n    const { showed } = request;\r\n    BackgroundGlobals.messageDispatcher.updateRatDetectionShowingFlag(showed, sender.url, sender.tab.id);\r\n    cb(true);\r\n  }\r\n\r\n  /** Request and save results for search suggestion */\r\n  [BackgroundCommands.SEARCH_SUGGEST]({ request, cb })\r\n  {\r\n    const { searchTerm } = request;\r\n    BackgroundGlobals.messageDispatcher.searchSuggest(searchTerm).then((response) => cb(response));\r\n  }\r\n\r\n  /**\r\n   * Form data is saved then retrieved from content when the user is redirected & logged in to their service\r\n   * This cached information will then be used to trigger the IDPS UI\r\n   * @param {*} param\r\n   * @returns\r\n   */\r\n  [BackgroundCommands.SAVE_FORM_INFO]({ request, sender, cb })\r\n  {\r\n    const tabId = sender.tab.id;\r\n    const { username, hostname } = request;\r\n\r\n    // username is same as email here\r\n    digestMessage(username).then((hash) =>\r\n    {\r\n      const storedEmails = BackgroundGlobals.cacheStore.get(LocalStorageVariables.DWS_WHITELIST.name, []);\r\n      const isEmailSaved = storedEmails.includes(hash);\r\n\r\n      if (!isEmailSaved)\r\n      {\r\n        const cache = BackgroundGlobals.cacheStore.get(CacheStorageVariables.FORM_INFO.name, {});\r\n        cache[tabId] = {\r\n          username,\r\n          hostname\r\n        };\r\n        BackgroundGlobals.cacheStore.set(CacheStorageVariables.FORM_INFO.name, cache);\r\n      }\r\n    });\r\n\r\n    cb(true);\r\n  }\r\n\r\n  /**\r\n   * Form data for multistep login forms is saved then retrieved from content when the user is redirected & logged in to their service.\r\n   * This cached information will then be used to trigger the IDPS UI\r\n   * @param {*} param0\r\n   * @returns\r\n   */\r\n  [BackgroundCommands.SAVE_MULTISTEP_LOGIN]({ request, sender, cb })\r\n  {\r\n    const { completeLogin, data } = request;\r\n    const { hostname } = data;\r\n    const tabId = sender.tab.id;\r\n    const savedLogins = BackgroundGlobals.cacheStore.get(CacheStorageVariables.SAVE_MULTI_STEP_LOGIN.name, {});\r\n\r\n    if (!completeLogin)\r\n    {\r\n      const { username } = data;\r\n\r\n      // username is same as email here\r\n      digestMessage(username).then((hash) =>\r\n      {\r\n        const storedEmails = BackgroundGlobals.cacheStore.get(LocalStorageVariables.DWS_WHITELIST.name, []);\r\n        const isEmailSaved = storedEmails.includes(hash);\r\n\r\n        if (!isEmailSaved)\r\n        {\r\n          savedLogins[`${hostname}-${tabId.toString()}`] = username;\r\n          BackgroundGlobals.cacheStore.set(CacheStorageVariables.SAVE_MULTI_STEP_LOGIN.name, savedLogins);\r\n        }\r\n      });\r\n    }\r\n    else\r\n    {\r\n      const username = savedLogins[`${hostname}-${tabId.toString()}`];\r\n      // if the username was not an email address or it was whitelisted, then it was not saved and no need to continue.\r\n      if (!username)\r\n      {\r\n        return;\r\n      }\r\n\r\n      const cache = BackgroundGlobals.cacheStore.get(CacheStorageVariables.FORM_INFO.name, {});\r\n      cache[tabId] = {\r\n        hostname,\r\n        username\r\n      };\r\n      BackgroundGlobals.cacheStore.set(CacheStorageVariables.FORM_INFO.name, cache);\r\n\r\n      // Remove multistep login username\r\n      const updatedSavedLogins = { ...savedLogins };\r\n      delete updatedSavedLogins[`${hostname}-${tabId.toString()}`];\r\n      BackgroundGlobals.cacheStore.set(CacheStorageVariables.SAVE_MULTI_STEP_LOGIN.name, updatedSavedLogins);\r\n    }\r\n\r\n    cb(true);\r\n  }\r\n\r\n  /**\r\n   * Gets the cached form info for the current tab\r\n   * Really the info itself doesn't matter and isn't ever actually used.\r\n   * It is just consumed as a flag to tell the content_idps banner whether or not it it should show the popup.\r\n   * @param {*} param0\r\n   * @returns\r\n   */\r\n  [BackgroundCommands.GET_FORM_INFO_CACHE]({ sender, cb })\r\n  {\r\n    const tabId = sender.tab.id;\r\n    const cache = BackgroundGlobals.cacheStore.get(CacheStorageVariables.FORM_INFO.name, {});\r\n    const response = cache[tabId] || null;\r\n    cb(response);\r\n  }\r\n\r\n  // Remove cached form info for current tab\r\n  [BackgroundCommands.CLEAR_FORM_INFO_CACHE]({ sender, cb })\r\n  {\r\n    const tabId = sender.tab.id;\r\n    const cache = BackgroundGlobals.cacheStore.get(CacheStorageVariables.FORM_INFO.name, {});\r\n    const updatedCache = { ...cache };\r\n\r\n    if (!updatedCache[tabId]) return;\r\n    delete updatedCache[tabId];\r\n\r\n    BackgroundGlobals.cacheStore.set(CacheStorageVariables.FORM_INFO.name, updatedCache);\r\n    cb(true);\r\n  }\r\n\r\n  [BackgroundCommands.UPDATE_DWS_WHITELIST]({ request, cb })\r\n  {\r\n    digestMessage(request.email).then((hash) =>\r\n    {\r\n      const storedEmails = BackgroundGlobals.cacheStore.get(LocalStorageVariables.DWS_WHITELIST.name, []);\r\n      const isEmailSaved = storedEmails.includes(hash);\r\n\r\n      if (!isEmailSaved)\r\n      {\r\n        storedEmails.push(hash);\r\n        BackgroundGlobals.cacheStore.set(LocalStorageVariables.DWS_WHITELIST.name, storedEmails);\r\n      }\r\n    });\r\n\r\n    cb(true);\r\n  }\r\n\r\n  /** Get DWS info cached if any existing */\r\n  [BackgroundCommands.GET_CACHED_DWS_INFO]({ request, cb })\r\n  {\r\n    const { email } = request;\r\n    const cache = BackgroundGlobals.cacheStore.get(LocalStorageVariables.DWS_INFO.name, {});\r\n    const response = cache[email] || null;\r\n    cb(response);\r\n  }\r\n\r\n  [BackgroundCommands.CLEAR_CACHED_DWS_INFO]({ request, cb })\r\n  {\r\n    const { email } = request;\r\n    const dwsCache = BackgroundGlobals.cacheStore.get(LocalStorageVariables.DWS_INFO.name, {});\r\n\r\n    if (!dwsCache[email]) return;\r\n\r\n    delete dwsCache[email];\r\n    BackgroundGlobals.cacheStore.set(LocalStorageVariables.DWS_INFO.name, dwsCache);\r\n\r\n    cb(true);\r\n  }\r\n\r\n  [BackgroundCommands.UPDATE_DWS_SHOWN]({ request, cb })\r\n  {\r\n    const { email } = request;\r\n\r\n    // Update the last shown timestamp and counter\r\n    const dwsCache = BackgroundGlobals.cacheStore.get(LocalStorageVariables.DWS_INFO.name, {});\r\n    const savedInfo = dwsCache[email] || {};\r\n\r\n    const shownCount = savedInfo.shownCount ? savedInfo.shownCount + 1 : 1;\r\n    const lastShown = new Date().getTime(); // time: now\r\n\r\n    dwsCache[email] = { ...savedInfo, lastShown, shownCount };\r\n    BackgroundGlobals.cacheStore.set(LocalStorageVariables.DWS_INFO.name, dwsCache);\r\n\r\n    cb(true);\r\n  }\r\n\r\n  [BackgroundCommands.LAUNCH_IDPS_LOGIN]({ cb })\r\n  {\r\n    if (!BackgroundGlobals.UA_CLIENT)\r\n    {\r\n      BackgroundGlobals.UA_CLIENT = new UnifiedAuthClient();\r\n    }\r\n\r\n    BackgroundGlobals.UA_CLIENT.launchLoginFlow();\r\n    cb(true);\r\n  }\r\n\r\n  [BackgroundCommands.GET_APS_DETAILS]({ sender, cb })\r\n  {\r\n    const tabData = BackgroundGlobals.tabData.get(sender.tab.id);\r\n    cb(tabData.apsDetails || null);\r\n  }\r\n\r\n  [BackgroundCommands.FORM_PRE_CHECK_PASSED]({ sender, cb })\r\n  {\r\n    const { id } = sender.tab;\r\n    BackgroundGlobals.messageDispatcher.formPreCheckPassed(id);\r\n    cb(true);\r\n  }\r\n\r\n  [BackgroundCommands.SIGN_UP_FORM_DETECTED]({ sender, cb })\r\n  {\r\n    const { url, id } = sender.tab;\r\n    BackgroundGlobals.messageDispatcher.signUpFormDetected(url, id);\r\n\r\n    cb(true);\r\n  }\r\n\r\n  [BackgroundCommands.UPDATE_BK_NATIVE_SETTINGS]({ request, cb })\r\n  {\r\n    const { name, value } = request;\r\n    if (name in BackgroundGlobals.nativeSettings)\r\n    {\r\n      BackgroundGlobals.nativeSettings[name].value = value;\r\n    }\r\n\r\n    cb(true);\r\n  }\r\n\r\n  [BackgroundCommands.SHOW_SIDEBAR_MAIN]({ sender, cb })\r\n  {\r\n    const { url, id } = sender.tab;\r\n    BackgroundGlobals.messageDispatcher.showSidebarMain(id, url);\r\n    cb(true);\r\n  }\r\n\r\n  [BackgroundCommands.SET_FF_POLICY_COLLECTION]({ request, cb })\r\n  {\r\n    const { personal = null, activity = null } = request;\r\n    if (personal !== null)\r\n    {\r\n      BackgroundGlobals.cacheStore.set(LocalStorageVariables.FF_POLICY_PERSONAL_COLLECTION.name, personal);\r\n    }\r\n\r\n    if (activity !== null)\r\n    {\r\n      BackgroundGlobals.cacheStore.set(LocalStorageVariables.FF_POLICY_ACTIVITY_COLLECTION.name, activity);\r\n    }\r\n\r\n    cb(true);\r\n  }\r\n\r\n  [BackgroundCommands.SET_FF_POLICY_LAST_SHOWN]({ cb })\r\n  {\r\n    const now = new Date().getTime();\r\n    BackgroundGlobals.cacheStore.set(LocalStorageVariables.FF_POLICY_LAST_SHOWN.name, now);\r\n\r\n    cb(true);\r\n  }\r\n\r\n  [BackgroundCommands.GET_FD_WEIGHTS]({ cb })\r\n  {\r\n    const weights = FormDetection.getWeights();\r\n    cb(weights);\r\n  }\r\n\r\n  [BackgroundCommands.GET_FD_EXCEPTIONS]({ cb })\r\n  {\r\n    const exceptions = FormDetection.getExceptions();\r\n    cb(exceptions);\r\n  }\r\n\r\n  [BackgroundCommands.GET_FD_CRF_PARAMS]({ cb })\r\n  {\r\n    const crfParams = FormDetection.getCrfParams();\r\n    cb(crfParams);\r\n  }\r\n}\r\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\n// Common\r\nimport { extension } from '@extension/common/webextension';\r\nimport { BrowserType, BuildSettings } from '@extension/common/constants';\r\nimport BackgroundCommon from '@extension/common/background_common';\r\n\r\n/**\r\n * This class is for helping in download scanning. Upon download complete this class triggers native message.\r\n * Native application then initiates scanning of the downloaded files.\r\n */\r\nexport default class OnChangedDownloadListener\r\n{\r\n  onChanged(downloadDelta)\r\n  {\r\n    if (!BackgroundCommon.isPersonalPolicyEnabled())\r\n    {\r\n      return;\r\n    }\r\n\r\n    // state is an optional argument returned by the onChanged API\r\n    if (!downloadDelta.state) return;\r\n\r\n    const { previous, current } = downloadDelta.state;\r\n    if (previous === 'in_progress')\r\n    {\r\n      if (current === 'complete')\r\n      {\r\n        extension.downloads.search({ id: downloadDelta.id }, (items) =>\r\n        {\r\n          // For each downloaded item, tell native application that download has happened.\r\n          // Native application can initiate scanning for each of the downloaded items.\r\n          items.forEach((item) =>\r\n          {\r\n            BackgroundGlobals.messageDispatcher.onDownloadFinished(item);\r\n          });\r\n        });\r\n        BackgroundGlobals.downloadUrls.delete(downloadDelta.finalUrl);\r\n      }\r\n      else if (current === 'interrupted')\r\n      {\r\n        BackgroundGlobals.downloadUrls.delete(downloadDelta.finalUrl);\r\n      }\r\n    }\r\n  }\r\n\r\n  onCreated(downloadItem)\r\n  {\r\n    BackgroundGlobals.downloadUrls.add(downloadItem.finalUrl);\r\n  }\r\n\r\n  init()\r\n  {\r\n    // Not supported on Edge Browser\r\n    if (BuildSettings.BROWSER_TYPE === BrowserType.EDGE) return;\r\n    extension.downloads.onChanged.addListener(this.onChanged);\r\n    extension.downloads.onCreated.addListener(this.onCreated);\r\n  }\r\n}\r\n","/**\r\n * To know which is the active tab at any point in time. From background script if we call to get active tab it might not be obtained,\r\n * so this event is required to get which is the active tab. The active tab id is then stored in globals.\r\n */\r\n// Common\r\nimport { BrowserType, BlockState, BuildSettings, ExecuteCommands, Color } from '@extension/common/constants';\r\nimport { CacheStorageVariables } from '@extension/common/cache_store_variables';\r\nimport { extension } from '@extension/common/webextension';\r\nimport { Logger } from '@extension/common/logger';\r\n// Background\r\nimport BackgroundCommon from '@extension/common/background_common';\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport BrowserAction from '@extension/background/browser_action';\r\nimport BlockPageCommon from '@extension/background/block_page_common';\r\nimport WebRequestDispatcher, { WebRequestHelper } from '@extension/background/dispatchers/webrequest_dispatcher';\r\n\r\n/**\r\n * Fires when the tab is created.\r\n * @param {Object} tab - Details about the tab that was created\r\n */\r\nfunction onTabCreatedHandler(tab)\r\n{\r\n  if (!BackgroundCommon.isPersonalPolicyEnabled())\r\n  {\r\n    return;\r\n  }\r\n\r\n  let args = {};\r\n  let shouldSendNewTabEvent = true;\r\n\r\n  if (BrowserType.FIREFOX === BuildSettings.BROWSER_TYPE)\r\n  {\r\n    if (BackgroundGlobals.ffViewports !== null)\r\n    {\r\n      args = BackgroundGlobals.ffViewports;\r\n    }\r\n    else\r\n    {\r\n      // We dont have the firefox viewports yet\r\n      Logger.warn('Warning: raising new tab without firefox viewports');\r\n    }\r\n  }\r\n\r\n  if (BrowserType.CHROME === BuildSettings.BROWSER_TYPE)\r\n  {\r\n    const { pendingUrl } = tab;\r\n    const whitelist = [\r\n      'https://chrome.google.com/webstore/detail/mcafee%C2%AE-secure-search/enppghjcblldgigemljohkgpcompnjgh',\r\n    ];\r\n\r\n    if (pendingUrl && (BackgroundCommon.isExtensionUrl(pendingUrl) || whitelist.includes(pendingUrl)))\r\n    {\r\n      shouldSendNewTabEvent = false;\r\n    }\r\n  }\r\n\r\n  if (shouldSendNewTabEvent) BackgroundGlobals.messageDispatcher.executeCommand({ command_id: ExecuteCommands.RAISE_NEW_TAB_EVENT, args });\r\n}\r\n\r\n/**\r\n * Fired multiple times when the tab is updated (user navigating to a new URL in a tab).\r\n * This handler is only targetting and firing when the status property of the tab is changed (loading|complete).\r\n * @param {number} tabId      - ID of the tab that was updated\r\n * @param {Object} changeInfo - Containing properties of the tab properties changed\r\n * @param {Object} tab        - New state of the tab\r\n */\r\nasync function onTabUpdatedHandler(tabId, { status }, tab)\r\n{\r\n  if (!BackgroundCommon.isPersonalPolicyEnabled())\r\n  {\r\n    return;\r\n  }\r\n\r\n  if (status === 'loading')\r\n  {\r\n    // Assign meta data to each individual tabs differentiated by their respective ids\r\n    const newTabData = {\r\n      url: tab.url,\r\n      apsDetails: null, // APS related: details used by content script (populated by injector code)\r\n      injectDetailsByFrameId: null, // Clearing Injector's \"injectedFiles\" files\r\n    };\r\n\r\n    Logger.log(`Updating APS Details for tabId : ${tabId} to null`);\r\n\r\n    const tabData = BackgroundGlobals.tabData.get(tabId);\r\n\r\n    Logger.log(`tabData.url (${tabData.url}) tab.url : (${tab.url})`);\r\n\r\n    if (tabData !== null && tabData.url === tab.url)\r\n    {\r\n      Logger.log(`Not updating tab data apsDetails as its same as earlier Url: ${tabData.url} tabId:${tabId} `);\r\n      newTabData.apsDetails = tabData.apsDetails !== undefined ? tabData.apsDetails : null;\r\n    }\r\n\r\n    // Set the new tab data\r\n    BackgroundGlobals.tabData.update(tabId, newTabData);\r\n  }\r\n  else if (status === 'complete')\r\n  {\r\n    if (tab.url)\r\n    {\r\n      // Set browser action icon\r\n      // Set icon to McAfee Secure if tab contains a block page\r\n      if (BackgroundCommon.isSafeUrl(tab.url))\r\n      {\r\n        BrowserAction.setIcon(Color.GREEN, tabId);\r\n      }\r\n      // Set icon to disabled if tab contains a non-webpage\r\n      else if (!BackgroundCommon.isProperWebURL(tab.url))\r\n      {\r\n        BrowserAction.setIcon(Color.DISABLED, tabId);\r\n      }\r\n\r\n      // Online mode only - update browser action icon (if GTI resposne comes early)\r\n      // Note: browser action icon is updated either in onHeadersReceived() or here, depending on when GTI response arrives\r\n      // Browser resets browser action (BA) on each navigation so we have to be careful\r\n      // Scenario: onHeadersReceived sends GTI request -> GTI request comes and updates BA ->\r\n      // browser resets BA -> tabs.onUpdated updates BA again\r\n      else\r\n      {\r\n        // Update the browser action icon data\r\n        const color = BackgroundGlobals.messageDispatcher.toBrowserActionColor(tab.url);\r\n        if (color !== null)\r\n        {\r\n          BrowserAction.setIcon(color, tabId);\r\n        }\r\n      }\r\n\r\n      redirectIfNotBlocked(tab.url, tabId);\r\n      WebRequestDispatcher.handleTopFrameNavigateComplete(tab.url, tabId);\r\n    }\r\n  }\r\n}\r\n\r\n// Usually block page redirection happens on the webrequest listener, however there is an edge case\r\n// where the browser might ignore the tabs.update command (more specifically on tab re-navigate/refresh).\r\n// To fix this we would also do a url reputation check on tab complete. Note that we are not making a GTI\r\n// request call, but just checking if the URL's reputation is in the GTI cache.\r\n// - If the URL's reputation is not in the cache, then webrequest is still yet to perform tab.update so we\r\n// can let webrequest handle the redirection (and the tab has completely loaded)\r\n// - Otherwise, if the URL's reputation is in the cache and the tab url is malicious, then we can assume that\r\n// the webrequest was able to get the URL reputation but failed to redirect (tab.update), as a result, we will\r\n// take the tab's url and check the GTI cache for the reputation, if it needs to be blocked we would redirect here.\r\nasync function redirectIfNotBlocked(url, tabId)\r\n{\r\n  const results = await WebRequestHelper.toUrlReputation(url, tabId, 0, null, true);\r\n\r\n  const {\r\n    color = null,\r\n    statusOfBlocking = null,\r\n    typoDomain = null,\r\n    whitelisted,\r\n    categories = [],\r\n  } = results;\r\n\r\n  const isBlocked = [...BlockState].includes(statusOfBlocking);\r\n\r\n  // We can return early if it's not blocked or whitelisted\r\n  if (whitelisted || !isBlocked)\r\n  {\r\n    return;\r\n  }\r\n\r\n  // Navigate to block page URL. If it is typosquatted then typoDomain is a valid string\r\n  const qUrl = typoDomain !== null ? typoDomain : url;\r\n  const blockPageStatus = BlockPageCommon.toBlockPageUrl(statusOfBlocking, color, qUrl);\r\n  BackgroundGlobals.tabData.setTabBlockPageData(tabId, { bState: statusOfBlocking, url: qUrl, categories });\r\n  extension.tabs.update(tabId, { url: blockPageStatus.url });\r\n}\r\n\r\n/**\r\n * Fires when the tab is closed.\r\n * @param {number} tabId - ID of the tab being closed\r\n */\r\nfunction onTabRemoveHandler(tabId)\r\n{\r\n  if (!BackgroundCommon.isPersonalPolicyEnabled())\r\n  {\r\n    return;\r\n  }\r\n\r\n  // send MFW_REQUEST to native\r\n  BackgroundGlobals.messageDispatcher.nativeDispatcher.onTabClose();\r\n\r\n  BackgroundGlobals.tabData.delete(tabId);\r\n\r\n  // clean RAT visited domains data for a closed tab\r\n  cleanRatDomainsShowing(tabId);\r\n}\r\n\r\nfunction cleanRatDomainsShowing(tabId)\r\n{\r\n  const allTabDomains = BackgroundGlobals.cacheStore.get(CacheStorageVariables.RAT_DETECTION_SHOWING.name);\r\n\r\n  if (!allTabDomains) return;\r\n\r\n  delete allTabDomains[tabId];\r\n  BackgroundGlobals.cacheStore.set(CacheStorageVariables.RAT_DETECTION_SHOWING.name, allTabDomains);\r\n}\r\n\r\nexport default class TabListener\r\n{\r\n  init()\r\n  {\r\n    extension.tabs.onCreated.addListener(onTabCreatedHandler);\r\n    extension.tabs.onUpdated.addListener(onTabUpdatedHandler);\r\n    extension.tabs.onRemoved.addListener(onTabRemoveHandler);\r\n  }\r\n}\r\n","// Common\nimport { extension } from '@extension/common/webextension';\nimport BackgroundUtils from '@extension/background/background_utils';\nimport WebRequestDispatcher from '@extension/background/dispatchers/webrequest_dispatcher';\nimport BackgroundCommon from '@extension/common/background_common';\nimport { BackgroundGlobals } from '@extension/background/background_globals';\n\n//////////////////////////////////////////////////////////\nconst extensionURL = `chrome-extension://${extension.runtime.id}`;\n//////////\n\nconst howToWorkUrls = [\n  'https://www.mcafee.com/consumer/v/wa-chrome-how.html',\n  'https://www.mcafee.com/consumer/v/wa-firefox-how.html',\n  'https://www.mcafee.com/consumer/v/wa-edge-how.html',\n];\n\nconst redirectPage = 'html/foreground_sidebar_main.html';\n\n/**\n * TODO: Comment\n */\nexport default class WebRequestListener\n{\n  constructor()\n  {\n    this.onBeforeSendHeaders = this.onBeforeSendHeaders.bind(this);\n    this.onSendHeaders = this.onSendHeaders.bind(this);\n    this.onNavigateComplete = this.onNavigateComplete.bind(this);\n    this.onHeadersReceived = this.onHeadersReceived.bind(this);\n    this.onErrorOccurred = this.onErrorOccurred.bind(this);\n\n//////////////////////////////////////////////////////////////\n    this.onBeforeRequest = this.onBeforeRequest.bind(this);\n//////////////\n  }\n\n  onSendHeaders(details)\n  {\n    const { frameId, tabId } = details;\n    const isTopFrame = frameId <= 0;\n    if (isTopFrame)\n    {\n      BackgroundGlobals.tabData.reset(tabId);\n    }\n  }\n\n  onBeforeSendHeaders(details)\n  {\n    if (!BackgroundCommon.isPersonalPolicyEnabled())\n    {\n      return;\n    }\n\n    const { url, tabId, requestId, requestHeaders } = details;\n\n    if (howToWorkUrls.includes(url.toLowerCase()))\n    {\n      extension.tabs.update(tabId, { url: `${extension.runtime.getURL(redirectPage)}` });\n    }\n\n    if (!requestHeaders) return;\n    for (const { name, value } of requestHeaders)\n    {\n      if (name.toLowerCase() === 'referer')\n      {\n        const requestData = { referer: value.toLowerCase() };\n        BackgroundUtils.setRequestData(tabId, requestId, requestData);\n      }\n    }\n  }\n\n  onNavigateComplete(details)\n  {\n    if (!BackgroundCommon.isPersonalPolicyEnabled())\n    {\n      return;\n    }\n\n    const { url, frameId, tabId } = details;\n    WebRequestDispatcher.onNavigateComplete(url, tabId, frameId);\n  }\n\n  onHeadersReceived(details)\n  {\n    if (!BackgroundCommon.isPersonalPolicyEnabled())\n    {\n      return;\n    }\n\n    const {\n      url, responseHeaders, tabId,\n      requestId, frameId,\n    } = details;\n\n    // Skip URL reputation for downloads/attachments if native is installed as native can then go and do a file reputation check .\n    // In the instance where native application is not available we will check for URL reputation as that will provide maybe over aggressive, but still protection.\n    if (BackgroundGlobals.isNativeConnected)\n    {\n      // Check if this request is an executable. We dont need to Run GTI\n      // request for executables. This will be handled by Download Scanning\n      for (const { name, value } of responseHeaders)\n      {\n        const lname = name.toLowerCase();\n        const lval = value.toLowerCase();\n\n        if (lname === 'content-disposition' && lval.includes('attachment'))\n        {\n          return;\n        }\n\n        if (lname === 'content-type')\n        {\n          for (let index = 0; index < BackgroundGlobals.permittedContentTypes.length; ++index)\n          {\n            if (lval.includes(BackgroundGlobals.permittedContentTypes[index]))\n            {\n              return;\n            }\n          }\n        }\n      }\n    }\n\n    // Get the Referer from onBeforeSendHeaders\n    const requestData = BackgroundUtils.getRequestData(tabId, requestId);\n    BackgroundUtils.deleteRequestData(tabId, requestId);\n    WebRequestDispatcher.onHeadersReceived(url, tabId, frameId, requestData.referer);\n  }\n\n  // If error occurs ie. the page doesn't exist anymore, call GTI and see the reputation of the url anyways. If malicious, show block page.\n  onErrorOccurred(details)\n  {\n    if (!BackgroundCommon.isPersonalPolicyEnabled())\n    {\n      return;\n    }\n\n    const { url, tabId, requestId, frameId } = details;\n\n    BackgroundUtils.deleteRequestData(tabId, requestId);\n    WebRequestDispatcher.onHeadersReceived(url, tabId, frameId, null);\n  }\n\n////////////////////////////////////////////////////////////\n  onBeforeRequest(details)\n  {\n    const deconstructUrl = new URL(details.url);\n\n    // as long as request is made by our extension, shown by who the initator is\n    if ((details.initiator && details.initiator.startsWith(`${extensionURL}`))\n    // ignore all requests not for images\n      || details.type !== 'image'\n    // make sure the images contain our secret\n      || (details.url.startsWith(`${extensionURL}`) && details.type === 'image' && deconstructUrl.searchParams.get('secret') === BackgroundGlobals.WA_IMAGE_SECRET))\n    {\n      return;\n    }\n    BackgroundCommon.blockRequest(details.tabId, details.url, 'Blocked unauthorized access to extension resources:');\n  }\n////////////\n\n  init()\n  {\n    const urls = ['http://*/*', 'https://*/*', 'ftp://*/*'];\n    const requestFilters = ['requestHeaders'];\n\n////////////////////////////////////\n    requestFilters.push('extraHeaders');\n//////////////\n\n    extension.webRequest.onBeforeSendHeaders.addListener(this.onBeforeSendHeaders, { urls, types: ['main_frame', 'sub_frame'] }, requestFilters);\n    extension.webRequest.onSendHeaders.addListener(this.onSendHeaders, { urls, types: ['main_frame'] });\n    extension.webRequest.onHeadersReceived.addListener(this.onHeadersReceived, { urls, types: ['main_frame', 'sub_frame'] }, ['responseHeaders']);\n    extension.webRequest.onCompleted.addListener(this.onNavigateComplete, { urls, types: ['main_frame', 'sub_frame'] });\n    extension.webRequest.onErrorOccurred.addListener(this.onErrorOccurred, { urls, types: ['main_frame', 'sub_frame'] });\n\n//////////////////////////////////////////////////////////////\n    extension.webRequest.onBeforeRequest.addListener(this.onBeforeRequest, { urls: [`${extensionURL}/*`] });\n//////////////\n  }\n}\n","// Common\r\nimport { extension } from '@extension/common/webextension';\r\n// Telemetry\r\nimport { InteractionTypes, EventNames } from '@extension/telemetry/common_telemetry';\r\nimport ContextTelemetry from '@extension/telemetry/context_telemetry';\r\nimport { BackgroundGlobals } from '../background_globals';\r\n\r\nexport default class BrowserActionListener\r\n{\r\n  async browserAction({ id, url })\r\n  {\r\n    // For Handling Telemetry\r\n    BrowserActionListener.sendTelemetry();\r\n\r\n    BackgroundGlobals.messageDispatcher && BackgroundGlobals.messageDispatcher.showSidebarMain(id, url);\r\n  }\r\n\r\n  static sendTelemetry()\r\n  {\r\n    const sidebarTelemetry = {\r\n      identifier: EventNames.SIDEBAR_PANEL,\r\n      interaction_type: InteractionTypes.SIDEBAR_PANEL.MAIN,\r\n      isFromBackground: true\r\n    };\r\n    ContextTelemetry.handle(sidebarTelemetry);\r\n\r\n    const actionClickTelemetry = {\r\n      identifier: EventNames.BROWSER_ACTION_CLICKED,\r\n      count: 0,\r\n      isFromBackground: true\r\n    };\r\n    ContextTelemetry.handle(actionClickTelemetry);\r\n  }\r\n\r\n  init()\r\n  {\r\n    extension.action.onClicked.addListener(this.browserAction);\r\n  }\r\n}\r\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport CryptojackingListener from '@extension/background/listeners/cryptojacking_listener';\r\nimport ExternalMessageListener from '@extension/background/listeners/external_message_listener';\r\nimport MessageListener from '@extension/background/listeners/message_listener';\r\nimport OnChangedDownloadListener from '@extension/background/listeners/onchanged_download_listener';\r\nimport TabListener from '@extension/background/listeners/tab_listener';\r\nimport WebRequestListener from '@extension/background/listeners/webrequest_listener';\r\nimport BrowserActionListener from '@extension/background/listeners/browser_action_listener';\r\n\r\nexport const ListenerTypes = {\r\n  TAB: 0,\r\n  MESSAGE: 1,\r\n  WEB_REQUEST: 2,\r\n  DOWNLOAD: 3,\r\n  BROWSER_ACTION: 4,\r\n  EXTERNAL_MESSAGE: 5,\r\n  CRYPTO: 6,\r\n};\r\n/**\r\n * Create and initialize the various listeners used in the extension.\r\n */\r\nexport default class ListenerManager\r\n{\r\n  constructor()\r\n  {\r\n    this.listeners = new Map();\r\n  }\r\n\r\n  getListener(listenerType)\r\n  {\r\n    return this.listeners.get(listenerType);\r\n  }\r\n\r\n  /**\r\n   * Returns a list of all the supported listeners for a particular browser.\r\n   * @returns {Object[]} - List of initialized listeners\r\n   */\r\n  getListeners()\r\n  {\r\n    if (this.listeners.size === 0)\r\n    {\r\n      this.listeners.set(ListenerTypes.TAB, new TabListener());// To listen for active tabs.\r\n      this.listeners.set(ListenerTypes.MESSAGE, new MessageListener());// For IPC between content chrome process.\r\n      this.listeners.set(ListenerTypes.WEB_REQUEST, new WebRequestListener());// Web Request listener is for all web requests from pages.\r\n      this.listeners.set(ListenerTypes.DOWNLOAD, new OnChangedDownloadListener());// To listen for download events\r\n      this.listeners.set(ListenerTypes.BROWSER_ACTION, new BrowserActionListener());// Listen to browser Action events\r\n      this.listeners.set(ListenerTypes.EXTERNAL_MESSAGE, new ExternalMessageListener());// External msg listner between extensions\r\n      if (!BackgroundGlobals.nativeSettings.CRYPTOJACKING_DISABLED.value)\r\n      {\r\n        this.listeners.set(ListenerTypes.CRYPTO, new CryptojackingListener());\r\n      }\r\n    }\r\n\r\n    return this.listeners.values();\r\n  }\r\n}\r\n","export const fetchFile = async (uri) =>\r\n{\r\n  let result = null;\r\n  if (!uri)\r\n  {\r\n    return result;\r\n  }\r\n\r\n  try\r\n  {\r\n    result = await (await fetch(uri)).text();\r\n  } catch (error) {\r\n    console.log(`WASM failed to fetch: ${error.message}`);\r\n  }\r\n\r\n  return result;\r\n};","import { fetchFile } from './snippets/wasm-lib-422e0d39f39ae3db/src/js-lib/js_lib.js';\n\nlet wasm;\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_16(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__he1ef291dda6206af(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\nfunction __wbg_adapter_39(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h821434c694c09150(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\nfunction notDefined(what) { return () => { throw new Error(`${what} is not defined`); }; }\n/**\n* @param {string} _uuid\n* @returns {Promise<any>}\n*/\nexport function initiate(_uuid) {\n    const ptr0 = passStringToWasm0(_uuid, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.initiate(ptr0, len0);\n    return takeObject(ret);\n}\n\n/**\n* @param {string} _msg\n* @returns {Promise<any>}\n*/\nexport function wasm_gti_hmac_sha1(_msg) {\n    const ptr0 = passStringToWasm0(_msg, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.wasm_gti_hmac_sha1(ptr0, len0);\n    return takeObject(ret);\n}\n\n/**\n* @param {string} msg\n* @returns {Promise<any>}\n*/\nexport function wasm_typosquat_sha256(msg) {\n    const ptr0 = passStringToWasm0(msg, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.wasm_typosquat_sha256(ptr0, len0);\n    return takeObject(ret);\n}\n\n/**\n* @param {string} cipher\n* @returns {Promise<any>}\n*/\nexport function wasm_typosquat_decrypt(cipher) {\n    const ptr0 = passStringToWasm0(cipher, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.wasm_typosquat_decrypt(ptr0, len0);\n    return takeObject(ret);\n}\n\n/**\n*\n*    input object should be JSON.stringify() before calling:\n*    {\n*        HttpMethod: String,\n*        Body: String,\n*        ClientId:  String,\n*    }\n**\n* @param {string} _req_params\n* @returns {Promise<any>}\n*/\nexport function generate_value_for_ac(_req_params) {\n    const ptr0 = passStringToWasm0(_req_params, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.generate_value_for_ac(ptr0, len0);\n    return takeObject(ret);\n}\n\n/**\n*\n*    For safety, currently only providing App key for WSS product :\n*    @_product: String, only support \"WSS\" currently\n*    @_key_name: String, only supoort \"APP_KEY\" currently\n**\n* @param {string} _product\n* @param {string} _key_name\n* @returns {Promise<any>}\n*/\nexport function get_product_key(_product, _key_name) {\n    const ptr0 = passStringToWasm0(_product, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passStringToWasm0(_key_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    const ret = wasm.get_product_key(ptr0, len0, ptr1, len1);\n    return takeObject(ret);\n}\n\n/**\n*\n*    WA app key value :\n*    @_product: String, \"WA\"\n*    @_key_name: String, \"APP_KEY\"\n**\n* @param {string} _product\n* @param {string} _key_name\n* @returns {Promise<any>}\n*/\nexport function get_wa_app_key(_product, _key_name) {\n    const ptr0 = passStringToWasm0(_product, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passStringToWasm0(_key_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    const ret = wasm.get_wa_app_key(ptr0, len0, ptr1, len1);\n    return takeObject(ret);\n}\n\n/**\n*\n*    WA shared key value :\n*    @_product: String, \"WA\"\n*    @_key_name: String, \"SHARED_KEY\"\n**\n* @param {string} _product\n* @param {string} _key_name\n* @returns {Promise<any>}\n*/\nexport function get_wa_shared_key(_product, _key_name) {\n    const ptr0 = passStringToWasm0(_product, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passStringToWasm0(_key_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    const ret = wasm.get_wa_shared_key(ptr0, len0, ptr1, len1);\n    return takeObject(ret);\n}\n\n/**\n*\n*    To encrypt a JSON string by using Unified Auth AES Encryption algorithms,\n*    input object should be JSON.stringify() before calling:\n*    {\n*        ea: 'si_lvs2@mcafee.com',\n*        cc: 'si.hide=rc'\n*    }\n**\n* @param {string} _msg\n* @returns {Promise<any>}\n*/\nexport function uauth_aes_encrypt(_msg) {\n    const ptr0 = passStringToWasm0(_msg, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.uauth_aes_encrypt(ptr0, len0);\n    return takeObject(ret);\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_3ed288a247f13ea5 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_fetchFile_d67988fa46b8401a = function(arg0, arg1) {\n        const ret = fetchFile(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_842e65b843962f56 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_error_8ff19d586a987aef = function(arg0) {\n        console.error(getObject(arg0));\n    };\n    imports.wbg.__wbg_error_5bd12f214e606440 = function(arg0, arg1) {\n        console.error(getObject(arg0), getObject(arg1));\n    };\n    imports.wbg.__wbg_log_e8ba7b992c7ad0eb = function(arg0) {\n        console.log(getObject(arg0));\n    };\n    imports.wbg.__wbg_self_f865985e662246aa = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_crypto_bfb05100db79193b = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_msCrypto_f6dddc6ae048b7e2 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_static_accessor_MODULE_39947eb3fe77895f = function() {\n        const ret = module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_c59851dfa0dc7e78 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_newwithlength_8f0657faca9f1422 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbg_resolve_a9a87bdd64e9e62c = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_ce526c837d07b68f = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new0_0ff7eb5c1486f3ec = function() {\n        const ret = new Date();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_toISOString_779f1216e525b3f6 = function(arg0) {\n        const ret = getObject(arg0).toISOString();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_slice_9cf884e0fc969901 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).slice(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_random_f1dabdd9f148bad5 = typeof Math.random == 'function' ? Math.random : notDefined('Math.random');\n    imports.wbg.__wbg_floor_ecd9cd89028e4982 = typeof Math.floor == 'function' ? Math.floor : notDefined('Math.floor');\n    imports.wbg.__wbg_randomFillSync_d90848a552cbd666 = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_subarray_da527dbd24eafb6b = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_57e4008f45f0e105 = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_length_0acb1cf9bbaf8519 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_7af23f65f6c64548 = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_cc9018bd6f283b6f = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_f25e869e4565d2a2 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_new_37705eed627d5ed9 = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_39(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbindgen_closure_wrapper98 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 36, __wbg_adapter_16);\n        return addHeapObject(ret);\n    };\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\n// WASM loading script\r\nimport init, { initiate,\r\n  wasm_gti_hmac_sha1,\r\n  wasm_typosquat_sha256,\r\n  wasm_typosquat_decrypt,\r\n  generate_value_for_ac,\r\n  get_product_key,\r\n  get_wa_app_key,\r\n  get_wa_shared_key,\r\n  uauth_aes_encrypt } from '@webassembly/wasm-lib/pkg/wasm_lib';\r\n\r\n/**\r\n * Generating WASM module in run-time \r\n */\r\nexport default class WasmGenerator\r\n{\r\n  static async generateWASM()\r\n  {\r\n    if (BackgroundGlobals.wasm) \r\n    {\r\n      return BackgroundGlobals.wasm;\r\n    }\r\n\r\n    // generate a new wasm\r\n    const wasmBinary = chrome.runtime.getURL('wasm_lib.wasm');\r\n\r\n    const wasm = {};\r\n    wasm.binary = await init(wasmBinary);\r\n    wasm.init = initiate;\r\n    wasm.wasm_gti_hmac_sha1 = wasm_gti_hmac_sha1;\r\n    wasm.wasm_typosquat_sha256 = wasm_typosquat_sha256;\r\n    wasm.wasm_typosquat_decrypt = wasm_typosquat_decrypt;\r\n    wasm.generate_value_for_ac = generate_value_for_ac;\r\n    wasm.get_product_key = get_product_key;\r\n    wasm.get_wa_app_key = get_wa_app_key;\r\n    wasm.get_wa_shared_key = get_wa_shared_key;\r\n    wasm.uauth_aes_encrypt = uauth_aes_encrypt;\r\n\r\n    return wasm;\r\n  }\r\n}","/* eslint-disable camelcase */\r\n// c++ is sending in snakecase, change to camel case here later\r\n\r\n// Common\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport SmartNativeClient from '@mcafee/browser-host/smartnativeclient';\r\nimport { Logger } from '@extension/common/logger';\r\nimport { LocalStorageVariables } from '@extension/common/cache_store_variables';\r\nimport MTIInitializer from '@extension/background/mti_initializer';\r\n\r\nconst WSSExtensionCommands = {\r\n  HANDSHAKE_GREETING: 8,\r\n  SUBSCRIBE: 116,\r\n  SET: 117,\r\n};\r\n\r\nexport const WSSNativeCommands = {\r\n  PUBLISH: 115,\r\n  SUBSCRIBE: 116,\r\n  SET: 117,\r\n  GET: 118,\r\n};\r\n\r\nexport const SubRequestTypes = {\r\n  WA_EVENT: 'WA.EVENT',\r\n  SET_SETTINGS_EXTN: 'SET.SETTINGS.TO.EXTN',\r\n};\r\n\r\n/**\r\n * Dispatcher class handling all communication between extension and WSS native.\r\n * Both extension and native maintain a persistent connection.\r\n */\r\nexport default class NativeWSSMessageDispatcher\r\n{\r\n  constructor()\r\n  {\r\n    this.wssClient = null;\r\n  }\r\n\r\n  /**\r\n   * Initialize the dispatcher class, setting up the event listeners and initializing setting variables\r\n   * @param {Object} port - Runtime port object\r\n   * @param {String} initialMessage - TODO: Comment\r\n   */\r\n  init()\r\n  {\r\n    try\r\n    {\r\n      this.connectToWssPort();\r\n      this.sendSubscribeRequest();\r\n      this.sendGetSettingsRequest();\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(e.message);\r\n    }\r\n  }\r\n\r\n  connectToWssPort()\r\n  {\r\n    /**\r\n     * Incoming messages from wss browserhost\r\n     * @returns {Boolean} Return false to disallow forwarding of message to other extensions\r\n     */\r\n    const onWssMessage = (message) =>\r\n    {\r\n      this.processMessage(message);\r\n      return false;\r\n    };\r\n\r\n    /**\r\n     * When external extension or wss browserhost disconnected from long-lived connection\r\n     */\r\n    const onWssDisconnectEvent = (port) =>\r\n    {\r\n      Logger.warn(`Error connecting to wss host: ${port.error}`);\r\n      if (BackgroundGlobals.telemetryEngine)\r\n      {\r\n        BackgroundGlobals.telemetryEngine.updateContext('wss_installed', 'false');\r\n      }\r\n    };\r\n\r\n    // wss browserhost connection\r\n    this.wssClient = new SmartNativeClient('wss.mcafee.chrome.extension', null, onWssMessage, onWssDisconnectEvent, Logger);\r\n    this.wssClient.init(async (status) =>\r\n    {\r\n      if (BackgroundGlobals.telemetryEngine)\r\n      {\r\n        BackgroundGlobals.telemetryEngine.updateContext('wss_installed', status.connected.toString());\r\n      }\r\n\r\n      if (!status.connected)\r\n      {\r\n        Logger.warn('Failed to connect to wss host wss.mcafee.chrome.extension');\r\n        return;\r\n      }\r\n\r\n      const wssResponse = await this.getWssParams();\r\n      const { csp_client_id: cspClientId,\r\n        provision_id: provisionId,\r\n        entitled_products: entitedProducts } = wssResponse;\r\n\r\n      if (!cspClientId || !provisionId || !entitedProducts)\r\n      {\r\n        BackgroundGlobals.IDPS_IS_ENTITLED = false;\r\n      }\r\n      else\r\n      {\r\n        BackgroundGlobals.IDPS_CSP_CLIENT_ID = cspClientId;\r\n        BackgroundGlobals.IDPS_PROVISION_ID = provisionId;\r\n        BackgroundGlobals.IDPS_IS_ENTITLED = entitedProducts.includes('IDPS');\r\n      }\r\n    });\r\n  }\r\n\r\n  sendSubscribeRequest()\r\n  {\r\n    this.postMessage({\r\n      request_type: WSSNativeCommands.SUBSCRIBE,\r\n      payload:\r\n      {\r\n        sub_request_type: SubRequestTypes.SET_SETTINGS_EXTN\r\n      }\r\n    });\r\n  }\r\n\r\n  sendGetSettingsRequest()\r\n  {\r\n    this.postMessage({\r\n      request_type: WSSNativeCommands.GET,\r\n      payload:\r\n      {\r\n        keys: Array.from(BackgroundGlobals.wpsRequestedSettings)\r\n      }\r\n    });\r\n  }\r\n\r\n  postMessage(message)\r\n  {\r\n    this.wssClient.postMessage(message);\r\n  }\r\n\r\n  getWssParams()\r\n  {\r\n    return new Promise((resolve) =>\r\n    {\r\n      const fn = (res) => resolve(res);\r\n      this.wssClient.postMessage({\r\n        request_type: 108,\r\n        id: 0,\r\n        payload: {\r\n          app_id: 'a053060c-3a34-11e4-8a01-005056b7244f'\r\n        },\r\n      }, fn);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles the default behaviour for messages being returned or captured by the \"onMessage\" event listener.\r\n   * @param {Object} nativeResponse - JSON serialized object containing information send from the native app\r\n   */\r\n  processMessage(nativeResponse)\r\n  {\r\n    const message = JSON.stringify(nativeResponse);\r\n\r\n    try\r\n    {\r\n      this.processInwardMessage(nativeResponse);\r\n    }\r\n    catch (error)\r\n    {\r\n      Logger.log(`Native json message may be missing some keys: ${message} + ${error.message} `);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse the incoming JSON serialized message from the native app.\r\n   * @param {Object} nativeMessage - JSON serialized object which was sent from native\r\n   */\r\n  processInwardMessage(nativeMessage)\r\n  {\r\n    const { payload, request_type } = nativeMessage;\r\n    const commandName = Object.keys(WSSExtensionCommands).find((key) => WSSExtensionCommands[key] === request_type);\r\n    Logger.log(`Processing message from binary in wps handler: ${request_type} (${commandName})\\n${JSON.stringify(payload)}`);\r\n\r\n    switch (request_type)\r\n    {\r\n      case WSSExtensionCommands.HANDSHAKE_GREETING:\r\n        this.processHandshake(payload);\r\n        break;\r\n      case WSSExtensionCommands.SET:\r\n        this.setRequestType(payload);\r\n        break;\r\n    }\r\n  }\r\n\r\n  processHandshake(payload)\r\n  {\r\n    const { version } = payload;\r\n    if (version && version.startsWith('WPS'))\r\n    {\r\n      // Initialize HTI here if native flags are read from WA Native Host already or if HTI is not yet initialized.\r\n      BackgroundGlobals.isWPSInstalled = true;\r\n      MTIInitializer.init();\r\n    }\r\n    else\r\n    {\r\n      BackgroundGlobals.WSS_INSTALLED = true;\r\n    }\r\n  }\r\n\r\n  setRequestType(payload)\r\n  {\r\n    const { key, value } = payload;\r\n    let newValue = value;\r\n    const localStorageKeys = Object.keys(LocalStorageVariables);\r\n    if (localStorageKeys.indexOf(key) !== -1)\r\n    {\r\n      const settingValue = BackgroundGlobals.cacheStore.get(key);\r\n      const typeOfValue = typeof settingValue;\r\n\r\n      if (typeOfValue === 'number')\r\n      {\r\n        newValue = Number(value);\r\n      }\r\n      Logger.log(`[WPS Native] Recieved a set request from WPS Native ${JSON.stringify(payload)}`);\r\n      BackgroundGlobals.cacheStore.set(key, newValue);\r\n    }\r\n  }\r\n\r\n  setSettings(settingName, settingValue)\r\n  {\r\n    // append the browserType at the end to indicate which browser is being used\r\n    if (settingName === 'SEARCH_ANNOTATION_OPTION' || settingName === 'SMA_ANNOTATION_OPTIONS')\r\n    {\r\n      settingName = `${settingName}_${BackgroundGlobals.browserType}`;\r\n    }\r\n    const strSettingValue = settingValue.toString();\r\n    const payload = {\r\n      key: settingName,\r\n      value: strSettingValue,\r\n    };\r\n    const request = {\r\n      request_type: WSSNativeCommands.SET,\r\n      payload\r\n    };\r\n    Logger.log(`[WPS Native] Sent settings event to WPS Native ${JSON.stringify(request)}`);\r\n    this.postMessage(request);\r\n  }\r\n}\r\n","// Background\r\nimport { ContentCommands, SideBarCommands } from '@extension/common/commands';\r\nimport InjectBase from '@extension/background/content_injector/inject_base';\r\nimport BackgroundUtils from '@extension/background/background_utils';\r\nimport { Logger } from '@extension/common/logger';\r\n\r\nexport default class InjectSidebarMain extends InjectBase\r\n{\r\n  constructor({ url, tabId })\r\n  {\r\n    super('content_sidebar_main.js');\r\n    this.url = url;\r\n    this.tabId = tabId;\r\n    this.pingCommand = ContentCommands.PING_CONTENT_SIDEBAR_MAIN;\r\n\r\n    // Upon first failure to inject (on non-content script page)\r\n    // we should not continue to try and just simply show the foreground page\r\n    this.keepInjecting = false;\r\n  }\r\n\r\n  check()\r\n  {\r\n    // Ignore browser action to trigger foreground sidebar page\r\n    // since user is already in the page\r\n    if (this.url.includes('html/foreground_sidebar_main.html'))\r\n    {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  runAfter(success, previouslyInjected)\r\n  {\r\n    // If it has been previosly injected we can simply just call a send Message\r\n    if (previouslyInjected)\r\n    {\r\n      this.triggerSidebarMain();\r\n      return;\r\n    }\r\n\r\n    if (!success)\r\n    {\r\n      this.triggerForegroundPage();\r\n    }\r\n  }\r\n\r\n  triggerForegroundPage()\r\n  {\r\n    BackgroundUtils.focusOrCreateTab(chrome.runtime.getURL('html/foreground_sidebar_main.html'));\r\n  }\r\n\r\n  triggerSidebarMain()\r\n  {\r\n    const request = {\r\n      command: ContentCommands.SIDEBAR,\r\n      payload: {\r\n        subcommand: SideBarCommands.MAIN,\r\n        componentData: { sidebarMainData: {} },\r\n      }\r\n    };\r\n\r\n    chrome.tabs.sendMessage(this.tabId, request, (response) =>\r\n    {\r\n      if (chrome.runtime.lastError)\r\n      {\r\n        Logger.log(chrome.runtime.lastError.message);\r\n      }\r\n\r\n      if (!response)\r\n      {\r\n        this.triggerForegroundPage();\r\n      }\r\n    });\r\n  }\r\n}\r\n","// Background\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport FeatureStats, { featureStatsTypes } from '@extension/background/feature_stats';\r\nimport WhitelistWrapper from '@extension/background/whitelist_wrapper';\r\nimport NativeSetValues from '@extension/background/dispatchers/native/native_set_values';\r\nimport { SETTINGS_TYPE, SCOPE } from '@extension/background/dispatchers/native/native_settings';\r\nimport { NativeCommands } from '@extension/background/dispatchers/native/native_message_dispatcher_v1';\r\nimport { extension } from '@extension/common/webextension';\r\nimport { BlockState, BrowserType, Color, WPSBlockPageType } from '@extension/common/constants';\r\nimport { EngineType, SearchAnnotationActions, AnnotationOptions } from '@extension/common/annotation_variables';\r\nimport { SocialMediaTypes, SocialMediaAllTypes, SocialMediaActions } from '@extension/common/sma_variables';\r\nimport { ContentCommands } from '@extension/common/commands';\r\nimport { WhitelistTypes, WhitelistActions, WhitelistStoreMappings } from '@extension/common/whitelist_variables';\r\nimport { LocalStorageVariables, CacheStoreActions, CacheStorageVariables } from '@extension/common/cache_store_variables';\r\nimport BackgroundCommon from '@extension/common/background_common';\r\nimport UrlParser from '@extension/common/url_parser';\r\nimport { WSSNativeCommands, SubRequestTypes } from '@extension/background/dispatchers/native/native_wss_message_dispatcher';\r\nimport { ProcessTypes, Logger } from '@extension/common/logger';\r\n// Injector\r\nimport Injector from '@extension/background/content_injector/injector';\r\nimport InjectAPSBalloon from '@extension/background/content_injector/inject_aps_balloon';\r\nimport InjectSidebarMain from '@extension/background/content_injector/inject_sidebar_main';\r\nimport InjectFormDetection from '@extension/background/content_injector/inject_form_detection';\r\n\r\nimport SearchEngine from '@core-engine/search_engine';\r\nimport BlockPageCommon from '../block_page_common';\r\n\r\n// Native settings\r\nconst { INT, STRING, BOOL } = SETTINGS_TYPE;\r\nconst { SYSTEM, USER } = SCOPE;\r\nconst {\r\n  SECURE_SEARCH_TOAST_STAMP,\r\n  SECURE_SEARCH_SHOW_ICONS,\r\n  SECURE_SEARCH_ANNOTATION_ONLY,\r\n  ANNOTATIONS_CHOICE_EXPLICIT,\r\n  CURRENT_SAO_IN_EXTENSION,\r\n  TS_WHITELIST,\r\n  CHECKLIST_START_INGORE_DATE_AV,\r\n  CHECKLIST_START_IGNORE_DATE_FW,\r\n  CHECKLIST_IGNORE_DURACTION,\r\n  CHECKLIST_GRACE_PERIOD_AV,\r\n  CHECKLIST_GRACE_PERIOD_FW,\r\n  CHECKLIST_GRACE_PERIOD_DURATION,\r\n  SMA_ANNOTATION_OPTIONS,\r\n  SMA_USER_TOGGLE,\r\n  FF_EXTENSION_LAST_TOAST_TIME,\r\n  FF_EXTENSION_TOAST_COUNT,\r\n  ANNOTATION_JOURNEY_TOAST\r\n} = BackgroundGlobals.nativeSettings;\r\n\r\n/**\r\n * Handles the incoming commands from the message listener.\r\n */\r\nexport default class LocalDispatcher\r\n{\r\n  constructor(nativeDisp)\r\n  {\r\n    this.nativeDispatcher = nativeDisp;\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  autoPlayVideoSite(topDomain, srcVideo, x, y)\r\n  {\r\n    const msg = {\r\n      request_type: NativeCommands.AUTO_PLAY_VIDEO_SITE,\r\n      payload: {\r\n        site_domain: topDomain,\r\n        video_url: srcVideo,\r\n        coordinate_x: x,\r\n        coordinate_y: y\r\n      }\r\n    };\r\n    Logger.log(`Autoplay site found in page ${topDomain}`);\r\n\r\n    this.nativeDispatcher && this.nativeDispatcher.autoPlayVideoSite(msg);\r\n  }\r\n\r\n  /**\r\n   * Get/Set/Clear cache/local storage variables. Allow multiple set and get\r\n   * @param {string} action - one of CacheStoreActions (GET, SET, CLEAR, etc)\r\n   * @param {object} data   - data object. Should look like the following:\r\n   *                        SET: { DBNAME: 'ABC', ... }, GET: { DBNAME: '', ... }, CLEAR: { DBNAME: '', ... }\r\n   * @param {callback} callback - callback with data object for GET action, otherwise true\r\n   *                        GET: { DBNAME: 'ABC', ... }\r\n   */\r\n  cacheStore(action, data, callback)\r\n  {\r\n    const { SET, GET, CLEAR } = CacheStoreActions;\r\n    if (action === GET)\r\n    {\r\n      for (const prop in data)\r\n      {\r\n        data[prop] = BackgroundGlobals.cacheStore.get(prop, data[prop]);\r\n      }\r\n      callback(data);\r\n      return true;\r\n    }\r\n\r\n    if (action === SET && data)\r\n    {\r\n      for (const prop in data)\r\n      {\r\n        BackgroundGlobals.cacheStore.set(prop, data[prop]);\r\n      }\r\n    }\r\n\r\n    if (action === CLEAR)\r\n    {\r\n      for (const prop in data) BackgroundGlobals.cacheStore.clear(prop);\r\n    }\r\n\r\n    callback(true);\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  executeCommand(commandId, params)\r\n  {\r\n    this.nativeDispatcher && this.nativeDispatcher.executeCommand(commandId, params);\r\n  }\r\n\r\n  extensionStatusUpdate({ extensionId })\r\n  {\r\n    this.nativeDispatcher && this.nativeDispatcher.executeCommand({ extensionId });\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  getPopupData(id, url, callback)\r\n  {\r\n    const data = {};\r\n    data.stats = FeatureStats.read();\r\n    data.url = url;\r\n    data.tabData = BackgroundGlobals.tabData.get(id);\r\n    data.tabId = id;\r\n    data.BINARY_VERSION = BackgroundGlobals.nativeSettings.BINARY_VERSION.value;\r\n    data.cacheStore = BackgroundGlobals.cacheStore;\r\n\r\n    callback(data);\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  getSettingsData(callback)\r\n  {\r\n    const { cacheStore } = BackgroundGlobals;\r\n\r\n    const settingsData = {};\r\n    const whitelistedLinks = WhitelistWrapper.getDomainsFromWhitelist(LocalStorageVariables.BLOCK_PAGE_WHITELIST.name);\r\n    const searchAnnotationOption = cacheStore.get(LocalStorageVariables.SEARCH_ANNOTATION_OPTION.name, AnnotationOptions.ONLY_SECURE_SEARCH);\r\n    const socialMediaOption = cacheStore.get(LocalStorageVariables.SMA_ANNOTATION_OPTIONS.name, SocialMediaAllTypes);\r\n    const socialMediaToggle = cacheStore.get(LocalStorageVariables.SMA_USER_TOGGLE.name, true);\r\n    const personal = cacheStore.get(LocalStorageVariables.FF_POLICY_PERSONAL_COLLECTION.name, true);\r\n    const activity = cacheStore.get(LocalStorageVariables.FF_POLICY_ACTIVITY_COLLECTION.name, true);\r\n    const apsToggle = cacheStore.get(LocalStorageVariables.APS_TOGGLE_SETTING.name, true);\r\n    const ajToast = cacheStore.get(LocalStorageVariables.AJ_TOAST.name, null);\r\n    const ajAPSEnable = cacheStore.get(LocalStorageVariables.AJ_APS_ENABLE.name, null);\r\n\r\n    settingsData.whitelistedLinks = whitelistedLinks;\r\n    settingsData.searchAnnotationOption = searchAnnotationOption;\r\n    settingsData.sma = { socialMediaOption, socialMediaToggle };\r\n    settingsData.ffpolicy = { personal, activity };\r\n    settingsData.apsToggle = apsToggle;\r\n    settingsData.ajToast = ajToast !== null ? ajToast : ANNOTATION_JOURNEY_TOAST.value;\r\n    settingsData.ajAPSEnable = ajAPSEnable;\r\n\r\n    // Statistics Data\r\n    settingsData.stats = FeatureStats.read();\r\n    callback(settingsData);\r\n  }\r\n\r\n  postMessage(message)\r\n  {\r\n    return this.nativeDispatcher && this.nativeDispatcher.postMessage(message);\r\n  }\r\n\r\n  /**\r\n   * Make a HTTP POST request to the GTI server or HTI server.\r\n   * @param {string[]} requestData - Data to pass into the request\r\n   * @param {string}   referrer - value of referer header or undefined\r\n   * @param {boolen}   checkCacheOnly - only get URL reputation from cache and not do an actual HTTP request call\r\n   *\r\n   * @return {promise} promise containing GTI request data\r\n   */\r\n  makeMTIRequest(requestData, referrer = null, checkCacheOnly = false)\r\n  {\r\n    return BackgroundGlobals.mtiRequestor.post(requestData, referrer, checkCacheOnly);\r\n  }\r\n\r\n  async getURLReputation(originalUrl, referrer = null, checkCacheOnly = false)\r\n  {\r\n    const response = { color: Color.UNKNOWN, categories: [] };\r\n\r\n    let url = originalUrl;\r\n    if (!BackgroundCommon.isProperWebURL(url))\r\n    {\r\n      return response;\r\n    }\r\n\r\n    if (BackgroundCommon.isSafeUrl(url))\r\n    {\r\n      response.color = Color.GREEN;\r\n      response.categories = [];\r\n      return response;\r\n    }\r\n\r\n    if (BackgroundGlobals.browserType === BrowserType.FIREFOX)\r\n    {\r\n      url = this.removeSearchTermOnEngineUrl(originalUrl);\r\n    }\r\n\r\n    if (!BackgroundGlobals.messageDispatcher)\r\n    {\r\n      Logger.warn('getURLReputation: messageDispatcher is undefined');\r\n      return response;\r\n    }\r\n\r\n    const repResponse = await this.makeMTIRequest([url], referrer, checkCacheOnly);\r\n\r\n    if (!repResponse || !repResponse.annotationMap)\r\n    {\r\n      Logger.warn('getURLReputation: repResponse or annotationMap is undefined');\r\n      return response;\r\n    }\r\n\r\n    const annotationDetails = repResponse.annotationMap[url];\r\n    if (!annotationDetails)\r\n    {\r\n      Logger.warn('getURLReputation: makeMTIRequest annotation details undefined');\r\n      return response;\r\n    }\r\n\r\n    const blockState = BackgroundGlobals.messageDispatcher.toBlockState(annotationDetails);\r\n    response.color = blockState.color;\r\n    response.categories = annotationDetails.category || [];\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  isFrameBlocked(url, tabId)\r\n  {\r\n    const domain = UrlParser.getDomain(url);\r\n    if (WhitelistWrapper.isDomainInWhitelist(domain, LocalStorageVariables.BLOCK_PAGE_WHITELIST.name))\r\n    {\r\n      return { isBlocked: false, redirectURI: url };\r\n    }\r\n\r\n    const tabData = BackgroundGlobals.tabData.get(tabId);\r\n    if (tabData.tabDomainTrusted)\r\n    {\r\n      return { isBlocked: false, redirectURI: url };\r\n    }\r\n\r\n    const data = BackgroundGlobals.mtiRequestor.getReputation(url);\r\n    if (!data || !data.cache_entry)\r\n    {\r\n      return { isBlocked: false, redirectURI: url };\r\n    }\r\n\r\n    const blockState = this.toBlockState(data.cache_entry.value);\r\n    if (blockState.color === Color.RED || blockState.color === Color.YELLOW)\r\n    {\r\n      return { isBlocked: true, redirectURI: url };\r\n    }\r\n    return { isBlocked: false, redirectURI: url };\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  installExtension(extensionId, redirectUrl)\r\n  {\r\n    this.nativeDispatcher && this.nativeDispatcher.installExtension(extensionId, redirectUrl);\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  logger(details)\r\n  {\r\n    this.nativeDispatcher && this.nativeDispatcher.logger(details);\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  onDownloadFinished(item)\r\n  {\r\n    const msg = {\r\n      request_type: NativeCommands.ON_DOWNLOAD_FINISHED,\r\n      id: 0,\r\n      payload: {\r\n        url: item.url,\r\n        file_path: item.filename,\r\n        referrer: item.referrer || '',\r\n        mime_type: item.mime_type || '',\r\n        ext_side_ui: false,\r\n      }\r\n    };\r\n\r\n    if (this.nativeDispatcher)\r\n    {\r\n      // Send message to native to start scanning the downloaded file\r\n      this.nativeDispatcher.onDownloadFinished(msg);\r\n      FeatureStats.add(featureStatsTypes.DOWNLOADS_SCANNED);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  resetSettings()\r\n  {\r\n    // Reset extension settings\r\n    BackgroundGlobals.cacheStore.clear(LocalStorageVariables.RAT_DETECTION_WHITELIST.name);\r\n    BackgroundGlobals.cacheStore.clear(LocalStorageVariables.APS_FULL_MSG_SHOWN_ARRAY.name);\r\n\r\n    // Reset native settings\r\n    const settings = new NativeSetValues(this.nativeDispatcher);\r\n    settings.add(SECURE_SEARCH_TOAST_STAMP.name, 0, USER, INT);\r\n    settings.add(TS_WHITELIST.name, '', USER, STRING);\r\n    settings.add(CHECKLIST_START_INGORE_DATE_AV.name, '', SYSTEM, STRING);\r\n    settings.add(CHECKLIST_START_IGNORE_DATE_FW.name, '', SYSTEM, STRING);\r\n    settings.add(CHECKLIST_IGNORE_DURACTION.name, '14', SYSTEM, STRING);\r\n    settings.add(CHECKLIST_GRACE_PERIOD_AV.name, '', SYSTEM, STRING);\r\n    settings.add(CHECKLIST_GRACE_PERIOD_FW.name, '', SYSTEM, STRING);\r\n    settings.add(CHECKLIST_GRACE_PERIOD_DURATION.name, '24', SYSTEM, STRING);\r\n\r\n    // Reset firefox toast timers\r\n    settings.add(FF_EXTENSION_LAST_TOAST_TIME.name, 0, USER, INT);\r\n    settings.add(FF_EXTENSION_TOAST_COUNT.name, 0, USER, INT);\r\n    settings.send();\r\n\r\n    // Send MFW event to let native reset additional native settings\r\n    this.nativeDispatcher && this.nativeDispatcher.mfwResetNativeSettings();\r\n  }\r\n\r\n  /**\r\n   * Reset specific setting from native\r\n   */\r\n  resetNativeSetting(setting)\r\n  {\r\n    if (!setting) return;\r\n\r\n    const { name, value, scope, type } = setting;\r\n    const settings = new NativeSetValues(this.nativeDispatcher);\r\n    settings.add(name, value, scope, type);\r\n    settings.send();\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  searchAnnotation(action, data, callback)\r\n  {\r\n    const { cacheStore } = BackgroundGlobals;\r\n    const { GET, SET } = SearchAnnotationActions;\r\n    if (action === GET)\r\n    {\r\n      const searchAnnotationOption = cacheStore.get(LocalStorageVariables.SEARCH_ANNOTATION_OPTION.name, AnnotationOptions.ONLY_SECURE_SEARCH);\r\n      callback(searchAnnotationOption);\r\n      return true;\r\n    }\r\n\r\n    const searchOption = data.searchAnnotationOption;\r\n    if (action === SET && searchOption)\r\n    {\r\n      cacheStore.set(LocalStorageVariables.SEARCH_ANNOTATION_OPTION.name, searchOption);\r\n\r\n      // Update Native search annotation option\r\n      let secureSearchOnly = false;\r\n      let secureSearchIcons = false;\r\n      if (searchOption === AnnotationOptions.ALL)\r\n      {\r\n        secureSearchIcons = true;\r\n      }\r\n      else if (searchOption === AnnotationOptions.ONLY_SECURE_SEARCH)\r\n      {\r\n        secureSearchOnly = true;\r\n        secureSearchIcons = true;\r\n      }\r\n\r\n      const settings = new NativeSetValues(this.nativeDispatcher);\r\n      settings.add(SECURE_SEARCH_ANNOTATION_ONLY.name, secureSearchOnly, SYSTEM, BOOL);\r\n      settings.add(SECURE_SEARCH_SHOW_ICONS.name, secureSearchIcons, USER, BOOL);\r\n      settings.add(ANNOTATIONS_CHOICE_EXPLICIT.name, true, SYSTEM, BOOL);\r\n      settings.add(CURRENT_SAO_IN_EXTENSION.name, searchOption, USER, STRING);\r\n      settings.send();\r\n    }\r\n\r\n    callback(true);\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  sendTelemetry(data)\r\n  {\r\n    Logger.log(data, ProcessTypes.TELEMETRY);\r\n\r\n    const msg = {\r\n      request_type: NativeCommands.TELEMETRY,\r\n      id: 0,\r\n      payload: {\r\n        telemetry_data: data\r\n      }\r\n    };\r\n    this.nativeDispatcher && this.nativeDispatcher.sendTelemetry(msg);\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  SetXYViewport(xView, yView)\r\n  {\r\n    this.nativeDispatcher && this.nativeDispatcher.SetXYViewport(xView, yView);\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  socialMediaAnnotation(action, data, callback)\r\n  {\r\n    const { cacheStore } = BackgroundGlobals;\r\n    const socialMediaOption = cacheStore.get(LocalStorageVariables.SMA_ANNOTATION_OPTIONS.name, SocialMediaAllTypes);\r\n    const socialMediaToggle = cacheStore.get(LocalStorageVariables.SMA_USER_TOGGLE.name, true);\r\n\r\n    const {\r\n      TOGGLE_ON,\r\n      TOGGLE_OFF,\r\n      ANNOTATION_ENABLE,\r\n      ANNOTATION_ENABLE_ALL,\r\n      ANNOTATION_DISABLE,\r\n      ANNOTATION_DISABLE_ALL,\r\n      GET\r\n    } = SocialMediaActions;\r\n\r\n    if (action === GET)\r\n    {\r\n      callback({ socialMediaOption, socialMediaToggle });\r\n      return true;\r\n    }\r\n\r\n    if (action === TOGGLE_ON)\r\n    {\r\n      // Used by Telemetry\r\n      const settings = new NativeSetValues(this.nativeDispatcher);\r\n      settings.add(SMA_USER_TOGGLE.name, true, SYSTEM, BOOL);\r\n      settings.send();\r\n\r\n      cacheStore.set(LocalStorageVariables.SMA_USER_TOGGLE.name, true);\r\n      callback({ socialMediaOption, socialMediaToggle: true });\r\n      return true;\r\n    }\r\n\r\n    if (action === TOGGLE_OFF)\r\n    {\r\n      // Used by Telemetry\r\n      const settings = new NativeSetValues(this.nativeDispatcher);\r\n      settings.add(SMA_USER_TOGGLE.name, false, SYSTEM, BOOL);\r\n      settings.send();\r\n\r\n      cacheStore.set(LocalStorageVariables.SMA_USER_TOGGLE.name, false);\r\n    }\r\n\r\n    if (action === ANNOTATION_ENABLE_ALL)\r\n    {\r\n      // Used by Telemetry\r\n      const settings = new NativeSetValues(this.nativeDispatcher);\r\n      settings.add(SMA_ANNOTATION_OPTIONS.name, SocialMediaAllTypes, SYSTEM, INT);\r\n      settings.send();\r\n\r\n      cacheStore.set(LocalStorageVariables.SMA_ANNOTATION_OPTIONS.name, SocialMediaAllTypes);\r\n    }\r\n\r\n    if (action === ANNOTATION_DISABLE_ALL)\r\n    {\r\n      const smaOption = SocialMediaTypes.NONE;\r\n\r\n      // Used by Telemetry\r\n      const settings = new NativeSetValues(this.nativeDispatcher);\r\n      settings.add(SMA_ANNOTATION_OPTIONS.name, smaOption, SYSTEM, INT);\r\n      settings.send();\r\n\r\n      cacheStore.set(LocalStorageVariables.SMA_ANNOTATION_OPTIONS.name, smaOption);\r\n    }\r\n\r\n    if (action === ANNOTATION_ENABLE)\r\n    {\r\n      const { socialMediaType } = data;\r\n      const existsInTypes = Object.values(SocialMediaTypes).includes(socialMediaType);\r\n      // Only add if it is one of the annotation types\r\n      // and it has not yet been added to the db.\r\n      if (existsInTypes && !(socialMediaType & socialMediaOption))\r\n      {\r\n        const smaOption = socialMediaOption + socialMediaType;\r\n        cacheStore.set(LocalStorageVariables.SMA_ANNOTATION_OPTIONS.name, smaOption);\r\n\r\n        // Used by Telemetry\r\n        const settings = new NativeSetValues(this.nativeDispatcher);\r\n        settings.add(SMA_ANNOTATION_OPTIONS.name, smaOption, SYSTEM, INT);\r\n        settings.send();\r\n      }\r\n    }\r\n\r\n    if (action === ANNOTATION_DISABLE)\r\n    {\r\n      const { socialMediaType } = data;\r\n      const existsInTypes = Object.values(SocialMediaTypes).includes(socialMediaType);\r\n\r\n      // Only add if it is one of the annotation types\r\n      // and if it exists as part of the db value\r\n      if (existsInTypes && (socialMediaType & socialMediaOption))\r\n      {\r\n        const smaOption = socialMediaOption - socialMediaType;\r\n        cacheStore.set(LocalStorageVariables.SMA_ANNOTATION_OPTIONS.name, smaOption);\r\n\r\n        // Used by Telemetry\r\n        const settings = new NativeSetValues(this.nativeDispatcher);\r\n        settings.add(SMA_ANNOTATION_OPTIONS.name, smaOption, SYSTEM, INT);\r\n        settings.send();\r\n      }\r\n    }\r\n\r\n    callback(true);\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Return the block state and color\r\n   * @param {String} linkInfo\r\n   */\r\n  toBlockState(linkInfo)\r\n  {\r\n    const colorVal = BackgroundCommon.toColor(linkInfo);\r\n    let blockState = colorVal;\r\n    let state = null;\r\n\r\n    if (linkInfo)\r\n    {\r\n      if ((colorVal === Color.RED || colorVal === Color.YELLOW) && BackgroundCommon.isPhishingURI(linkInfo.category))\r\n      {\r\n        blockState = BlockState.PHISHING;\r\n      }\r\n\r\n      state = {\r\n        color: colorVal,\r\n        state: blockState\r\n      };\r\n    }\r\n    else\r\n    {\r\n      state = {\r\n        color: Color.UNKNOWN,\r\n        state: BlockState.UNKNOWN\r\n      };\r\n    }\r\n\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * Returns the browser action color for the URL if the URL reputation is already cached.\r\n   * This method does not make GTI call\r\n   * @param {any} url\r\n   */\r\n  toBrowserActionColor(url)\r\n  {\r\n    const data = BackgroundGlobals.mtiRequestor.getReputation(url);\r\n    if (!data || !data.cache_entry)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return BackgroundCommon.toColor(data.cache_entry.value);\r\n  }\r\n\r\n  whitelistNoCallback(action, type, data)\r\n  {\r\n    const storeVariable = WhitelistStoreMappings[type];\r\n    if (!type || !storeVariable)\r\n    {\r\n      Logger.error(`invalid type: '${type}' or storeVariable: '${storeVariable}'`);\r\n      return true;\r\n    }\r\n\r\n    const { ADD, GET, REMOVE, CLEAR } = WhitelistActions;\r\n    if (action === GET)\r\n    {\r\n      const whitelist = WhitelistWrapper.getDomainsFromWhitelist(storeVariable);\r\n      return whitelist;\r\n    }\r\n\r\n    if (action === ADD && data.domains)\r\n    {\r\n      WhitelistWrapper.addDomainsToWhitelist(data.domains, storeVariable);\r\n    }\r\n\r\n    if (action === REMOVE && data.domains)\r\n    {\r\n      WhitelistWrapper.removeDomainFromWhitelist(data.domains, storeVariable);\r\n    }\r\n\r\n    if (action === CLEAR)\r\n    {\r\n      WhitelistWrapper.clearWhitelist(storeVariable);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * TODO: Comments\r\n   */\r\n  whitelist(action, type, data, callback)\r\n  {\r\n    callback(this.whitelistNoCallback(action, type, data));\r\n    return true;\r\n  }\r\n\r\n  unblockAllIframes(tabId, tabUrl)\r\n  {\r\n    const blockedIframes = BackgroundGlobals.tabData.getBlockedFrames(tabId);\r\n\r\n    let brefreshPage = false;\r\n\r\n    blockedIframes.forEach(({ url, frameId }) =>\r\n    {\r\n      const domain = UrlParser.getDomain(url);\r\n      this.whitelist(WhitelistActions.ADD, WhitelistTypes.IFRAME, { tabId, url, frameId, domains: [domain] }, () => {});\r\n      BlockPageCommon.sendBlockPageEvent(WPSBlockPageType.iFrame, tabUrl, url, true);\r\n      const message = {\r\n        command: ContentCommands.UNBLOCK_IFRAME,\r\n        url\r\n      };\r\n      if (frameId !== -1)\r\n      {\r\n        extension.tabs.sendMessage(tabId, message, { frameId });\r\n      }\r\n      else\r\n      {\r\n        brefreshPage = true;\r\n      }\r\n    });\r\n    BackgroundGlobals.tabData.resetBlockedFrames(tabId);\r\n\r\n    if (brefreshPage)\r\n    {\r\n      extension.tabs.update(tabId, { url: tabUrl });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * First check whether the tab has cache of blocked frames. If the cache is not present then\r\n   * for each frameUrl for the tab get from GTI cache to see whether it is blocked.\r\n   */\r\n  anyBlockedIframes(tabId, frameUrls, responseCb)\r\n  {\r\n    const blockedIframes = BackgroundGlobals.tabData.getBlockedFrames(tabId);\r\n    if (blockedIframes.length > 0)\r\n    {\r\n      responseCb(true);\r\n    }\r\n    else\r\n    {\r\n      let isBlocked = false;\r\n      for (let index = 0; index < frameUrls.length; ++index)\r\n      {\r\n        if (!BackgroundCommon.isProperWebURL(frameUrls[index])) continue;\r\n\r\n        const ret = this.isFrameBlocked(frameUrls[index], tabId);\r\n        if (ret.isBlocked)\r\n        {\r\n          isBlocked = true;\r\n          BackgroundGlobals.tabData.addBlockedFrame(tabId, { url: frameUrls[index], frameId: -1 });\r\n        }\r\n      }\r\n      responseCb(isBlocked);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * For handling the CryptoJacking topbar\r\n   */\r\n  anyBlockedCryptoScripts(tabId, responseCb)\r\n  {\r\n    const tabDataGetValue = BackgroundGlobals.tabData.get(tabId);\r\n    responseCb(tabDataGetValue.cryptoBlockData);\r\n  }\r\n\r\n  getExtensionStatus(payload, cb)\r\n  {\r\n    this.nativeDispatcher && this.nativeDispatcher.getExtensionStatus(payload, cb);\r\n  }\r\n\r\n  updateRatDetectionShowingFlag(showed, url = null, tabId = null)\r\n  {\r\n    const storeVariables = CacheStorageVariables.RAT_DETECTION_SHOWING.name;\r\n    const allTabDomains = BackgroundGlobals.cacheStore.get(storeVariables) || {};\r\n    let currentTabDomain = allTabDomains[tabId] || '';\r\n    const domain = UrlParser.getDomain(url);\r\n\r\n    if (showed && domain)\r\n    {\r\n      currentTabDomain = domain;\r\n    }\r\n    else\r\n    {\r\n      currentTabDomain = '';\r\n    }\r\n\r\n    allTabDomains[tabId] = currentTabDomain;\r\n    BackgroundGlobals.cacheStore.set(storeVariables, allTabDomains);\r\n  }\r\n\r\n  /**\r\n   * Called by the messageListener from content to retrieve the search results for search suggestion\r\n   *\r\n   * @param {String} searchTerm\r\n   */\r\n  async searchSuggest(searchTerm)\r\n  {\r\n    return BackgroundGlobals.searchSuggest.retrieveSearchTerm(searchTerm);\r\n  }\r\n\r\n  // Get specific native setting values\r\n  getValues(getList)\r\n  {\r\n    return this.nativeDispatcher && this.nativeDispatcher.getValues(getList);\r\n  }\r\n\r\n  /**\r\n   * Injects full form detection library once pre check determines there may be forms on the page.\r\n   * @param {*} tabId\r\n   */\r\n  formPreCheckPassed(tabId)\r\n  {\r\n    // Content Script Inject\r\n    const contentToInject = [new InjectFormDetection()];\r\n    Injector.inject(tabId, contentToInject);\r\n  }\r\n\r\n  async signUpFormDetected(url, tabId)\r\n  {\r\n    const { color, categories } = await BackgroundGlobals.messageDispatcher.getURLReputation(url);\r\n\r\n    // Content Script Inject\r\n    const contentToInject = [\r\n      new InjectAPSBalloon({ tabId, url, categories, color, isSignUp: true }),\r\n    ];\r\n\r\n    Injector.inject(tabId, contentToInject);\r\n  }\r\n\r\n  showSidebarMain(tabId, url)\r\n  {\r\n    const contentToInject = [new InjectSidebarMain({ url, tabId })];\r\n    Injector.inject(tabId, contentToInject);\r\n  }\r\n\r\n  removeSearchTermOnEngineUrl(url)\r\n  {\r\n    const { searchEngines, nativeSettings } = BackgroundGlobals;\r\n    const searchEngine = new SearchEngine(searchEngines, null, null, nativeSettings.SECURE_SEARCH_REGEXES);\r\n    const engine = searchEngine.getEngineForUrl(url);\r\n    if (engine && engine.enginetype === EngineType.SEARCH)\r\n    {\r\n      try\r\n      {\r\n        // remove the p or q search arguments from the url\r\n        const urlOjb = new URL(url);\r\n        urlOjb.searchParams.delete('p');\r\n        urlOjb.searchParams.delete('q');\r\n        return urlOjb.href;\r\n      }\r\n      catch (err)\r\n      {\r\n        return url;\r\n      }\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * These are events that are sent to native from extension. The currently supported evtype = 1 which is for blockpage. Blockpagetypes supported are 1= Red, 2= Yellow, 3= Phishing, 4= Typosquat, 5= iFrame, 6= Crypto Topurl is the top level tab URL blockedUrl is ignored if the block page types are 1,2,3,4. In other cases these are the actual URLs that are blocked such as in case of iFrame and Crypto. UserOverride is false when block page is displayed initially and if user accepts risk and went ahead then another even is sent with same parameters as first with overriden set to true.\r\n   * @param {*} typeOfBlockPage\r\n   * @param {*} topUrl\r\n   * @param {*} blockedUrl\r\n   * @param {*} override\r\n   */\r\n  sendBlockPageEvent(typeOfBlockPage, topUrl, blockedUrl, override)\r\n  {\r\n    const subrequestpayload = {\r\n      eventtype: 1,\r\n      type: typeOfBlockPage,\r\n      top_url: topUrl,\r\n      blocked_url: blockedUrl,\r\n      override,\r\n    };\r\n    const payload = {\r\n      sub_request_type: `${SubRequestTypes.WA_EVENT}.${BackgroundGlobals.browserType}`,\r\n      subrequestpayload: JSON.stringify(subrequestpayload)\r\n    };\r\n    const request = {\r\n      request_type: WSSNativeCommands.PUBLISH,\r\n      payload\r\n    };\r\n    Logger.log(`[WPS Native] Sent block page event to WPS Native ${JSON.stringify(request)}`);\r\n    this.postMessage(request);\r\n  }\r\n\r\n  setSettings(settingName, settingValue)\r\n  {\r\n    this.nativeDispatcher.setSettings(settingName, settingValue);\r\n  }\r\n}\r\n","export default class ScheduledTaskBase\r\n{\r\n  run()\r\n  {\r\n  }\r\n}\r\n","import { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport { LocalStorageVariables } from '@extension/common/cache_store_variables';\r\nimport ScheduledTaskBase from '@extension/background/schedulers/scheduledtaskbase';\r\nimport { BuildSettings } from '@extension/common/constants';\r\nimport { Logger } from '@extension/common/logger';\r\n\r\nexport default class EngineDownloadTask extends ScheduledTaskBase\r\n{\r\n  init()\r\n  {\r\n    // Note that getEngines from EngineDownloadHelper is called on background's main() function\r\n  }\r\n\r\n  async run()\r\n  {\r\n    const serverUpdate = await this.fetchVersion();\r\n    if (serverUpdate !== null && this.isNewerVersion(BackgroundGlobals.ENGINES_VERSION, serverUpdate.version)) // If the engine in server is newer one\r\n    {\r\n      const engines = await EngineDownloadHelper.fetchEngine(serverUpdate.url); // Download latest engine\r\n      if (engines !== null)\r\n      {\r\n        BackgroundGlobals.searchEngines = engines; // Update the store cache and the version now.\r\n        BackgroundGlobals.ENGINES_VERSION = serverUpdate.version;\r\n        BackgroundGlobals.cacheStore.set(LocalStorageVariables.ENGINES.name, engines);\r\n        BackgroundGlobals.cacheStore.set(LocalStorageVariables.ENGINES_VERSION.name, serverUpdate.version);\r\n        Logger.log(`Engines have been updated to version ${serverUpdate.version}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  async fetchVersion()\r\n  {\r\n    try\r\n    {\r\n      const response = await fetch(BackgroundGlobals.enginesVersionUrl);\r\n      if (response !== null && response.status === 200)\r\n      {\r\n        return await response.json();\r\n      }\r\n    }\r\n    catch (ex)\r\n    {\r\n      Logger.error(ex);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  isNewerVersion(currentVersion, newVersion)\r\n  {\r\n    const curSplits = currentVersion.split('.');\r\n    const newSplits = newVersion.split('.');\r\n    const minLength = curSplits.length < newSplits.length ? curSplits.length : newSplits.length;\r\n    for (let index = 0; index < minLength; ++index)\r\n    {\r\n      const curVer = parseInt(curSplits[index], 10);\r\n      const newVer = parseInt(newSplits[index], 10);\r\n      // If new version part is higher than current version part then this is new version\r\n\r\n      if (newVer > curVer)\r\n      {\r\n        return true;\r\n      }\r\n      // If new version part is lower than current version part ( which is unlikely) then the new version is outdated one.\r\n      if (newVer < curVer)\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport class EngineDownloadHelper\r\n{\r\n  static async getEngines()\r\n  {\r\n    // At startup take engine from local Storage as first preference, if such an engine is non existent\r\n    // then fallback to the engine packaged along with installer.\r\n    BackgroundGlobals.searchEngines = BackgroundGlobals.cacheStore.get(LocalStorageVariables.ENGINES.name);\r\n    if (BackgroundGlobals.searchEngines === null)\r\n    {\r\n      BackgroundGlobals.searchEngines = await EngineDownloadHelper.fetchEngine(chrome.runtime.getURL('json/engines.json'));\r\n    }\r\n\r\n    // If local storage has engine version then use it else use the default version from installed extension.\r\n    BackgroundGlobals.ENGINES_VERSION = BackgroundGlobals.cacheStore.get(LocalStorageVariables.ENGINES_VERSION.name, BuildSettings.ENGINES_VERSION);\r\n  }\r\n\r\n  static async fetchEngine(url)\r\n  {\r\n    try\r\n    {\r\n      const response = await fetch(url);\r\n      if (response !== null && response.status === 200)\r\n      {\r\n        const engineJSON = await response.json();\r\n        if (engineJSON !== null && engineJSON.searchengines !== undefined)\r\n        {\r\n          return engineJSON.searchengines;\r\n        }\r\n      }\r\n    }\r\n    catch (ex)\r\n    {\r\n      Logger.error(ex);\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import { LocalStorageVariables } from '@extension/common/cache_store_variables';\r\nimport EngineDownloadTask from '@extension/background/schedulers/enginedownloadtask';\r\nimport TelemetryHeartBeatTask from '@extension/background/schedulers/telemetryheartbeattask';\r\n\r\nexport const schedulers = {\r\n  [LocalStorageVariables.ENGINE_DOWNLOAD_TASK.name]: { frequency: 1000 * 60 * 60 * 24, runImmediatelyInitially: true, enabled: true, task: new EngineDownloadTask() },\r\n  [LocalStorageVariables.TELEMETRY_HEARTBEAT_TASK.name]: { frequency: 1000 * 60 * 60 * 24, runImmediatelyInitially: true, enabled: false, task: new TelemetryHeartBeatTask() }\r\n};\r\n","import { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport ScheduledTaskBase from '@extension/background/schedulers/scheduledtaskbase';\r\n\r\nexport default class TelemetryHeartBeatTask extends ScheduledTaskBase\r\n{\r\n  init()\r\n  {\r\n  }\r\n\r\n  // Send telemetry now\r\n  run()\r\n  {\r\n    if (BackgroundGlobals.isNativeConnected) // If connected to native then donot send the telemetry event\r\n    {\r\n      return;\r\n    }\r\n\r\n    if (BackgroundGlobals.telemetryEngine)\r\n    {\r\n      BackgroundGlobals.telemetryEngine.setUrl(BackgroundGlobals.ExtensionTelemetryUrl);\r\n      BackgroundGlobals.telemetryEngine.sendEvent('wa_heartbeat');\r\n    }\r\n  }\r\n}\r\n","import { BackgroundGlobals } from '@extension/background/background_globals';\r\nimport { schedulers } from '@extension/background/schedulers/schedulers';\r\nimport { extension } from '@extension/common/webextension';\r\nimport { Logger } from '@extension/common/logger';\r\n\r\nexport default class ScheduleManager\r\n{\r\n  constructor()\r\n  {\r\n    this.schedulers = schedulers;\r\n    this.alarmListener = this.getAlarmListener();\r\n    this.setTTL = this.setTTL.bind(this);\r\n  }\r\n\r\n  getAlarmListener()\r\n  {\r\n    const alarmListener = (alarm) =>\r\n    {\r\n      for (const [taskName, task] of Object.entries(this.schedulers))\r\n      {\r\n        if (alarm.name === taskName)\r\n        {\r\n          Logger.log(`Running task ${taskName}`);\r\n          try\r\n          {\r\n            task.task.run(); // Run the current task and schedule next task.\r\n          }\r\n          catch (e)\r\n          {\r\n            Logger.error(e.message);\r\n          }\r\n          this.setLastRunTime(taskName);\r\n          this.scheduleTask();\r\n        }\r\n      }\r\n    };\r\n\r\n    return alarmListener;\r\n  }\r\n\r\n  setTTL(taskName, ttl)\r\n  {\r\n    BackgroundGlobals.cacheStore.set(`${taskName}_ttl`, { expiry: ttl });\r\n    this.reinit();\r\n  }\r\n\r\n  getTTL(taskName)\r\n  {\r\n    const expiry = BackgroundGlobals.cacheStore.get(`${taskName}_ttl`, { expiry: 0 });\r\n    if (expiry !== null)\r\n    {\r\n      return expiry.expiry;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  getLastRunTime(taskName)\r\n  {\r\n    // Get from local storage the last run time of this task.\r\n    const lastRun = BackgroundGlobals.cacheStore.get(taskName, { lr: -1 });\r\n    return lastRun.lr;\r\n  }\r\n\r\n  setLastRunTime(taskName)\r\n  {\r\n    // Set the last time that this task ran\r\n    BackgroundGlobals.cacheStore.set(taskName, { lr: Date.now() });\r\n  }\r\n\r\n  scheduleTask()\r\n  {\r\n    let taskToScheduleName = null;\r\n    let lowestNextRun = -1;\r\n    for (const [taskName, task] of Object.entries(this.schedulers))\r\n    {\r\n      if (task.enabled === false)\r\n      {\r\n        continue;\r\n      }\r\n\r\n      const lastRunTime = this.getLastRunTime(taskName);\r\n\r\n      let nextRunTime = 0;\r\n\r\n      const freq = this.getTTL(taskName) || task.frequency;\r\n      // If the task was never run\r\n      if (lastRunTime === -1)\r\n      {\r\n        // If the task should be run after the interval even for the first time then.\r\n        if (!task.runImmediatelyInitially)\r\n        {\r\n          nextRunTime = Date.now() + freq;\r\n          // Sets last run time as today and now initially so that we donot push the run each time\r\n          // if the interval was never hit.\r\n          this.setLastRunTime(taskName);\r\n        }\r\n      }\r\n      else\r\n      {\r\n        nextRunTime = lastRunTime + freq;// Last time task was run plus frequency tells new run time.\r\n      }\r\n\r\n      if (nextRunTime <= Date.now()) // If next run time is already due then run it immediately so break out of loop\r\n      {\r\n        taskToScheduleName = taskName;\r\n        lowestNextRun = 0; // indicate to run immediately\r\n        break;\r\n      }\r\n      else\r\n      {\r\n        const taskNextFreq = nextRunTime - Date.now();\r\n        // If lowestNextRun was never calculated OR if previous lowestRun calculated is higher than current one\r\n        if (lowestNextRun === -1 || lowestNextRun > taskNextFreq)\r\n        {\r\n          taskToScheduleName = taskName;\r\n          lowestNextRun = taskNextFreq;\r\n        }\r\n      }\r\n    }\r\n\r\n    // run immediately for due task\r\n    if (lowestNextRun === 0)\r\n    {\r\n      Logger.log(`Next task to run is ${taskToScheduleName} at 0 minute(s)`);\r\n      Logger.log(`Running task ${taskToScheduleName}`);\r\n      this.schedulers[taskToScheduleName].task.run();\r\n      this.setLastRunTime(taskToScheduleName);\r\n      this.scheduleTask();\r\n\r\n      return;\r\n    }\r\n\r\n    // default set to Chrome minimum alarm interval 1 minute\r\n    let alarmInterval = 1;\r\n\r\n    // if the actual next run is more than 1 minute then convert it into minutes,\r\n    // otherwise use default 1 minute interval\r\n    if (lowestNextRun > 1000 * 60)\r\n    {\r\n      alarmInterval = parseInt(lowestNextRun / 1000 / 60, 10);\r\n    }\r\n    Logger.log(`Next task to run is ${taskToScheduleName} at ${alarmInterval} minute(s)`);\r\n    extension.alarms.create(taskToScheduleName, { delayInMinutes: alarmInterval });\r\n  }\r\n\r\n  initListeners()\r\n  {\r\n    // avoid adding multiple listener and fired multiple times\r\n    if (!chrome.alarms.onAlarm.hasListener(this.alarmListener))\r\n    {\r\n      chrome.alarms.onAlarm.addListener(this.alarmListener);\r\n    }\r\n  }\r\n\r\n  clearAlarms()\r\n  {\r\n    for (const [taskName, task] of Object.entries(this.schedulers))\r\n    {\r\n      if (task.enabled === false)\r\n      {\r\n        continue;\r\n      }\r\n      extension.alarms.clear(taskName);\r\n    }\r\n  }\r\n\r\n  clearListeners()\r\n  {\r\n    if (extension.alarms.onAlarm.hasListener(this.alarmListener))\r\n    {\r\n      extension.alarms.onAlarm.removeListener(this.alarmListener);\r\n    }\r\n  }\r\n\r\n  stop()\r\n  {\r\n    this.clearAlarms();\r\n    this.clearListeners();\r\n  }\r\n\r\n  reinit()\r\n  {\r\n    this.init();\r\n  }\r\n\r\n  init()\r\n  {\r\n    this.clearAlarms();\r\n\r\n    for (const [taskName, task] of Object.entries(this.schedulers))\r\n    {\r\n      try\r\n      {\r\n        task.task.init(taskName, this.setTTL);\r\n      }\r\n      catch (e)\r\n      {\r\n        Logger.error(e.message);\r\n      }\r\n    }\r\n    this.initListeners();\r\n    this.scheduleTask();\r\n  }\r\n\r\n  getTask(taskName)\r\n  {\r\n    const taskKey = Object.keys(this.schedulers).find((taskKey) => taskKey === taskName);\r\n    return this.schedulers[taskKey] || null;\r\n  }\r\n}\r\n","// The local storage for user settings\r\nimport { extension } from '@extension/common/webextension';\r\nimport { LocalStorageVariables, CacheStorageVariables } from '@extension/common/cache_store_variables';\r\nimport { BackgroundGlobals } from './background_globals';\r\n\r\nexport class CacheStore\r\n{\r\n  constructor()\r\n  {\r\n    this.onChangedListener = this.getOnChangedListener();\r\n    // Initialize store variables as member variables to null\r\n    for (const variable of Object.values(LocalStorageVariables)) this[variable.name] = null;\r\n    for (const variable of Object.values(CacheStorageVariables)) this[variable.name] = null;\r\n\r\n    this.init();\r\n    this.initListeners();\r\n  }\r\n\r\n  async init()\r\n  {\r\n    const promises = [];\r\n    // Get data from local storage and assign\r\n    for (const storeVariable of Object.values(LocalStorageVariables))\r\n    {\r\n      promises.push(LocalStorage.get(storeVariable.name).then((result) =>\r\n      {\r\n        const response = {};\r\n        response.storeVariable = storeVariable;\r\n        response.result = result;\r\n        return response;\r\n      }));\r\n    }\r\n\r\n    // Get cache storage data from local storage and assign\r\n    for (const storeVariable of Object.values(CacheStorageVariables))\r\n    {\r\n      promises.push(LocalStorage.get(storeVariable.name).then((result) =>\r\n      {\r\n        const response = {};\r\n        response.storeVariable = storeVariable;\r\n        response.result = result;\r\n        return response;\r\n      }));\r\n    }\r\n\r\n    const results = await Promise.all(promises);\r\n    results.forEach(({ storeVariable, result }) =>\r\n    {\r\n      if (typeof result !== 'boolean' && typeof result !== 'number')\r\n      {\r\n        result = result || null;\r\n      }\r\n      this[storeVariable.name] = result;\r\n    });\r\n  }\r\n\r\n  initListeners()\r\n  {\r\n    if (!extension.storage.local.onChanged.hasListener(this.onChangedListener))\r\n    {\r\n      extension.storage.onChanged.addListener(this.onChangedListener);\r\n    }\r\n  }\r\n\r\n  getOnChangedListener()\r\n  {\r\n    const onChanged = (setting) =>\r\n    {\r\n      const settingName = Object.keys(setting);\r\n      if (setting[settingName].oldValue === setting[settingName].newValue)\r\n      {\r\n        return;\r\n      }\r\n      if (BackgroundGlobals.wpsRequestedSettings.has(settingName[0]))\r\n      {\r\n        BackgroundGlobals.wssMessageDispatcher.setSettings(settingName[0], setting[settingName].newValue);\r\n      }\r\n    };\r\n    return onChanged;\r\n  }\r\n\r\n  /**\r\n   * Get the value from the cache\r\n   * @param  {string} db - store variable name\r\n   * @param  {any}  defaultValue - return default value given by the caller (if db is null)\r\n   * @returns {value} - value of what was saved on the db\r\n   */\r\n  get(db, defaultValue)\r\n  {\r\n    const cachedValue = this[db];\r\n\r\n    // if a defaultValue is not provided, then return the cached value\r\n    if (arguments.length < 2) return cachedValue;\r\n\r\n    // If a default value is given, then perform a value check for undefined\r\n    // or null, if so then return defaultValue, otherwise, return the cached value\r\n    return (cachedValue === null || cachedValue === undefined) ? defaultValue : cachedValue;\r\n  }\r\n\r\n  /**\r\n   * Sets the value to local storage and cache\r\n   * @param  {string} db - store variable name\r\n   * @param  {value}  value - value to be set\r\n   */\r\n  set(db, value)\r\n  {\r\n    this[db] = value;\r\n    if (LocalStorageVariables[db] || CacheStorageVariables[db]) LocalStorage.set(db, value);\r\n  }\r\n\r\n  /**\r\n   * Removes the db from local storage and sets cache db to null\r\n   * @param  {string} db - store variable name\r\n   */\r\n  clear(db)\r\n  {\r\n    if (this[db] === undefined) return;\r\n\r\n    this[db] = null;\r\n    if (LocalStorageVariables[db] || CacheStorageVariables[db]) LocalStorage.clear(db);\r\n  }\r\n\r\n  /**\r\n   * Gets mutliple values to the local storage/cache\r\n   * @param  {object} data - store variable name\r\n   *          - Key : db value to get\r\n   *          - Value: default value to retrieve if not in db\r\n   * Ex, data = { \"SOME_DB_VALUE_NAME\": false }\r\n   */\r\n  getMultiple(data)\r\n  {\r\n    for (const prop in data)\r\n    {\r\n      data[prop] = this.get(prop, data[prop]);\r\n    }\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Sets mutliple values to the local storage/cache\r\n   * @param  {object} data - store variable name\r\n   *          - Key : db name to set\r\n   *          - Value: value of the db name\r\n   * Ex, data = { \"SOME_DB_VALUE_NAME\": true }\r\n   */\r\n  setMultiple(data)\r\n  {\r\n    for (const prop in data)\r\n    {\r\n      this.set(prop, data[prop]);\r\n    }\r\n  }\r\n\r\n  clearSessionVariables()\r\n  {\r\n    for (const value of Object.values(CacheStorageVariables))\r\n    {\r\n      this.clear(value.name);\r\n    }\r\n  }\r\n}\r\n\r\nexport class LocalStorage\r\n{\r\n  /**\r\n   * Sets the value to local storage\r\n   * @param  {string} db - store variable name\r\n   * @param  {value}  value - value to be set\r\n   */\r\n  static set(db, value)\r\n  {\r\n    extension.storage.local.set({ [db]: value });\r\n  }\r\n\r\n  /**\r\n   * Gets the value for the db specified. Async call\r\n   * @param  {string} db - store variable name\r\n   * @returns {promise} - returns a promise\r\n   */\r\n  static get(db)\r\n  {\r\n    const handleResponse = (resolve, result) =>\r\n    {\r\n      // Resolve all variables found in storage\r\n      if (db === null)\r\n      {\r\n        resolve(result);\r\n      }\r\n\r\n      // Resolve specific property provided by db string\r\n      let value = result[db];\r\n      if (typeof value !== 'boolean' && typeof value !== 'number')\r\n      {\r\n        value = value || null;\r\n      }\r\n\r\n      resolve(value);\r\n    };\r\n\r\n    return new Promise((resolve) => extension.storage.local.get(db, (result) => handleResponse(resolve, result)));\r\n  }\r\n\r\n  /**\r\n   * Removes the db and associated values from local storage\r\n   * @param  {string} db - store variable name\r\n   */\r\n  static clear(db)\r\n  {\r\n    extension.storage.local.remove(db);\r\n  }\r\n}\r\n","export default class GarbageCollector\r\n{\r\n  constructor()\r\n  {\r\n    this.collection = [];\r\n  }\r\n\r\n  add(cache)\r\n  {\r\n    this.collection.push(cache);\r\n\r\n    if (this.collection.length === 1)\r\n    {\r\n      this.setCleanUpTimer();\r\n    }\r\n  }\r\n\r\n  setCleanUpTimer()\r\n  {\r\n    setInterval(() =>\r\n    {\r\n      this.collection.forEach((cache) =>\r\n      {\r\n        cache.checkCache();\r\n      });\r\n    }, 1000 * 60 * 60);\r\n  }\r\n}\r\n","export const TelemetryGlobals = {\r\n  dataCollector: null,\r\n  dictionaryMapper: null,\r\n  eventManager: null,\r\n  datasetManager: null,\r\n  eventHandler: null,\r\n  profiles: null,\r\n  rulesManager: null,\r\n  storage: new Map(),\r\n  engine: null,\r\n  url: null,\r\n  externalLogger: {\r\n    log: null,\r\n    error: null,\r\n    warn: null,\r\n    debug: null,\r\n  },\r\n};\r\n","import { TelemetryGlobals } from './telemetry_globals';\r\n\r\nconst EXTN_TELEMETRY = 'EXTN_TELEMETRY';\r\nconst LOG_COLOR = '#036C5C';\r\n\r\nexport default class Logger\r\n{\r\n  static log(msg)\r\n  {\r\n    if (typeof TelemetryGlobals.externalLogger.log !== 'function')\r\n    {\r\n      console.log(`log: ${msg}`);\r\n    }\r\n    else\r\n    {\r\n      TelemetryGlobals.externalLogger.log(msg, EXTN_TELEMETRY, LOG_COLOR);\r\n    }\r\n  }\r\n\r\n  static error(msg)\r\n  {\r\n    if (typeof TelemetryGlobals.externalLogger.error !== 'function')\r\n    {\r\n      console.log(`error: ${msg}`);\r\n    }\r\n    else\r\n    {\r\n      TelemetryGlobals.externalLogger.error(msg, EXTN_TELEMETRY, LOG_COLOR);\r\n    }\r\n  }\r\n\r\n  static warn(msg)\r\n  {\r\n    if (typeof TelemetryGlobals.externalLogger.warn !== 'function')\r\n    {\r\n      console.log(`warn: ${msg}`);\r\n    }\r\n    else\r\n    {\r\n      TelemetryGlobals.externalLogger.warn(msg, EXTN_TELEMETRY, LOG_COLOR);\r\n    }\r\n  }\r\n\r\n  static debug(msg)\r\n  {\r\n    if (typeof TelemetryGlobals.externalLogger.debug !== 'function')\r\n    {\r\n      console.log(`debug: ${msg}`);\r\n    }\r\n    else\r\n    {\r\n      TelemetryGlobals.externalLogger.debug(msg, EXTN_TELEMETRY, LOG_COLOR);\r\n    }\r\n  }\r\n\r\n\r\n  static logRawTrack()\r\n  {\r\n    // TODO\r\n  }\r\n\r\n  static logAutomationError()\r\n  {\r\n    // TODO\r\n  }\r\n}\r\n","import Logger from './logger';\r\n\r\n/**\r\n * Extract out all nested properties and move to top-level of the object\r\n */\r\nexport function normalizePayload(recordPayload)\r\n{\r\n  if (!recordPayload)\r\n  {\r\n    return null;\r\n  }\r\n\r\n  const normalizedPayload = {};\r\n\r\n  for (const key of Object.keys(recordPayload))\r\n  {\r\n    const obj = recordPayload[key];\r\n    if (obj instanceof Array)\r\n    {\r\n      // Arrays doesn't have key-value pair,so just assign it to the attribute (corner case)\r\n      normalizedPayload[key] = obj;\r\n    }\r\n    else if (typeof obj === 'object')\r\n    {\r\n      for (const objKey of Object.keys(obj))\r\n      {\r\n        normalizedPayload[objKey] = obj[objKey];\r\n      }\r\n    }\r\n    else\r\n    {\r\n      normalizedPayload[key] = obj;\r\n    }\r\n  }\r\n\r\n  return normalizedPayload;\r\n}\r\n\r\n/**\r\n * HTTP fetch call to obtain the json data\r\n */\r\nexport async function fetchJSONContent(filename)\r\n{\r\n  const response = await fetch(`./TestData/${filename}.json`, {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  });\r\n\r\n  return response.json();\r\n}\r\n\r\n/**\r\n * Shallow copy objects\r\n * @param {Object} destination - Object with properties being merged into it\r\n * @param {Object} source  - Source object that will be copied by the destination\r\n * @param {Boolean} lowerCaseKeys - Lowercase keys if applicable\r\n */\r\nexport function mergeObjects(destination, source, lowerCaseKeys = false)\r\n{\r\n  if (!destination || !source) return;\r\n\r\n  Object.keys(source).forEach((key) =>\r\n  {\r\n    const newKey = lowerCaseKeys ? key.toLowerCase() : key;\r\n    destination[newKey] = source[key];\r\n  });\r\n}\r\n\r\n/**\r\n * Lowercase key and values of an object.\r\n */\r\nexport function lowerCaseObjectKeyValuePair(obj, isKeyLowered, isValueLowered)\r\n{\r\n  Object.keys(obj).forEach((key) =>\r\n  {\r\n    // Create new key and value\r\n    const newKey = isKeyLowered ? key.toLowerCase() : key;\r\n    obj[newKey] = isValueLowered ? obj[key].toLowerCase() : obj[key];\r\n\r\n    // Delete old key if it doesn't match with the new key from the object\r\n    if (newKey !== key)\r\n    {\r\n      delete obj[key];\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Remove duplicates from an array\r\n */\r\nexport function arrayRemoveDuplicates(arr)\r\n{\r\n  return [...new Set(arr)];\r\n}\r\n\r\n\r\n/**  Checks if an item exists in an array\r\n  * PARAMS:\r\n  * @param {Array} array - array to be searched\r\n  * @param {Array} itemName - search value\r\n  *\r\n  * RETURN:\r\n  *  true: if exists, false otherwise\r\n**/\r\nexport function arrayIncludes(array, itemTocheck)\r\n{\r\n  for (const item of array)\r\n  {\r\n    if (itemTocheck === item)\r\n    {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Extract common elements from two arrays\r\n * @param {String[]} arrayOne - First array being iterated\r\n * @param {String[]} arrayTwo - Second array used to test if element exists\r\n * @returns A new array with the common elements\r\n */\r\nexport function getCommonElements(arrayOne, arrayTwo)\r\n{\r\n  return arrayOne.filter(element => arrayTwo.includes(element));\r\n}\r\n\r\n/** Deletes items from an array - first occurence\r\n    *\r\n    * PARAMS:\r\n    *  @param {Array} array: target array\r\n    *  @param {Array} itemName: search value\r\n    *\r\n    * RETURN:\r\n    *  true: if exists, false otherwise\r\n**/\r\nexport function removeItemFromArray(array, itemName)\r\n{\r\n  for (const [idx, value] of array.entries())\r\n  {\r\n    if (itemName === value)\r\n    {\r\n      array.splice(idx, 1);\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Generate hash using MD5 algorithm\r\n * @param {String} string\r\n */\r\nexport function processMD5Hash(string)\r\n{\r\n  function RotateLeft(lValue, iShiftBits)\r\n  {\r\n    return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));\r\n  }\r\n\r\n  function AddUnsigned(lX, lY)\r\n  {\r\n    let lX4; let lY4; let lX8; let lY8; let\r\n      lResult;\r\n    lX8 = (lX & 0x80000000);\r\n    lY8 = (lY & 0x80000000);\r\n    lX4 = (lX & 0x40000000);\r\n    lY4 = (lY & 0x40000000);\r\n    lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);\r\n    if (lX4 & lY4)\r\n    {\r\n      return (lResult ^ 0x80000000 ^ lX8 ^ lY8);\r\n    }\r\n    if (lX4 | lY4)\r\n    {\r\n      if (lResult & 0x40000000)\r\n      {\r\n        return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);\r\n      }\r\n\r\n      return (lResult ^ 0x40000000 ^ lX8 ^ lY8);\r\n    }\r\n\r\n    return (lResult ^ lX8 ^ lY8);\r\n  }\r\n\r\n  function F(x, y, z) { return (x & y) | ((~x) & z); }\r\n  function G(x, y, z) { return (x & z) | (y & (~z)); }\r\n  function H(x, y, z) { return (x ^ y ^ z); }\r\n  function I(x, y, z) { return (y ^ (x | (~z))); }\r\n\r\n  function FF(a, b, c, d, x, s, ac)\r\n  {\r\n    a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));\r\n    return AddUnsigned(RotateLeft(a, s), b);\r\n  }\r\n\r\n  function GG(a, b, c, d, x, s, ac)\r\n  {\r\n    a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));\r\n    return AddUnsigned(RotateLeft(a, s), b);\r\n  }\r\n\r\n  function HH(a, b, c, d, x, s, ac)\r\n  {\r\n    a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));\r\n    return AddUnsigned(RotateLeft(a, s), b);\r\n  }\r\n\r\n  function II(a, b, c, d, x, s, ac)\r\n  {\r\n    a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));\r\n    return AddUnsigned(RotateLeft(a, s), b);\r\n  }\r\n\r\n  function ConvertToWordArray(string)\r\n  {\r\n    let lWordCount;\r\n    const lMessageLength = string.length;\r\n    const lNumberOfWords_temp1 = lMessageLength + 8;\r\n    const lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;\r\n    const lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;\r\n    const lWordArray = Array(lNumberOfWords - 1);\r\n    let lBytePosition = 0;\r\n    let lByteCount = 0;\r\n    while (lByteCount < lMessageLength)\r\n    {\r\n      lWordCount = (lByteCount - (lByteCount % 4)) / 4;\r\n      lBytePosition = (lByteCount % 4) * 8;\r\n      lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount) << lBytePosition));\r\n      lByteCount++;\r\n    }\r\n    lWordCount = (lByteCount - (lByteCount % 4)) / 4;\r\n    lBytePosition = (lByteCount % 4) * 8;\r\n    lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);\r\n    lWordArray[lNumberOfWords - 2] = lMessageLength << 3;\r\n    lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;\r\n    return lWordArray;\r\n  }\r\n\r\n  function WordToHex(lValue)\r\n  {\r\n    let WordToHexValue = '';\r\n    let WordToHexValue_temp = '';\r\n    let lByte;\r\n    let lCount;\r\n    for (lCount = 0; lCount <= 3; lCount++)\r\n    {\r\n      lByte = (lValue >>> (lCount * 8)) & 255;\r\n      WordToHexValue_temp = `0${lByte.toString(16)}`;\r\n      WordToHexValue += WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);\r\n    }\r\n    return WordToHexValue;\r\n  }\r\n\r\n  function Utf8Encode(string)\r\n  {\r\n    string = string.replace(/\\r\\n/g, '\\n');\r\n    let utftext = '';\r\n\r\n    for (let n = 0; n < string.length; n++)\r\n    {\r\n      const c = string.charCodeAt(n);\r\n\r\n      if (c < 128)\r\n      {\r\n        utftext += String.fromCharCode(c);\r\n      }\r\n      else if ((c > 127) && (c < 2048))\r\n      {\r\n        utftext += String.fromCharCode((c >> 6) | 192);\r\n        utftext += String.fromCharCode((c & 63) | 128);\r\n      }\r\n      else\r\n      {\r\n        utftext += String.fromCharCode((c >> 12) | 224);\r\n        utftext += String.fromCharCode(((c >> 6) & 63) | 128);\r\n        utftext += String.fromCharCode((c & 63) | 128);\r\n      }\r\n    }\r\n\r\n    return utftext;\r\n  }\r\n\r\n  let x = Array();\r\n  let k; let AA; let BB; let CC; let DD; let a; let b; let c; let\r\n    d;\r\n  const S11 = 7; const S12 = 12; const S13 = 17; const\r\n    S14 = 22;\r\n  const S21 = 5; const S22 = 9; const S23 = 14; const\r\n    S24 = 20;\r\n  const S31 = 4; const S32 = 11; const S33 = 16; const\r\n    S34 = 23;\r\n  const S41 = 6; const S42 = 10; const S43 = 15; const\r\n    S44 = 21;\r\n\r\n  string = Utf8Encode(string);\r\n\r\n  x = ConvertToWordArray(string);\r\n\r\n  a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;\r\n\r\n  for (k = 0; k < x.length; k += 16)\r\n  {\r\n    AA = a; BB = b; CC = c; DD = d;\r\n    a = FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);\r\n    d = FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);\r\n    c = FF(c, d, a, b, x[k + 2], S13, 0x242070DB);\r\n    b = FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);\r\n    a = FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);\r\n    d = FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);\r\n    c = FF(c, d, a, b, x[k + 6], S13, 0xA8304613);\r\n    b = FF(b, c, d, a, x[k + 7], S14, 0xFD469501);\r\n    a = FF(a, b, c, d, x[k + 8], S11, 0x698098D8);\r\n    d = FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);\r\n    c = FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);\r\n    b = FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);\r\n    a = FF(a, b, c, d, x[k + 12], S11, 0x6B901122);\r\n    d = FF(d, a, b, c, x[k + 13], S12, 0xFD987193);\r\n    c = FF(c, d, a, b, x[k + 14], S13, 0xA679438E);\r\n    b = FF(b, c, d, a, x[k + 15], S14, 0x49B40821);\r\n    a = GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);\r\n    d = GG(d, a, b, c, x[k + 6], S22, 0xC040B340);\r\n    c = GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);\r\n    b = GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);\r\n    a = GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);\r\n    d = GG(d, a, b, c, x[k + 10], S22, 0x2441453);\r\n    c = GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);\r\n    b = GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);\r\n    a = GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);\r\n    d = GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);\r\n    c = GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);\r\n    b = GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);\r\n    a = GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);\r\n    d = GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);\r\n    c = GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);\r\n    b = GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);\r\n    a = HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);\r\n    d = HH(d, a, b, c, x[k + 8], S32, 0x8771F681);\r\n    c = HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);\r\n    b = HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);\r\n    a = HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);\r\n    d = HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);\r\n    c = HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);\r\n    b = HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);\r\n    a = HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);\r\n    d = HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);\r\n    c = HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);\r\n    b = HH(b, c, d, a, x[k + 6], S34, 0x4881D05);\r\n    a = HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);\r\n    d = HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);\r\n    c = HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);\r\n    b = HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);\r\n    a = II(a, b, c, d, x[k + 0], S41, 0xF4292244);\r\n    d = II(d, a, b, c, x[k + 7], S42, 0x432AFF97);\r\n    c = II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);\r\n    b = II(b, c, d, a, x[k + 5], S44, 0xFC93A039);\r\n    a = II(a, b, c, d, x[k + 12], S41, 0x655B59C3);\r\n    d = II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);\r\n    c = II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);\r\n    b = II(b, c, d, a, x[k + 1], S44, 0x85845DD1);\r\n    a = II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);\r\n    d = II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);\r\n    c = II(c, d, a, b, x[k + 6], S43, 0xA3014314);\r\n    b = II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);\r\n    a = II(a, b, c, d, x[k + 4], S41, 0xF7537E82);\r\n    d = II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);\r\n    c = II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);\r\n    b = II(b, c, d, a, x[k + 9], S44, 0xEB86D391);\r\n    a = AddUnsigned(a, AA);\r\n    b = AddUnsigned(b, BB);\r\n    c = AddUnsigned(c, CC);\r\n    d = AddUnsigned(d, DD);\r\n  }\r\n\r\n  const temp = WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);\r\n\r\n  return temp.toLowerCase();\r\n}\r\n\r\nexport function generateGUIDFromHash(hashStr)\r\n{\r\n  if (hashStr.length != 32)\r\n  {\r\n    Logger.error(`Hashed string passed does not match required length(32). Value: ${hashStr}`);\r\n    return null;\r\n  }\r\n\r\n  let uid = '';\r\n  try\r\n  {\r\n    const data1 = hashStr.substr(0, 8);\r\n    const data2 = hashStr.substr(8, 4);\r\n    const data3 = hashStr.substr(12, 4);\r\n    const data4 = hashStr.substr(16, 4);\r\n    const data5 = hashStr.substr(20, 12);\r\n\r\n    uid = `{${data1}-${data2}-${data3}-${data4}-${data5}}`;\r\n    uid = uid.toUpperCase();\r\n  }\r\n  catch (e)\r\n  {\r\n    Logger.error(`Error retrieving guid from: ${hashStr}. Message: ${e.message}`);\r\n    return null;\r\n  }\r\n\r\n  return uid;\r\n}\r\n\r\nexport function isoDateToDate(value)\r\n{\r\n  try\r\n  {\r\n    if (!value || (value.length < 8))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const year = parseInt(value.substr(0, 4), 10);\r\n    const month = parseInt(value.substr(5, 2), 10);\r\n    const day = parseInt(value.substr(8, 2), 10);\r\n    let hour = parseInt(value.substr(11, 2), 10);\r\n    let minute = parseInt(value.substr(14, 2), 10);\r\n    let second = parseInt(value.substr(17, 2), 10);\r\n    if (!year || !month || !day)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    hour = isNaN(hour) ? 0 : hour;\r\n    minute = isNaN(minute) ? 0 : minute;\r\n    second = isNaN(second) ? 0 : second;\r\n\r\n    return new Date(Date.UTC(year, month - 1, day, hour, minute, second));\r\n  }\r\n  catch (e)\r\n  {\r\n    Logger.warn(`isoDateToDate: exception caught with message: ${e.message}`);\r\n    return null;\r\n  }\r\n}\r\n","import Logger from './logger';\r\n\r\nexport default class OperationsManager\r\n{\r\n  /**  Applies an operation configuration to a value\r\n   *\r\n   *  PARAMS:\r\n   *      @param {string} value: Value to be operated on\r\n   *      @param {string} operationConfig: Defines the operation name and any required params\r\n   *\r\n   *  RETURN:\r\n   *      postOperation value (null if exception caught)\r\n   *\r\n   **/\r\n  static apply(value, operationConfig)\r\n  {\r\n    try\r\n    {\r\n      if (!operationConfig)\r\n      {\r\n        return value;\r\n      }\r\n      if (!OperationsManager._isValidValue(value))\r\n      {\r\n        OperationsManager._logWarn(`Invalid value Val(${value}). Operation with operationConfig(${JSON.stringify(operationConfig)}) will not be applied`);\r\n        return null;\r\n      }\r\n      return this[operationConfig.name](value, operationConfig.params);\r\n    }\r\n    catch (e)\r\n    {\r\n      OperationsManager._logError(`operations:apply: Excption caught(${e.message}. Val(${value}), operationConfig(${JSON.stringify(operationConfig)})`);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /* No operation\r\n  */\r\n  static noop(value) { return value; }\r\n\r\n  /* Equal operation\r\n  */\r\n  static equal(value, param) { return value == param; }\r\n\r\n  /* Valid value operation\r\n  */\r\n  static isValueValid(value)\r\n  {\r\n    return (value != '[not assigned]') && (value != '[ruleMismatch]') && (value != '[ruleError]');\r\n  }\r\n\r\n  /* Returns true if value is not null, false otherwise\r\n  */\r\n  static notNull(value) { return (value != null); }\r\n\r\n  /* Return value at index params\r\n  */\r\n  static at(value, params)\r\n  {\r\n    if (!value || !OperationsManager._isValidValue(value))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return value[params];\r\n  }\r\n\r\n  /* Combines day, month and year into a date\r\n  */\r\n  static combineCustomDate(value, params)\r\n  {\r\n    //should be same size\r\n    if (findObjectSize(value) != findObjectSize(params))\r\n    {\r\n      return null;\r\n    }\r\n    return `${value.InstalledYear}-${value.InstalledMonth}-${value.InstalledDate}`;\r\n  }\r\n\r\n  /* Splits value based on params and returns the result\r\n  */\r\n  static split(value, params)\r\n  {\r\n    return value.split(params);\r\n  }\r\n\r\n  /*  Return first not null item in values (values is expected to be an array or object)\r\n  */\r\n  static first(values)\r\n  {\r\n    for (const idx in values)\r\n    {\r\n      if (values[idx] != null)\r\n      {\r\n        return values[idx];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* Apply a mask operation between value and params\r\n  */\r\n  static mask(value, params)\r\n  {\r\n    return value & params;\r\n  }\r\n\r\n  /* Applies logical OR between the values in array or object\r\n  */\r\n  static or(values)\r\n  {\r\n    for (const idx in values)\r\n    {\r\n      if (values[idx])\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /* Applies logical AND between the values in array or object\r\n  */\r\n  static and(values)\r\n  {\r\n    for (const idx in values)\r\n    {\r\n      if (!values[idx])\r\n      {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* Returns value*params\r\n  */\r\n  static multiply(value, params)\r\n  {\r\n    return parseInt(value, 10) * params;\r\n  }\r\n\r\n  /* Returns value/params\r\n  */\r\n  static divide(value, params)\r\n  {\r\n    return parseInt(value, 10) / params;\r\n  }\r\n\r\n  /* Joins value based on params (value is expected to be an array)\r\n  */\r\n  static join(value, params)\r\n  {\r\n    return value.join(params);\r\n  }\r\n\r\n  /*\r\n  * Used to add \"0x\" to OS locale from windows WMI e.g cleanLocaleCode(\"0320\") ==> \"0x0320\"\r\n  */\r\n  static cleanLocaleCode(value, params)\r\n  {\r\n    try\r\n    {\r\n      if (value)\r\n      {\r\n        //value should be a string\r\n        if (typeof value !== 'string')\r\n        {\r\n          value = String(value);\r\n        }\r\n\r\n        //It's a 16 bit hex value,append 0x\r\n        if (value.length == 4)\r\n        {\r\n          value = `0x${value}`;\r\n        }\r\n      }\r\n    }\r\n    catch (e)\r\n    {\r\n      OperationsManager._logError(`splitLocaleCode exception: ${e.message}`);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /* Returns number of days until a value\r\n  */\r\n  static daysTo(value)\r\n  {\r\n    if (typeof value.getTime !== 'function')\r\n    {\r\n      OperationsManager._logError(`daysTo: value is not datetime object (${value})`);\r\n      return null;\r\n    }\r\n    return OperationsManager._getDaysBetween(value, null);\r\n  }\r\n\r\n  /* Returns a value rounded up/down\r\n  * params is in the form {multiple: multipleValue, roundUp: flag to detonate rounding up or down}\r\n  */\r\n  static round(value, params)\r\n  {\r\n    try\r\n    {\r\n      if (!params)\r\n      {\r\n        return value;\r\n      }\r\n\r\n      var { multiple } = params;\r\n      var { roundUp } = params;\r\n      if (!multiple)\r\n      {\r\n        return value;\r\n      }\r\n\r\n      const roundDown = parseInt((value / multiple), 10) * multiple;\r\n      if (roundUp == true)\r\n      {\r\n        return roundDown + multiple;\r\n      }\r\n\r\n      return roundDown;\r\n    }\r\n    catch (e)\r\n    {\r\n      OperationsManager._logError(`roundtoNearestMultiple: { numToRound: ${value}, multiple: ${multiple}, roundUp: ${roundUp} } exception caught with message: ${e.message}`);\r\n      return value;\r\n    }\r\n  }\r\n\r\n  /* Returns time since a value\r\n  * params can be used to return time in (days, minutes, hours)\r\n  */\r\n  static timeSince(value, params)\r\n  {\r\n    if ((value == null) || (typeof value.getTime !== 'function'))\r\n    {\r\n      OperationsManager._logError(`daysTo: value is not datetime object (${value})`);\r\n      return null;\r\n    }\r\n\r\n    const one_minute_ms = 1000 * 60;\r\n    const one_hour_ms = one_minute_ms * 60;\r\n    const one_day_ms = one_hour_ms * 24;\r\n\r\n    const timeNow = Date.now();\r\n\r\n    const difference_ms = timeNow - value.getTime();\r\n\r\n    if (!params || params === 'days')\r\n    {\r\n      return parseInt(difference_ms / one_day_ms, 10); // days\r\n    }\r\n\r\n    if (params === 'hours')\r\n    {\r\n      return parseInt((difference_ms % one_day_ms) / one_hour_ms, 10); // hours\r\n    }\r\n\r\n    if (params === 'minutes')\r\n    {\r\n      return parseInt(((difference_ms % one_day_ms) % one_hour_ms) / one_minute_ms, 10); // minutes\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /* Returns value for given key\r\n  * params stringified json object\r\n  */\r\n  static getKeyFromJson(value, params)\r\n  {\r\n    try\r\n    {\r\n      const data = JSON.parse(value);\r\n      return data[params.key];\r\n    }\r\n    catch (e)\r\n    {\r\n      OperationsManager._logError(`getKeyFromJson: exception (${e.message})`);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /* Transforms the value based on the params\r\n  */\r\n  static transform(value, params)\r\n  {\r\n    return params[value];\r\n  }\r\n\r\n\r\n  /* Converts a Date object to epoch\r\n  */\r\n  static dateToEpoch(value)\r\n  {\r\n    return value.getTime() / 1000;\r\n  }\r\n\r\n  /* Converts a epoch to ISO date string\r\n  */\r\n  static epochToISODate(value)\r\n  {\r\n    if (!value) return null;\r\n\r\n    const dateValue = new Date(0);\r\n    dateValue.setUTCSeconds(value);\r\n    return dateValue.toISOString();\r\n  }\r\n\r\n  /* Converts a Date object to ISO string\r\n  *  if params === dataTime, the function will return ISO datetime format\r\n  */\r\n  static dateToISO(value, params)\r\n  {\r\n    if (!value || !OperationsManager._isValidValue(value))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    if (params && params === 'dateTime')\r\n    {\r\n      return value.toISOString();\r\n    }\r\n    return value.toISOString(true);\r\n  }\r\n\r\n  /* Converts WSS date format to Date object\r\n  */\r\n  static wssDateToDate(value)\r\n  {\r\n    if (!value || (value.length != 8))\r\n    {\r\n      return null;\r\n    }\r\n\r\n    const year = parseInt(value.substr(0, 4), 10);\r\n    const month = parseInt(value.substr(4, 2), 10);\r\n    const day = parseInt(value.substr(6, 2), 10);\r\n    if (!year || !month || !day)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return new Date(year, month - 1, day);\r\n  }\r\n\r\n  /*\r\n  */\r\n  static _isValidValue(value)\r\n  {\r\n    if (value == '[not assigned]' || value == '[ruleMismatch]' || value == '[ruleError]')\r\n    {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  static _getDaysBetween(date2, date1)\r\n  {\r\n    try\r\n    {\r\n      //Get 1 day in milliseconds\r\n      const one_day = 1000 * 60 * 60 * 24;\r\n\r\n      // Convert both dates to milliseconds\r\n      const date2_ms = date2.getTime();\r\n\r\n      let date1_ms;\r\n      if (!date1)\r\n      {\r\n        date1_ms = Date.now();\r\n      }\r\n      else\r\n      {\r\n        date1_ms = date1.getTime();\r\n      }\r\n\r\n      // Calculate the difference in milliseconds\r\n      const difference_ms = date2_ms - date1_ms;\r\n\r\n      // Convert back to days and return\r\n      return parseInt((difference_ms / one_day), 10);\r\n    }\r\n    catch (e)\r\n    {\r\n      OperationsManager._logError(`Exception caught while calculating difference between dates: ${e.message}`);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  // Map id to index in array (params)\r\n  static containsIn(value, params)\r\n  {\r\n    const Ivalue = parseInt(value, 10);\r\n    if (params[Ivalue] !== undefined)\r\n    {\r\n      return params[Ivalue];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Convert a date string (YYYYMMDDhhmmss) to iso date time\r\n  static stringToDate(value)\r\n  {\r\n    try\r\n    {\r\n      if (!value || (value.length < 14))\r\n      {\r\n        return null;\r\n      }\r\n\r\n      const year = parseInt(value.substr(0, 4), 10);\r\n      const month = parseInt(value.substr(4, 2), 10);\r\n      const day = parseInt(value.substr(6, 2), 10);\r\n      const hour = parseInt(value.substr(8, 2), 10);\r\n      const minute = parseInt(value.substr(10, 2), 10);\r\n      const second = parseInt(value.substr(12, 2), 10);\r\n\r\n      const invalidDates = !year || !month || !day || !hour || !minute || !second;\r\n      if (invalidDates)\r\n      {\r\n        return null;\r\n      }\r\n\r\n      return new Date(year, month - 1, day, hour, minute, second);\r\n    }\r\n    catch (e)\r\n    {\r\n      OperationsManager._logError(`Exception caught in stringToDate: ${e.message}`);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  static stringToISODate(params)\r\n  {\r\n    return OperationsManager.dateToISO(OperationsManager.stringToDate(params), 'dateTime');\r\n  }\r\n\r\n  static _logInfo(msg)\r\n  {\r\n    Logger.log(`operations: ${msg}`);\r\n  }\r\n\r\n  static _logError(msg)\r\n  {\r\n    Logger.error(`operations: ${msg}`);\r\n  }\r\n\r\n  static _logWarn(msg)\r\n  {\r\n    Logger.warn(`operations: ${msg}`);\r\n  }\r\n}\r\n","import Logger from './logger';\r\nimport OperationsManager from './operations_manager';\r\nimport { TelemetryGlobals } from './telemetry_globals';\r\nimport { arrayIncludes, getCommonElements, removeItemFromArray } from './utils';\r\n\r\nexport default class DataCollector\r\n{\r\n  /**\r\n   * Starts the data_collector:\r\n   * - Loads JSON file from data_items.json\r\n   * - Marks all items as expired\r\n   * - Creates farmers and refreshers objects\r\n   * @param {Object} data_items - JSON data\r\n   */\r\n  constructor(data_items)\r\n  {\r\n    this.farmers = null; // Farmers are responsible of harvesting data points. Gets defined at run time, since it requires the data_collector object\r\n    this.refreshers = {}; // Refreshers can set a timeout to recollect the datapoint or reapply an opration. Gets defined at run time, since it requires the data_collector object\r\n    this.harvestQueue = []; // List of items being harvested. Used to eliminate circular dependencies\r\n    this.expiredItems = []; // A list of expired items and need to be collected again\r\n    this.expiryQueue = []; // List of items being marked expired. Used to eliminate circular dependencies\r\n    this.operationExpiredItems = []; // A list of expired items and need to be collected again\r\n    this.rawDataStore = {}; // A collection of items harvested, but not operated on yet (raw data)\r\n    this.cache = {}; // Contains loaded values (post operations)\r\n    this.definitions = data_items; // Definitions of how to collect each datapoint\r\n    this.subscribedMsgs = {}; // Has a list of msg bus subscribed msgs and the corresponding datapoints\r\n\r\n    try\r\n    {\r\n      Logger.debug('data_collector: Setup Started.');\r\n\r\n      this.farmers = this.createFarmers();\r\n      this.refreshers = this.createRefreshers();\r\n\r\n      if (!this.farmers || !this.refreshers || !this.definitions)\r\n      {\r\n        Logger.error(`data_collector: Setup failed: farmers(${this.farmers}). refreshers(${this.refreshers}). definitions(${this.definitions})`);\r\n        return;\r\n      }\r\n\r\n      // Mark all items as expired\r\n      const keys = [...Object.keys(this.definitions)];\r\n      this.markDataExpired(keys);\r\n\r\n      Logger.debug('data_collector: Setup Done.');\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(`data_collector: Setup failed: ${e.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves data points from different sources (full or partial data collection on harvested data maybe applied)\r\n   * Reference: https://confluence-lvs.prod.mcafee.com/display/CA/Data_Collector\r\n   * @param {String[]} itemsList - Array of keys which denote the items being requested for\r\n   * @returns - JSON object with the key-value pairs { \"key1\":\"value1\", \"key2\":\"value2\" ... }\r\n   */\r\n  get(itemsList)\r\n  {\r\n    try\r\n    {\r\n      let buff = null;\r\n\r\n      if (typeof itemsList === 'string')\r\n      {\r\n        buff = itemsList;\r\n        itemsList = [itemsList];\r\n      }\r\n\r\n      if (!(itemsList instanceof Array))\r\n      {\r\n        Logger.warn(`data_collector: get: itemsList not an array (${itemsList}).`);\r\n        return {};\r\n      }\r\n\r\n      // Load expired data items\r\n      const expiredDataPoints = getCommonElements(this.expiredItems, itemsList);\r\n      this.updateCache(expiredDataPoints, false);\r\n\r\n      // Perfom operations on operation expired data items\r\n      const operationExpiredDatapoints = getCommonElements(this.operationExpiredItems, itemsList);\r\n      this.updateCache(operationExpiredDatapoints, true);\r\n\r\n      const collection = this.createCollection(itemsList);\r\n      return buff ? collection[buff] : collection;\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(`data_collector: get: ${e.message}`);\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /* Marks data points as expired\r\n      *\r\n      * PARAMS\r\n      *  itemsList - an array of item names or a single item name to be marked as expired\r\n      *\r\n      */\r\n  markDataExpired(itemsList)\r\n  {\r\n    try\r\n    {\r\n      Logger.debug(`data_collector: Marking items as expired: ${JSON.stringify(itemsList)}`);\r\n\r\n      if (typeof itemsList === 'string')\r\n      {\r\n        itemsList = [itemsList];\r\n      }\r\n\r\n      if (!(itemsList instanceof Array))\r\n      {\r\n        Logger.warn(`data_collector: markDataExpired: itemsList not an array (${itemsList}).`);\r\n        return;\r\n      }\r\n\r\n      // Check for circular dependency\r\n      for (const item of itemsList)\r\n      {\r\n        if (arrayIncludes(this.expiryQueue, item))\r\n        {\r\n          Logger.warn(`data_collector: Circular dependency detected for ${itemsList[idx]}`);\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Load expired data items\r\n      for (const item of itemsList)\r\n      {\r\n        if (!arrayIncludes(this.expiredItems, item))\r\n        {\r\n          this.expiryQueue.push(item);\r\n          this.expiredItems.push(item);\r\n          removeItemFromArray(this.expiryQueue, item);\r\n        }\r\n      }\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(`data_collector: markDataExpired: ${e.message}`);\r\n    }\r\n  }\r\n\r\n  /* Marks data points as expired if equal to a value\r\n      *\r\n      * PARAMS\r\n      *  itemName - single item name to be retrieved\r\n      *  value   - value to compare\r\n      *\r\n      */\r\n  markDataExpiredIfEq(itemName, value) // single itmes\r\n  {\r\n    if (this.cache[itemName] === value)\r\n    {\r\n      this.markDataExpired(itemName);\r\n    }\r\n  }\r\n\r\n  /* Marks data points operations as expired\r\n      *\r\n      * PARAMS\r\n      *  itemsList - an array of item names or a single item name to be retrieved\r\n      *\r\n      */\r\n  markDataOperationExpired(itemsList)\r\n  {\r\n    try\r\n    {\r\n      Logger.debug(`data_collector: Marking items as operation expired: ${JSON.stringify(itemsList)}`);\r\n\r\n      if (typeof itemsList === 'string')\r\n      {\r\n        itemsList = [itemsList];\r\n      }\r\n\r\n      if (!(itemsList instanceof Array))\r\n      {\r\n        Logger.warn(`data_collector: markDataOperationExpired: itemsList not an array (${itemsList}).`);\r\n        return;\r\n      }\r\n\r\n      // Load expired data items\r\n      for (const idx of itemsList)\r\n      {\r\n        const key = itemsList[idx];\r\n        if (!arrayIncludes(this.operationExpiredItems, key))\r\n        {\r\n          this.operationExpiredItems.push(key);\r\n        }\r\n      }\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(`data_collector: markDataOperationExpired: ${e.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if items are expired\r\n   * @param {String[]} itemsList - An array of item names or a single item name to be checked\r\n   * @returns {Boolean} - True if one or more elements are expired, false otherwise\r\n   */\r\n  isExpired(itemsList)\r\n  {\r\n    try\r\n    {\r\n      if (typeof itemsList === 'string')\r\n      {\r\n        itemsList = [itemsList];\r\n      }\r\n\r\n      if (!(itemsList instanceof Array))\r\n      {\r\n        Logger.error(`data_collector: isExpired: itemsList not an array (${itemsList}).`);\r\n        return false;\r\n      }\r\n\r\n      // Load expired data items\r\n      const expiredDataPoints = getCommonElements(this.expiredItems, itemsList);\r\n      return expiredDataPoints.length !== 0;\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(`data_collector: isExpired: ${e.message}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a collection of key-value parameters by retrieving data points from the data_collector\r\n   * @param {String[]} itemsList - An array of item names\r\n   */\r\n  createCollection(itemsList)\r\n  {\r\n    try\r\n    {\r\n      const collection = {};\r\n      for (const idx in itemsList)\r\n      {\r\n        const itemName = itemsList[idx];\r\n        collection[itemName] = (this.cache[itemName] !== undefined) ? this.cache[itemName] : '[unknown]';\r\n      }\r\n\r\n      return collection;\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(`createCollection: ${e.message}`);\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collects the data points and processes them\r\n   * @param {String[]} itemsList - An array of items\r\n   * @param {Boolean} operationOnly - If true, the last harvest value is used instead of reharvesting\r\n   */\r\n  updateCache(itemsList, operationOnly)\r\n  {\r\n    if (!(itemsList instanceof Array))\r\n    {\r\n      Logger.warn(`data_collecter: loadItem: No item definition found for (${itemsList})`);\r\n      return;\r\n    }\r\n\r\n    if (itemsList.length === 0) return;\r\n\r\n    for (const item of itemsList)\r\n    {\r\n      try\r\n      {\r\n        this.loadSingleItem(item, operationOnly);\r\n      }\r\n      catch (e)\r\n      {\r\n        Logger.error(`data_collector: updateCache: Issue with loading singleItem for (${item})`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Collects a single data point and processes it\r\n  *       Items are stored in the data_collector\r\n  *\r\n  * PARAMS:\r\n  *   itemName: target data_item name\r\n  *   operationOnly: If true, the last harvest value is used instead of reharvesting\r\n  */\r\n  loadSingleItem(itemName, operationOnly)\r\n  {\r\n    const itemDefinition = this.definitions[itemName];\r\n\r\n    if (!itemDefinition)\r\n    {\r\n      Logger.error(`data_collecter: loadItem: No item definition found for (${itemName})`);\r\n      this.cache[itemName] = '[unknown]';\r\n      return;\r\n    }\r\n\r\n    if (!operationOnly)\r\n    {\r\n      this.harvest(itemName, itemDefinition);\r\n    }\r\n\r\n    // Apply operation\r\n    const postOperationValue = this.processOperation(itemName, itemDefinition.operationConfig);\r\n\r\n    // Apply rule\r\n    const postRuleValue = TelemetryGlobals.rulesManager.apply(postOperationValue, itemDefinition.rule);\r\n\r\n    // Store\r\n    this.cache[itemName] = postRuleValue;\r\n\r\n    // Process Refresh\r\n    this.setRefreshers(itemName, itemDefinition.refresh);\r\n  }\r\n\r\n  /* Reads a value based on it's definition\r\n  *   Will call the farmers to do the harvesting\r\n  *   No operations are done in this stage\r\n  *   Detects circular dependency for items already being collected\r\n  *\r\n  * PARAMS:\r\n  *   itemName: target data_item name\r\n  *   itemDefinition: item definition retrieved from data_items.json\r\n  */\r\n  harvest(itemName, itemDefinition)\r\n  {\r\n    try\r\n    {\r\n      Logger.debug(`data_collector: harvest: Harvesting(${itemName})`);\r\n\r\n      // Since we can collect data from the current datastore, we need to ensure no circular dependency\r\n      // If the itemName is already being collected, we have a circular dependency\r\n      if (arrayIncludes(this.harvestQueue, itemName))\r\n      {\r\n        this.rawDataStore[itemName] = null;\r\n        removeItemFromArray(this.expiredItems, itemName); // Don't mark it expired\r\n        Logger.warn(`data_collector: harvest: Circular dependency detected for (${itemName})`);\r\n        return;\r\n      }\r\n\r\n      if (this.farmers[itemDefinition.source] === null)\r\n      {\r\n        Logger.warn(`data_collector: harvest: Unknown harvesting function (${itemDefinition.source})`);\r\n        this.rawDataStore[itemName] = null;\r\n        return;\r\n      }\r\n\r\n      // Add item to harvestQueue (Which contains list of items being collected)\r\n      this.harvestQueue.push(itemName);\r\n\r\n      const harvestValue = this.farmers[itemDefinition.source](itemDefinition.params);\r\n      this.rawDataStore[itemName] = harvestValue;\r\n\r\n      removeItemFromArray(this.expiredItems, itemName); // Item is no longer expired\r\n      removeItemFromArray(this.harvestQueue, itemName); // Item is no longer being harvested\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(`data_collector: harvest: ${e.message}`);\r\n    }\r\n  }\r\n\r\n  /* Apply operation on a value based on it's definition\r\n  *   Will call the operations singleton to apply the operation\r\n  *\r\n  * PARAMS:\r\n  *   itemName: target data_item name\r\n  *   operationConfig: item operationConfig definition retrieved from data_items.json - Can be null\r\n  */\r\n  processOperation(itemName, operationConfig)\r\n  {\r\n    const harvestValue = this.rawDataStore[itemName];\r\n\r\n    const postOperationValue = OperationsManager.apply(harvestValue, operationConfig);\r\n    removeItemFromArray(this.operationExpiredItems, itemName);\r\n\r\n    return postOperationValue;\r\n  }\r\n\r\n  /* Apply the refresh function for the target datapoint\r\n  *   (Harvest again if value doesn't exist yet. Reload after time out. Apply operation every time)\r\n  *\r\n  * PARAMS:\r\n  *   itemName: target data_item name\r\n  *   refreshConfig: item refreshConfig definition retrieved from data_items.json - Can be null\r\n  */\r\n  setRefreshers(itemName, refreshConfig)\r\n  {\r\n    if (!refreshConfig)\r\n    {\r\n      // Item doesn't have any refresh config. Normal..\r\n      return;\r\n    }\r\n\r\n    for (const action of refreshConfig)\r\n    {\r\n      try\r\n      {\r\n        // Apply refresh action\r\n        this.refreshers[action](itemName, refreshConfig[action]);\r\n      }\r\n      catch (e)\r\n      {\r\n        Logger.error(`data_collector: setRefreshers: ${e.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  retrieveFromDataStore(params)\r\n  {\r\n    try\r\n    {\r\n      Logger.debug(`data_collector: Requesting item from data_collector: ${JSON.stringify(params)}`);\r\n\r\n      if (typeof params === 'string')\r\n      {\r\n        return this.get(params);\r\n      }\r\n\r\n      const result = [];\r\n      const dataIems = this.get(params);\r\n      if (!dataIems)\r\n      {\r\n        return [];\r\n      }\r\n\r\n      for (const idx of params)\r\n      {\r\n        const itemName = params[idx];\r\n        result.push(dataIems[itemName]);\r\n      }\r\n\r\n      return result;\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(`data_collector: retrieveFromDataStore: ${e.message}`);\r\n    }\r\n  }\r\n\r\n  createRefreshers(data_collector_engine)\r\n  {\r\n    const refreshers = {\r\n      harvestIfEq(itemName, value)\r\n      {\r\n        if (data_collector_engine.cache[itemName] === value)\r\n        {\r\n          data_collector_engine.markDataExpired(itemName);\r\n        }\r\n      },\r\n      harvestTimeout(itemName, value)\r\n      {\r\n        setTimeout(() =>\r\n        {\r\n          data_collector_engine.markDataExpired(itemName);\r\n        }, value);\r\n      },\r\n      operationTimeout(itemName, value)\r\n      {\r\n        setTimeout(() =>\r\n        {\r\n          data_collector_engine.markDataOperationExpired(itemName);\r\n        }, value);\r\n      },\r\n      harvestIfEqWithTimeout(itemName, value)\r\n      { // New refresher harvestIfEq with timeout\r\n        const { timeout, value: inputVal } = value;\r\n        setTimeout(() => { data_collector_engine.markDataExpiredIfEq(itemName, inputVal); }, timeout);\r\n      }\r\n    };\r\n    return refreshers;\r\n  }\r\n\r\n  createFarmers()\r\n  {\r\n    const farmers = {\r\n      UWPStorage(params)\r\n      {\r\n        return TelemetryGlobals.storage.get(params);\r\n      },\r\n    };\r\n    return farmers;\r\n  }\r\n}\r\n","/*\r\n *  Manages all attribute mappings, there are a couple level of mappings.\r\n *  Raw Event -> Event Mapping (uniqueid) -> Adjusted -> Global Mapping (legacy) -> Normalized -> Profile Mapping (transports) -> Transport Payload\r\n *\r\n *   - Event Mapping: maps uniqueid specific attributes for hot-fixes / fitting problems, etc. This should be used as last resort\r\n *   - Global Mapping: maps all events for handling legacy / short form / alias names\r\n *   - Profile Mapping: maps events specific for a profile. Each transport utilizes their own JSON names\r\n */\r\nimport Logger from './logger';\r\nimport { lowerCaseObjectKeyValuePair } from './utils';\r\n\r\nexport default class DictionaryMapper\r\n{\r\n  constructor({ event: eventMap, profile: profileMap, global: globalMap })\r\n  {\r\n    this.profileMapStringified = {};\r\n    this.flippedProfileMap = null;\r\n\r\n    // Lower case event and global dictionaries\r\n    // Only lower case the keys for the profile dictionary\r\n    lowerCaseObjectKeyValuePair(eventMap, true, true);\r\n    lowerCaseObjectKeyValuePair(globalMap, true, true);\r\n\r\n    this.eventMap = eventMap;\r\n    this.globalMap = globalMap;\r\n\r\n    // Profile has nested objects, their keys must be lowercased\r\n    Object.keys(profileMap).forEach((profile) =>\r\n    {\r\n      lowerCaseObjectKeyValuePair(profileMap[profile], true, false);\r\n    });\r\n\r\n    // Cache / pre-stringify all the profiles\r\n    Object.keys(profileMap).forEach((profile) =>\r\n    {\r\n      this.profileMapStringified[profile] = JSON.stringify(profileMap[profile]);\r\n    });\r\n\r\n    this.profileMap = profileMap;\r\n  }\r\n\r\n  getEventMap(obj, eventKey)\r\n  {\r\n    if (!this.eventMap.hasOwnProperty(eventKey))\r\n    {\r\n      return obj;\r\n    }\r\n\r\n    return this.map(this.eventMap[eventKey], obj, true);\r\n  }\r\n\r\n  getGlobalMap(obj)\r\n  {\r\n    return this.map(this.globalMap, obj, true);\r\n  }\r\n\r\n  getProfileMap(obj, profileKey)\r\n  {\r\n    if (!this.profileMap.hasOwnProperty(profileKey))\r\n    {\r\n      return obj;\r\n    }\r\n\r\n    return this.map(this.profileMap[profileKey], obj, true);\r\n  }\r\n\r\n  getProfileMapStringified(profileKey)\r\n  {\r\n    if (!this.profileMapStringified.hasOwnProperty(profileKey))\r\n    {\r\n      return '{}';\r\n    }\r\n\r\n    return this.profileMapStringified[profileKey];\r\n  }\r\n\r\n  getFlippedProfileMap(profileKey)\r\n  {\r\n    if (!this.profileMap.hasOwnProperty(profileKey))\r\n    {\r\n      Logger.error(`Requesting flipped table for invalid profile ${profile}`);\r\n      return {};\r\n    }\r\n\r\n    // If already created, just return it\r\n    if (this.flippedProfileMap.hasOwnProperty(profileKey))\r\n    {\r\n      return this.flippedProfileMap[profile];\r\n    }\r\n\r\n    // Table does not exist, create one\r\n    this.flippedProfileMap[profileKey] = {};\r\n\r\n    Object.keys(this.profileMap).forEach((key) =>\r\n    {\r\n      const newKey = this.profileMap[profileKey][key];\r\n      this.flippedProfileMap[profileKey][newKey] = key;\r\n    });\r\n\r\n    return this.flippedProfileMap[profileKey];\r\n  }\r\n\r\n  map(mappingTable, toMap, inPlace)\r\n  {\r\n    if (!mappingTable || !toMap || (typeof toMap !== 'object'))\r\n    {\r\n      Logger.error('Invalid mappingTable or toMap');\r\n      return toMap;\r\n    }\r\n\r\n    Logger.debug(`Executing mappings::_map ${inPlace ? 'in place' : 'in new buffer'}`);\r\n\r\n    const newMap = {};\r\n\r\n    for (const attribute in toMap)\r\n    {\r\n      const lowerAttribute = attribute.toLowerCase();\r\n      if (lowerAttribute in mappingTable)\r\n      {\r\n        const newAttribute = mappingTable[lowerAttribute];\r\n        if (inPlace)\r\n        {\r\n          toMap[newAttribute] = toMap[attribute];\r\n          if (newAttribute != attribute)\r\n          {\r\n            delete toMap[attribute];\r\n          }\r\n        }\r\n        else\r\n        {\r\n          newMap[newAttribute] = toMap[attribute];\r\n        }\r\n      }\r\n    }\r\n\r\n    return inPlace ? toMap : newMap;\r\n  }\r\n}\r\n","import Logger from './logger';\r\nimport { TelemetryGlobals } from './telemetry_globals';\r\n\r\nconst preconfigured_detections = {\r\n  device: [{\r\n    event_id: 'analytics_detect_device_msft_guid_changed',\r\n    key: 'Device.Microsoft.Machine.Guid',\r\n    from: '^((?!^null$).)*$',\r\n    to: '.*'\r\n  },]\r\n};\r\n\r\nexport default class DataSetManager\r\n{\r\n  constructor(datasetCatalog)\r\n  {\r\n    this.name = null;\r\n    this.cachedData = {};\r\n    this.datasets = {};\r\n    this.datasetsCatalog = datasetCatalog;\r\n    this.watchList = {};\r\n\r\n    this.logDebug('Setup Started');\r\n    try\r\n    {\r\n      this.createWatchList();\r\n    }\r\n    catch (e)\r\n    {\r\n      this.logError(`datasets_catalog: Setup failed: ${e.message}`);\r\n      return;\r\n    }\r\n    this.logDebug('Setup Complete');\r\n  }\r\n\r\n  /**\r\n   * Retrieves a specific Dataset object\r\n   */\r\n  get(name)\r\n  {\r\n    const dataset = this.create(name);\r\n\r\n    if (dataset.isDirty())\r\n    {\r\n      this.checkForChange(name, dataset);\r\n    }\r\n\r\n    return dataset;\r\n  }\r\n\r\n  createWatchList()\r\n  {\r\n    for (const dataset of Object.keys(preconfigured_detections))\r\n    {\r\n      if (!this.watchList[dataset])\r\n      {\r\n        this.watchList[dataset] = [];\r\n      }\r\n      for (const data of preconfigured_detections[dataset])\r\n      {\r\n        const { key } = data;\r\n        this.watchList[dataset].push(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  create(name)\r\n  {\r\n    if (this.datasets[name]) return this.datasets[name];\r\n\r\n    const target = new Dataset(name);\r\n    target.initialize(this.datasetsCatalog[name]);\r\n\r\n    // Add to dataset store\r\n    this.datasets[name] = target;\r\n\r\n    return target;\r\n  }\r\n\r\n  // TODO: Change implementation / refactor\r\n  checkForChange(datasetName, dataset)\r\n  {\r\n    try\r\n    {\r\n      if ((datasetName == null) || (datasetName == undefined))\r\n      {\r\n        return;\r\n      }\r\n\r\n      const datasetWatchList = this.watchList[datasetName];\r\n\r\n      if ((datasetWatchList == null) || (datasetWatchList == undefined))\r\n      {\r\n        return;\r\n      }\r\n\r\n\r\n      const storedObjName = `analytics_dataset_${datasetName}_content`;\r\n      let oldDatasetContent = this.cachedData[storedObjName];\r\n\r\n      const newDatasetContent = dataset.getContent();\r\n\r\n      if (oldDatasetContent == null)\r\n      {\r\n        // We still want to send an event if this is the first time we collect an attribute\r\n        oldDatasetContent = '{}';\r\n      }\r\n      this.logDebug(`Retrieved watch list information for dataset: ${datasetName}`);\r\n\r\n      oldDatasetContent = JSON.parse(oldDatasetContent);\r\n\r\n      // Only store the elements we marked for watching\r\n      const watchListNewValues = {};\r\n      const escapedRuleMismatchStr = escape('[ruleMismatch]');\r\n      const escapedUnknown = escape('[unknown]');\r\n      const escapedNotAssigned = escape('[not assigned]');\r\n      const escapedBracketNull = escape('[null]');\r\n\r\n      const changedValueEvents = []; // A list to hold change value events\r\n\r\n      for (const idx in datasetWatchList)\r\n      {\r\n        const key = datasetWatchList[idx];\r\n        if ((key == null) || (key == undefined)) continue; // A bug has occured from defining Array.prototype.indexOf which caused null keys\r\n\r\n        // If this is the first time we collect the value, oldValue will be null\r\n        let oldValue = oldDatasetContent[key];\r\n        const newValue = escape(newDatasetContent[key]);\r\n\r\n        // Don't store new value if it was a ruleMismatch OR unknown, keep the old value\r\n        watchListNewValues[key] = ((escapedRuleMismatchStr == newValue) || (escapedUnknown == newValue)) ? oldValue : newValue;\r\n\r\n        if (oldValue == newValue) continue;\r\n\r\n        if (escapedRuleMismatchStr == newValue) continue;\r\n        if (escapedRuleMismatchStr == oldValue) continue;\r\n\r\n        if (escapedUnknown == newValue) continue;\r\n\r\n        if ((escapedUnknown == oldValue)\r\n          || (escapedNotAssigned == oldValue)\r\n          || (oldValue == null)\r\n          || (undefined == oldValue)\r\n          || (oldValue == 'null')\r\n          || (oldValue == 'undefined')\r\n          || (escapedBracketNull == oldValue))\r\n        {\r\n          oldValue = null;\r\n        }\r\n\r\n        //Send event\r\n        const eventInfo = {\r\n          datasetName,\r\n          key,\r\n          oldValue,\r\n          newValue\r\n        };\r\n\r\n        changedValueEvents.push(eventInfo);\r\n      }\r\n\r\n      // In case the dataset got dirty again. Let's store the dataset before sending context changed event\r\n      const cachedData = JSON.stringify(watchListNewValues);\r\n      this.cachedData[storedObjName] = cachedData;\r\n      for (const idx in changedValueEvents)\r\n      {\r\n        // this.sendContextChangedEvent(changedValueEvents[idx]);\r\n      }\r\n    }\r\n    catch (e)\r\n    {\r\n      this.logError(`Exception while calling _checkForChange: ${e.message}`);\r\n    }\r\n  }\r\n\r\n  sendContextChangedEvent(eventInfo)\r\n  {\r\n    //Code changes are needed to refactor and delete `_sendContextChangedEvent`\r\n    this.sendAnalyticsDetectEvent(eventInfo);\r\n\r\n    if (eventInfo.oldValue === null) return;\r\n\r\n    const record = {\r\n      UniqueIdentifier: 'analytics_dataset_value_changed',\r\n      type: 'event',\r\n      payload: {\r\n        'Tracker.Type': 'event',\r\n        'Event.Category': 'Analytics.Content',\r\n        'Sub.Category': eventInfo.datasetName,\r\n        'Event.Action': 'Value.Changed',\r\n        'Event.Label': eventInfo.key,\r\n        'Hit.Label.1': eventInfo.oldValue,\r\n        'Hit.Label.2': eventInfo.newValue\r\n      }\r\n    };\r\n\r\n    this.logDebug(`Detected change for key: ${eventInfo.key}. In dataset: ${eventInfo.datasetName}. Going to send an event`);\r\n    TelemetryGlobals.eventHandler.handleEvent(record);\r\n  }\r\n\r\n  sendAnalyticsDetectEvent(eventInfo)\r\n  {\r\n    const detections = preconfigured_detections[eventInfo.datasetName];\r\n    if (!detections) return false;\r\n\r\n    for (const idx in detections)\r\n    {\r\n      try\r\n      {\r\n        const item = detections[idx];\r\n\r\n        if (item.key != eventInfo.key) continue;\r\n        if (item.event_id == null || item.event_id == '') continue; //This is an error case\r\n\r\n        const from_exp = (item.from != null) ? new RegExp(item.from) : null;\r\n        const to_exp = (item.to != null) ? new RegExp(item.to) : null;\r\n\r\n        if (from_exp != null && !from_exp.test(eventInfo.oldValue)) continue;\r\n        if (from_exp == null && eventInfo.oldValue != null) continue;\r\n        if (to_exp != null && !to_exp.test(eventInfo.newValue)) continue;\r\n        if (to_exp == null && eventInfo.newValue != null) continue;\r\n\r\n        const record = {\r\n          UniqueIdentifier: item.event_id,\r\n          type: 'event',\r\n          payload: {\r\n            'Tracker.Type': 'event',\r\n            'Event.Category': 'Analytics.Content',\r\n            'Sub.Category': eventInfo.datasetName,\r\n            'Event.Action': 'Value.Changed',\r\n            'Event.Label': eventInfo.key,\r\n            'Hit.Label.1': eventInfo.oldValue,\r\n            'Hit.Label.2': eventInfo.newValue\r\n          }\r\n        };\r\n\r\n        this.logDebug(`Detected dataset item change flow: ${eventInfo.key}. Going to send an event`);\r\n        TelemetryGlobals.eventHandler.handleEvent(record);\r\n        return true;\r\n      }\r\n      catch (e)\r\n      {\r\n        this.logError(`_sendAnalyticsDetectEvent: ${e.message}`);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  logInfo(msg)\r\n  {\r\n    Logger.log(`_datasetsManager: ${msg}`);\r\n  }\r\n\r\n  logDebug(msg)\r\n  {\r\n    Logger.debug(`_datasetsManager: ${msg}`);\r\n  }\r\n\r\n  logError(msg)\r\n  {\r\n    Logger.error(`_datasetsManager: ${msg}`);\r\n  }\r\n\r\n  logWarn(msg)\r\n  {\r\n    Logger.warn(`_datasetsManager: ${msg}`);\r\n  }\r\n}\r\n\r\nclass Dataset\r\n{\r\n  constructor(name)\r\n  {\r\n    this.dirty = true; // Denotes the datapoints in the dataset is dirty and needs to be refreshed\r\n    this.name = name;\r\n    this.itemsList = []; // Item's names that belong to the datasets\r\n  }\r\n\r\n  /**\r\n   * Initializes the dataset with corresponding config\r\n   * @param {Object} config - {'data_items': array of items that belongs in the dataset, 'refresh': refres configuration}\r\n   */\r\n  initialize(config)\r\n  {\r\n    try\r\n    {\r\n      if (!config)\r\n      {\r\n        this.logWarn('No configuration defined');\r\n        return false;\r\n      }\r\n\r\n      const { data_items } = config;\r\n      if (!data_items)\r\n      {\r\n        this.logError(`Invalid Data items. Config (${JSON.stringify(config)})`);\r\n        return false;\r\n      }\r\n      this.itemsList = data_items;\r\n\r\n      const refreshConfig = config.refresh;\r\n      this.setRefresh(refreshConfig);\r\n\r\n      this.logDebug('Initialization complete');\r\n      return true;\r\n    }\r\n    catch (e)\r\n    {\r\n      this.logError(`initialize: ${e.message}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves a datapoint from the dataset\r\n   * @param {String} key - Target value key\r\n   */\r\n  get(key)\r\n  {\r\n    try\r\n    {\r\n      const content = this.getContent()[key];\r\n      return content;\r\n    }\r\n    catch (e)\r\n    {\r\n      this.logError(`get: ${e.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves key value pairs for all items that belong to the datasets. Uses the datastore to collect the itemsList.\r\n   * If the dataset is dirty, the dataset will ask the datastore to mark the datapoints as expired.\r\n   */\r\n  getContent()\r\n  {\r\n    try\r\n    {\r\n      this.logDebug('getContent starting');\r\n      this.logDebug(`itemsList${JSON.stringify(this.itemsList)}`);\r\n\r\n      if (this.dirty)\r\n      {\r\n        TelemetryGlobals.dataCollector.markDataExpired(this.itemsList);\r\n        this.dirty = false;\r\n      }\r\n\r\n      const content = TelemetryGlobals.dataCollector.get(this.itemsList);\r\n      return content;\r\n    }\r\n    catch (e)\r\n    {\r\n      this.logError(`getContent: ${e.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if dataset is dirty.\r\n   */\r\n  isDirty()\r\n  {\r\n    if (this.dirty) return true;\r\n\r\n    return TelemetryGlobals.dataCollector.isExpired(this.itemsList);\r\n  }\r\n\r\n  /**\r\n   * Sets when to set the dirty flag. Allows subscribing to messages on the msg bus. Allows creating timeouts to refresh on.\r\n   * @param {Object} refreshConfig - {timeoutInterval: timeout to reset the dataset, onMessageBusMsg: array of msgs that will trigger marking the dataset to dirty}\r\n   */\r\n  setRefresh(refreshConfig)\r\n  {\r\n    if (!refreshConfig)\r\n    {\r\n      return;\r\n    }\r\n\r\n    this.createDatasetRefreshTimer(refreshConfig, this);\r\n  }\r\n\r\n  /**\r\n   * Refresh the dataset\r\n   * @param {Object} refreshConfig - { useEngineDefaultTimeout: if true, the timeoutInterval is ignored, timeoutInterval: time out to refresh dataset }\r\n   * @param {String} dataset - Dataset name\r\n   */\r\n  createDatasetRefreshTimer(refreshConfig, dataset)\r\n  {\r\n    const { useEngineDefaultTimeout } = refreshConfig;\r\n    let { timeoutInterval } = refreshConfig;\r\n\r\n    if (useEngineDefaultTimeout)\r\n    {\r\n      timeoutInterval = 60 * 60 * 1000; // 1 hour\r\n    }\r\n\r\n    if (!timeoutInterval)\r\n    {\r\n      return;\r\n    }\r\n\r\n    setInterval(function ()\r\n    {\r\n      try\r\n      {\r\n        this.dirty = true;\r\n        this.logDebug('Marking dirty flag to true');\r\n      }\r\n      catch (e)\r\n      {\r\n        this.logError(`createDatasetRefreshTimer: ${e.message}`);\r\n      }\r\n    }, timeoutInterval);\r\n  }\r\n\r\n  logError(message) { Logger.error(`dataset(${this.name}):  ${message}`); }\r\n  logDebug(message) { Logger.debug(`dataset(${this.name}): ${message}`); }\r\n  logInfo(message) { Logger.log(`dataset(${this.name}): ${message}`); }\r\n  logWarn(message) { Logger.warn(`dataset(${this.name}): ${message}`); }\r\n}\r\n","import { Logger } from '@extension/common/logger';\r\n\r\nexport default class EventManager\r\n{\r\n  constructor(events)\r\n  {\r\n    this.events = events.data;\r\n  }\r\n\r\n  getProfileNames(id)\r\n  {\r\n    if (!this.events[id])\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return this.events[id].profileNames || null;\r\n  }\r\n\r\n  getAttributeRules(id)\r\n  {\r\n    return this.events[id].attributeRules || null;\r\n  }\r\n\r\n  getPriority(id)\r\n  {\r\n    return this.events[id].priority.toLowerCase() || 'normal';\r\n  }\r\n\r\n  getDataSetNames(id)\r\n  {\r\n    return this.events[id].datasets || [];\r\n  }\r\n\r\n  // Used for automation\r\n  setEvent(id, config)\r\n  {\r\n    this.events[id] = config;\r\n  }\r\n\r\n  getThrottleRule(id)\r\n  {\r\n    if (!('throttleRule' in this.events[id]))\r\n    {\r\n      Logger.warn(`getThrottleRule: failed, cannot find throttle rule attached to ${id}`);\r\n      return null;\r\n    }\r\n\r\n    return this.events[id].throttleRule;\r\n  }\r\n}\r\n","import Logger from '../logger';\r\n\r\nexport default class TransportBase\r\n{\r\n  constructor()\r\n  {\r\n    this.name = null;\r\n    this.dictionary = null;\r\n    this.transportConfig = null;\r\n  }\r\n\r\n  /**\r\n   * Initializing the transport mapped and store variables\r\n   * @param {String} name\r\n   * @param {String} dictionary - JSON stringified dictionary field from profile\r\n   * @param {String} config - JSON strigified transportConfig from profile\r\n   */\r\n  initialize(name, dictionary, transportConfig)\r\n  {\r\n    this.dictionary = JSON.parse(dictionary); // Can be an empty object\r\n    this.transportConfig = JSON.parse(transportConfig);\r\n    this.name = name;\r\n\r\n    if (!this.transportConfig || !this.name)\r\n    {\r\n      Logger.error(`TransportPlugin_Template: Failed to initialize..\\nConfig: ${transportConfig}\\nName: ${this.name}`);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","import Logger from './logger';\r\nimport TransportEventHub from './Transport/transport_event_hub';\r\nimport TransportAwsApiGateway from './Transport/transport_aws_api_gateway';\r\nimport { TelemetryGlobals } from './telemetry_globals';\r\n\r\nconst transportMapper = {\r\n  eh: TransportEventHub,\r\n  aws_api_gateway: TransportAwsApiGateway,\r\n};\r\n\r\nexport default class Emitter\r\n{\r\n  constructor(profile, name)\r\n  {\r\n    this.name = name;\r\n    this.datasets = profile.datasets;\r\n    this.dictionary = profile.dictionary;\r\n    this.enableRules = profile.enableRules;\r\n    this.maxDimensionLength = profile.maxDimensionLength;\r\n    this.throttleMultiplier = profile.throttleMultiplier;\r\n    this.throttleRule = profile.throttleRule;\r\n    this.transportConfiguration = profile.transport_config;\r\n    this.transportType = profile.transport;\r\n  }\r\n\r\n  send(outbound)\r\n  {\r\n    if (!this.isEnabled())\r\n    {\r\n      Logger.debug(`isEnabled() returned false. Will not send data to ${this.transportType}`);\r\n      return false;\r\n    }\r\n\r\n    if (!transportMapper[this.transportType])\r\n    {\r\n      Logger.error('Matching transport object not found for the transport type');\r\n      return false;\r\n    }\r\n\r\n    outbound = this.sanitize(outbound);\r\n\r\n    const dictionary = TelemetryGlobals.dictionaryMapper.getProfileMapStringified(this.dictionary);\r\n    const transport = new transportMapper[this.transportType]();\r\n    transport.initialize(this.name, dictionary, JSON.stringify(this.transportConfiguration));\r\n    if (!transport.setup())\r\n    {\r\n      Logger.error('Unable to setup transport');\r\n      return false;\r\n    }\r\n\r\n    Logger.debug(`Emit outbound data: ${JSON.stringify(outbound)}`);\r\n\r\n    return transport.send(outbound);\r\n  }\r\n\r\n  isEnabled()\r\n  {\r\n    try\r\n    {\r\n      if (this.enableRules === undefined) return true;\r\n\r\n      if (this.enableRules.sourceType === 'data_collector')\r\n      {\r\n        const value = TelemetryGlobals.dataCollector.get(this.enableRules.name);\r\n        return TelemetryGlobals.rulesManager.evaluate(value, this.enableRules.rule);\r\n      }\r\n\r\n      Logger.error(`isEnabled: unexpected enableRules.sourceType. sourceType ${this.enableRules.sourceType}`);\r\n      return false;\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(`isEnabled: ${e.message}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  sanitize(data)\r\n  {\r\n\r\n    for (const entry of Object.keys(data))\r\n    {\r\n      \r\n      data[entry] = String(data[entry]);\r\n\r\n      // Truncate characters to limit\r\n      if ((this.maxDimensionLength != null) && !isNaN(this.maxDimensionLength))\r\n      {\r\n        // If exceeds max, truncate and add \"...\" at the end\r\n        if (data[entry].length > this.maxDimensionLength)\r\n        {\r\n          data[entry] = `${data[entry].substring(0, this.maxDimensionLength - 3)}...`;\r\n        }\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n","import Logger from '../logger';\r\nimport TransportBase from './transport_base';\r\nimport { TelemetryGlobals } from '../telemetry_globals';\r\n\r\nexport default class TransportEventHub extends TransportBase\r\n{\r\n  constructor()\r\n  {\r\n    super();\r\n    this.apiVersion = null;\r\n    this.servicebusNamespace = null;\r\n    this.eventHubPath = null;\r\n    this.sharedAccessKey = null;\r\n    this.sharedAccessName = null;\r\n    this.sharedAccessToken = null;\r\n    this.tokenCreationTime = null;\r\n    this.timeout = 60;\r\n    this.url = TelemetryGlobals.url !== null ? TelemetryGlobals.url : 'https://{servicebusNamespace}.servicebus.windows.net/{eventHubPath}/messages?timeout={timeout}&api-version={apiVersion}';\r\n  }\r\n\r\n  appendDottedKeys(eventData)\r\n  {\r\n    const data = { ...eventData };\r\n    const attributesToConvert = [\r\n      'csp_clientid',\r\n      'event_category',\r\n      'event_action',\r\n      'event_label',\r\n      'engagement_interactive',\r\n      'engagement_userinitiated',\r\n      'hit_type',\r\n      'hit_uniqueid',\r\n      'hit_severity',\r\n      'hit_label_1',\r\n      'hit_label_2',\r\n      'device_antimalware_provider_enabled',\r\n      'device_os_type',\r\n      'wss_istrial'\r\n    ];\r\n\r\n    // Replacing underscores with dots\r\n    for (const attr of attributesToConvert)\r\n    {\r\n      if (data.hasOwnProperty(attr))\r\n      {\r\n        data[attr.replace(/_/g, '\\.')] = data[attr];\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async createSharedAccessToken(uri, saName, saKey)\r\n  {\r\n    if (!uri || !saName || !saKey)\r\n    {\r\n      throw 'Missing required parameter';\r\n    }\r\n\r\n    const encoded = encodeURIComponent(uri);\r\n    const now = new Date();\r\n    const week = 60 * 60 * 24 * 7;\r\n    const ttl = Math.round(now.getTime() / 1000) + week;\r\n    const signature = `${encoded}\\n${ttl}`;\r\n    const textEncoder = new TextEncoder('utf-8');\r\n\r\n    const key = await crypto.subtle.importKey(\r\n      'raw', // raw format of the key - type Uint8Array\r\n      textEncoder.encode(this.sharedAccessKey),\r\n      { // algorithm details\r\n        name: 'HMAC',\r\n        hash: { name: 'SHA-256' }\r\n      },\r\n      false, // export = false\r\n      ['sign', 'verify'] // what the key can do\r\n    );\r\n\r\n    const arrayBuffer = await crypto.subtle.sign('HMAC', key, textEncoder.encode(signature));\r\n    const hash = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));\r\n\r\n    return `SharedAccessSignature sr=${encoded}&sig=${encodeURIComponent(hash)}&se=${ttl}&skn=${saName}`;\r\n  }\r\n\r\n  /**\r\n   * Send the event data to the analytics server\r\n   * https://docs.microsoft.com/en-us/rest/api/eventhub/send-event\r\n   * @param {String} eventData - Outbound object\r\n   */\r\n  async send(eventDataStr)\r\n  {\r\n    const cleanEventData = this.sanitizeEventData(eventDataStr);\r\n    const eventData = TelemetryGlobals.dictionaryMapper.map(this.dictionary, cleanEventData, false);\r\n    const mappedEventData = this.appendDottedKeys(eventData);\r\n\r\n    Logger.debug(`Event_Hub_Transport::Send: Sending using uri: ${this.url}`);\r\n\r\n    const sendStatusCode = await this.sendHttpRequest(mappedEventData);\r\n\r\n    if (sendStatusCode !== 201)\r\n    {\r\n      Logger.error(`Event_Hub_Transport.Send: Failed to send. Send status code: ${sendStatusCode}`);\r\n    }\r\n    else\r\n    {\r\n      Logger.debug(`Event_Hub_Transport.Send: sendStatusCode ${sendStatusCode}`);\r\n    }\r\n\r\n    const uniqueId = cleanEventData['hit.uniqueid'];\r\n    Logger.debug(`${uniqueId} sent to ${this.name}: ${JSON.stringify(mappedEventData)}`);\r\n\r\n    return sendStatusCode;\r\n  }\r\n\r\n  async sendHttpRequest(eventData)\r\n  {\r\n    try\r\n    {\r\n      const token = await this.createSharedAccessToken(this.url, this.sharedAccessName, this.sharedAccessKey);\r\n      const response = await fetch(this.url, {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: token,\r\n          'Content-Type': 'application/atom+xml;type=entry;charset=utf-8',\r\n          Host: `${this.servicebusNamespace}.servicebus.windows.net`,\r\n          BrokerProperties: JSON.stringify({ PartitionKey: TelemetryGlobals.engine.getContextId() })\r\n        },\r\n        body: JSON.stringify(eventData)\r\n      });\r\n\r\n      return response.status;\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(e.message);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Lowercase the object keys\r\n   * @param {Object} eventData - Outbound object\r\n   */\r\n  sanitizeEventData(eventData)\r\n  {\r\n    const sanitizedEvent = {};\r\n\r\n    Object.keys(eventData).forEach((key) =>\r\n    {\r\n      sanitizedEvent[key.toLowerCase()] = eventData[key];\r\n    });\r\n\r\n    return sanitizedEvent;\r\n  }\r\n\r\n  setup()\r\n  {\r\n    this.apiVersion = this.transportConfig.apiVersion;\r\n    if (!this.apiVersion)\r\n    {\r\n      Logger.error('Event_Hub_Transport:: Initialize Invalid (unspecified) _apiVersion');\r\n      return false;\r\n    }\r\n\r\n    this.servicebusNamespace = this.transportConfig.servicebusNamespace;\r\n    if (!this.servicebusNamespace)\r\n    {\r\n      Logger.error('Event_Hub_Transport:: Initialize Invalid (unspecified) _servicebusNamespace');\r\n      return false;\r\n    }\r\n\r\n    this.eventHubPath = this.transportConfig.eventHubPath;\r\n    if (!this.eventHubPath)\r\n    {\r\n      Logger.error('Event_Hub_Transport:: Initialize Invalid (unspecified) _eventHubPath');\r\n      return false;\r\n    }\r\n\r\n    this.sharedAccessKey = this.transportConfig.sharedAccessKey;\r\n    if (!this.sharedAccessKey)\r\n    {\r\n      Logger.error('Event_Hub_Transport:: Initialize Invalid (unspecified) sharedAccessKey');\r\n      return false;\r\n    }\r\n\r\n    this.sharedAccessName = this.transportConfig.sharedAccessName;\r\n    if (!this.sharedAccessName)\r\n    {\r\n      Logger.error('Event_Hub_Transport:: Initialize Invalid (unspecified) sharedAccessName');\r\n      return false;\r\n    }\r\n\r\n    this.tokenRefreshTime = this.transportConfig.tokenRefreshTime;\r\n    if (!this.tokenRefreshTime)\r\n    {\r\n      this.tokenRefreshTime = 1;// hour\r\n    }\r\n\r\n    this.updateURL('{servicebusNamespace}', this.servicebusNamespace);\r\n    this.updateURL('{eventHubPath}', this.eventHubPath);\r\n    this.updateURL('{timeout}', this.timeout);\r\n    this.updateURL('{apiVersion}', this.apiVersion);\r\n\r\n    return true;\r\n  }\r\n\r\n  updateURL(replacementKey, replacementValue)\r\n  {\r\n    this.url = this.url.replace(replacementKey, replacementValue);\r\n  }\r\n}\r\n","import Logger from '../logger';\r\nimport TransportBase from './transport_base';\r\nimport { TelemetryGlobals } from '../telemetry_globals';\r\n\r\nexport default class TransportAwsApiGateway extends TransportBase\r\n{\r\n  constructor()\r\n  {\r\n    super();\r\n    this.apikey = null;\r\n    this.url = 'https://{dns}.awscommon.mcafee.com/1.0/{gateway}/v1/record';\r\n  }\r\n\r\n  appendDottedKeys(eventData)\r\n  {\r\n    const data = { ...eventData };\r\n    const attributesToConvert = [\r\n      'csp_clientid',\r\n      'event_category',\r\n      'event_action',\r\n      'event_label',\r\n      'engagement_interactive',\r\n      'engagement_userinitiated',\r\n      'hit_type',\r\n      'hit_uniqueid',\r\n      'hit_severity',\r\n      'hit_label_1',\r\n      'hit_label_2',\r\n      'device_antimalware_provider_enabled',\r\n      'device_os_type',\r\n      'wss_istrial'\r\n    ];\r\n\r\n    // Replacing underscores with dots\r\n    for (const attr of attributesToConvert)\r\n    {\r\n      if (data.hasOwnProperty(attr))\r\n      {\r\n        data[attr.replace(/_/g, '\\.')] = data[attr];\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n     * Send the event data to the analytics server\r\n     * https://docs.microsoft.com/en-us/rest/api/eventhub/send-event\r\n     * @param {String} eventData - Outbound object\r\n     */\r\n  async send(eventDataStr)\r\n  {\r\n    const cleanEventData = this.sanitizeEventData(eventDataStr);\r\n    const eventData = TelemetryGlobals.dictionaryMapper.map(this.dictionary, cleanEventData, false);\r\n    const mappedEventData = this.appendDottedKeys(eventData);\r\n\r\n    // Device_id (aka extension_id) is the best user identifier we have in standalone extension\r\n    let partitionKey = TelemetryGlobals.dataCollector.get('device_id');\r\n\r\n    // In the rare case where device_id is not available, we hardcode the partition key\r\n    if (partitionKey === undefined || partitionKey === null || partitionKey.length > 256)\r\n    {\r\n      partitionKey = 'pfs1N2j8xXcLjpmuwG6lQk7y4nzxQ794jGMRokaMPDr6vz2OdhHMetZPjjNE2dmOrJ4MXylrGnytEMpaueFGIkcZZqrUUCVVtOmckTojrth8txAtrNcnRkcPPeyFqstY83xdyBQCg1cmYbhHwQv9m0';\r\n    }\r\n\r\n    const awsPayload = { Data: mappedEventData, PartitionKey: partitionKey };\r\n\r\n    Logger.debug(`TransportAwsApiGateway::Send: Sending using uri: ${this.url}`);\r\n\r\n    const sendStatusCode = await this.sendHttpRequest(awsPayload);\r\n\r\n    if (sendStatusCode !== 200)\r\n    {\r\n      Logger.error(`TransportAwsApiGateway::Send: Failed to send. Send status code: ${sendStatusCode}`);\r\n    }\r\n    else\r\n    {\r\n      Logger.debug(`TransportAwsApiGateway sendStatusCode: ${sendStatusCode}`);\r\n    }\r\n\r\n    const uniqueId = cleanEventData['hit.uniqueid'];\r\n    Logger.debug(`${uniqueId} sent to ${this.name}: ${JSON.stringify(awsPayload)}`);\r\n\r\n    return sendStatusCode;\r\n  }\r\n\r\n  async sendHttpRequest(eventData)\r\n  {\r\n    try\r\n    {\r\n      // This line is being added so that we can test extension based telemetry in automation\r\n      const url = (TelemetryGlobals.url && TelemetryGlobals.url.includes('localhost')) ? TelemetryGlobals.url : this.url;\r\n      const response = await fetch(url, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'x-api-key': this.apikey\r\n        },\r\n        body: JSON.stringify(eventData)\r\n      });\r\n\r\n      return response.status;\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(e.message);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Lowercase the object keys\r\n     * @param {Object} eventData - Outbound object\r\n     */\r\n  sanitizeEventData(eventData)\r\n  {\r\n    const sanitizedEvent = {};\r\n\r\n    Object.keys(eventData).forEach((key) =>\r\n    {\r\n      sanitizedEvent[key.toLowerCase()] = eventData[key];\r\n    });\r\n\r\n    return sanitizedEvent;\r\n  }\r\n\r\n  setup()\r\n  {\r\n    this.apikey = this.transportConfig.apiKey;\r\n    if (!this.apikey)\r\n    {\r\n      Logger.error('TransportAwsApiGateway::Setup() Invalid (unspecified) apiKey');\r\n      return false;\r\n    }\r\n\r\n    this.dns = this.transportConfig.dns;\r\n    if (!this.dns)\r\n    {\r\n      Logger.error('TransportAwsApiGateway::Setup() Invalid (unspecified) dns');\r\n      return false;\r\n    }\r\n\r\n    this.gateway = this.transportConfig.gateway;\r\n    if (!this.gateway)\r\n    {\r\n      Logger.error('TransportAwsApiGateway::Setup() Invalid (unspecified) gateway');\r\n      return false;\r\n    }\r\n\r\n    this.updateURL('{dns}', this.dns);\r\n    this.updateURL('{gateway}', this.gateway);\r\n\r\n    return true;\r\n  }\r\n\r\n  updateURL(replacementKey, replacementValue)\r\n  {\r\n    this.url = this.url.replace(replacementKey, replacementValue);\r\n  }\r\n}\r\n","export const priorityConfig = {\r\n  maxThreshold: 100,\r\n  minThreshold: 0,\r\n  thresholds: {\r\n    eventThrottle: 10, // event-level throttling\r\n    profileThrottle: 10 // profile-level throttling\r\n  }\r\n};\r\n","import Emitter from './emitter';\r\nimport Logger from './logger';\r\nimport { arrayRemoveDuplicates, mergeObjects } from './utils';\r\nimport { priorityConfig } from './priority_config';\r\nimport { TelemetryGlobals } from './telemetry_globals';\r\n\r\nexport default class BaseTransmitter\r\n{\r\n  constructor()\r\n  {\r\n    this.emitters = {};\r\n  }\r\n\r\n  isEventThrottled(eventName)\r\n  {\r\n    const { eventThrottle } = priorityConfig.thresholds;\r\n    const eventPriority = TelemetryGlobals.eventManager.getPriority(eventName);\r\n\r\n    if (eventPriority < eventThrottle)\r\n    {\r\n      const throttleRule = TelemetryGlobals.eventManager.getThrottleRule(eventName);\r\n      return this.applyThrottle(eventName, throttleRule);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  isProfileThrottled(eventName, profileName)\r\n  {\r\n    const { profileThrottle } = priorityConfig.thresholds;\r\n    const eventPriority = TelemetryGlobals.eventManager.getPriority(eventName);\r\n\r\n    if (eventPriority < profileThrottle)\r\n    {\r\n      const { throttleRule } = this.getProfile(profileName);\r\n      return this.applyThrottle(profileName, throttleRule);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  applyThrottle(name, rule)\r\n  {\r\n    try\r\n    {\r\n      if (!rule) return false;\r\n      return TelemetryGlobals.rulesManager.evaluate(name, rule);\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(`applyThrottle: ${e.message}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getEmitter(profileName)\r\n  {\r\n    return this.emitters[profileName] || this.addEmitter(profileName);\r\n  }\r\n\r\n  addEmitter(profileName)\r\n  {\r\n    const profile = this.getProfile(profileName);\r\n    if (!profile) return null;\r\n\r\n    Logger.debug(`Configure the emitter ${profileName}`);\r\n\r\n    this.emitters[profileName] = new Emitter(profile, profileName);\r\n    return this.emitters[profileName];\r\n  }\r\n\r\n  getProfile(profileName)\r\n  {\r\n    const transportProfile = TelemetryGlobals.profiles[profileName];\r\n\r\n    if (!transportProfile)\r\n    {\r\n      Logger.error(`No such profile: ${name}`);\r\n      return null;\r\n    }\r\n\r\n    return transportProfile;\r\n  }\r\n\r\n  getProfileDefaultAttribute(profileName)\r\n  {\r\n    const defaults = [];\r\n\r\n    if (profileName.indexOf('da') >= 0)\r\n    {\r\n      defaults.push('hit.trigger', 'hit.feature');\r\n    }\r\n\r\n    return defaults;\r\n  }\r\n\r\n  /**\r\n   * Add / merge dataset names to the outbound object\r\n   * @param {Object} outbound - Message going out to analytics server\r\n   * @param {Object} emitter - Corresponding profile to the event triggered\r\n   * @param {String[]} dataSetNames - Dataset belonging to the profile\r\n   */\r\n  addDataSetNames(outbound, emitter, dataSetNames)\r\n  {\r\n    let allDataSetNames = [];\r\n\r\n    if (emitter.datasets)\r\n    {\r\n      allDataSetNames = allDataSetNames.concat(emitter.datasets);\r\n    }\r\n\r\n    if (dataSetNames)\r\n    {\r\n      allDataSetNames = allDataSetNames.concat(dataSetNames);\r\n    }\r\n\r\n    // Remove duplicates (could happen if the event and profile configs specify the same one)\r\n    allDataSetNames = arrayRemoveDuplicates(allDataSetNames);\r\n    Logger.debug(`emitter profileName: ${emitter.profileName}, allDataSetNames: ${JSON.stringify(allDataSetNames)}`);\r\n    this.mergeDataSets(outbound, allDataSetNames);\r\n  }\r\n\r\n  mergeDataSets(outbound, dataSetNames)\r\n  {\r\n    if (!dataSetNames) return null;\r\n\r\n    Logger.debug(`merge datasets: ${JSON.stringify(dataSetNames)}`);\r\n\r\n    for (const datasetName of dataSetNames)\r\n    {\r\n      const dataset = TelemetryGlobals.datasetManager.get(datasetName);\r\n      if (!dataset)\r\n      {\r\n        Logger.warn(`Could not find dataset ${datasetName}; skipping`);\r\n        continue;\r\n      }\r\n\r\n      Logger.debug(`merge the ${datasetName} dataset`);\r\n      const datasetContent = dataset.getContent();\r\n      mergeObjects(outbound, datasetContent);\r\n    }\r\n  }\r\n}\r\n","import BaseTransmitter from './base_transmitter';\r\nimport Logger from './logger';\r\nimport { mergeObjects, lowerCaseObjectKeyValuePair, isoDateToDate } from './utils';\r\nimport { TelemetryGlobals } from './telemetry_globals';\r\n\r\nexport default class TransportError extends BaseTransmitter\r\n{\r\n  constructor()\r\n  {\r\n    this.profileName = 'profile_analytics_automation_mosaic_100p';\r\n    this.eventName = 'analytics_event_error_occurrred';\r\n    this.emitter = this.getEmitter(this.profileName);\r\n  }\r\n\r\n  generate(eventName, errorMessage)\r\n  {\r\n    const outbound = {\r\n      'hit.uniqueid': 'analytics_event_error_occurrred',\r\n      'event.category': 'Analytics.Event.Error',\r\n      'hit.trigger': eventName,\r\n      'event.action': 'Analytics.Event.Rule.Failed'\r\n    };\r\n\r\n    if (Object.keys(errorMessage.type.ruleMismatch).length)\r\n    {\r\n      outbound['hit.category.1'] = 'ruleMismatch';\r\n      outbound['event.label'] = JSON.stringify(errorMessage);\r\n    }\r\n    else if (Object.keys(errorMessage.type.ruleError).length)\r\n    {\r\n      outbound['hit.category.1'] = 'ruleError';\r\n      outbound['event.label'] = JSON.stringify(errorMessage);\r\n    }\r\n    else if (errorMessage.type.rejected)\r\n    {\r\n      outbound['hit.category.1'] = 'rejected';\r\n      outbound['event.label'] = JSON.stringify(errorMessage);\r\n    }\r\n\r\n    const timeNow = new Date();\r\n    outbound['__record.created'] = timeNow.toISOString();\r\n    outbound['Tracker.Type'] = 'event';\r\n\r\n    return outbound;\r\n  }\r\n\r\n  async transmit(eventName, payload, errorMessage)\r\n  {\r\n    Logger.debug(`CreateAnalyticsErrorlogTransport.transmit message=${JSON.stringify(errorMessage)}, profileNames=${JSON.stringify(this.profileName)}`);\r\n\r\n    // Event-level throttle\r\n    if (this.isEventThrottled(this.eventName))\r\n    {\r\n      Logger.debug(`Event ${this.eventName} was event-level throttled`);\r\n      return;\r\n    }\r\n\r\n    // Profile-level throttle\r\n    if (this.isProfileThrottled(this.eventName, this.profileName))\r\n    {\r\n      Logger.debug(`Event ${this.eventName} was profile-level throttled by ${this.profileName}`);\r\n      return;\r\n    }\r\n\r\n    if (!this.emitter)\r\n    {\r\n      Logger.error(`Failed to locate an emitter for ${this.profileName}; aborting send`);\r\n      return;\r\n    }\r\n\r\n    let outbound = this.generate(eventName, errorMessage);\r\n    lowerCaseObjectKeyValuePair(outbound, true, false); // Lowercase the keys\r\n\r\n    // Apply attribute rules\r\n    outbound = this.applyAttributeRules(outbound, this.eventName, this.profileName);\r\n\r\n    // Add event day index\r\n    outbound['__event.day.index'] = TelemetryGlobals.rulesManager.getDailyMaxTableCounter(this.profileName);\r\n\r\n    // Add throttle\r\n    outbound.__throttle_user_multiplier = this.emitter.throttleMultiplier || 1;\r\n\r\n    // Add default elements (UserID, contentVersion, etc)\r\n    mergeObjects(outbound, await TelemetryGlobals.engine.getDefaultDictionary(), true); // Lowercase keys\r\n\r\n    // Add dataset names\r\n    this.addDataSetNames(outbound, this.emitter, null);\r\n\r\n    // Add queue time\r\n    const now_time = new Date();\r\n    let timeStamp = unescape(outbound['__record.created']);\r\n    timeStamp = timeStamp.split(' ').join('T');\r\n\r\n    const create_time = isoDateToDate(timeStamp);\r\n\r\n    if (now_time && create_time)\r\n    {\r\n      outbound['__queue.time.milliseconds'] = `${now_time - create_time}`;\r\n    }\r\n\r\n    Logger.debug(`ready to send ${JSON.stringify(outbound)}`);\r\n    const result = await this.emitter.send(outbound);\r\n\r\n    // Log error message\r\n    Logger.logAutomationError(messageName, JSON.stringify(payload), JSON.stringify(errorMessage));\r\n    Logger.debug(`ProfileName: ${profileName}. Result: ${result}`);\r\n    Logger.debug('******************************* done');\r\n  }\r\n}\r\n","import Logger from './logger';\r\nimport BaseTransmitter from './base_transmitter';\r\nimport TransportError from './transport_error';\r\nimport { TelemetryGlobals } from './telemetry_globals';\r\nimport { mergeObjects, lowerCaseObjectKeyValuePair, isoDateToDate } from './utils';\r\n\r\nexport default class Transport extends BaseTransmitter\r\n{\r\n  /**\r\n   * Constructs the finalized message to be sent to the analytics server\r\n   * @param {String} eventName - Event name\r\n   * @param {Object} payload - Info to be sent to the analytics server\r\n   * @param {String[]} profileNames - Associated profile names to the event\r\n   * @param {String[]} eventDataSetNames - Associated dataset to the event (can be null or empty)\r\n   */\r\n  async transmit(eventName, payload, profileNames, eventDataSetNames)\r\n  {\r\n    Logger.debug(`analyticstransport.transmit message=${JSON.stringify(payload)}, profileNames=${JSON.stringify(profileNames)}, datasetNames=${JSON.stringify(eventDataSetNames)}`);\r\n\r\n    // Check for event-level throttling\r\n    if (this.isEventThrottled(eventName))\r\n    {\r\n      Logger.debug(`Event ${eventName} was event-level throttled`);\r\n      Logger.logAutomationError(eventName,\r\n        JSON.stringify(payload),\r\n        JSON.stringify({\r\n          level: 'info',\r\n          type: { eventThrottled: `${eventName} is event throttled` }\r\n        }));\r\n      return;\r\n    }\r\n\r\n    for (const profileName of profileNames)\r\n    {\r\n      // Check for profile-level throttling\r\n      // Do not throttle for critical events\r\n      const eventPriority = TelemetryGlobals.eventManager.getPriority(eventName);\r\n      const isPriorityCritical = eventPriority.toLowerCase() === 'critical';\r\n\r\n      if (this.isProfileThrottled(eventName, profileName) && !isPriorityCritical)\r\n      {\r\n        Logger.debug(`Event ${eventName} was profile-level throttled by ${profileName}`);\r\n        Logger.logAutomationError(eventName,\r\n          JSON.stringify(payload),\r\n          JSON.stringify({\r\n            level: 'info',\r\n            type: { profileThrottled: `${eventName} is profile throttled for ${profileName}` }\r\n          }));\r\n        continue;\r\n      }\r\n\r\n      const emitter = this.getEmitter(profileName);\r\n      if (!emitter)\r\n      {\r\n        Logger.error(`Failed to locate an emitter for ${profileName}; aborting send`);\r\n        continue;\r\n      }\r\n\r\n      let outbound = {};\r\n      const isForcingLowerKeys = emitter.transportConfiguration.forceLowerCaseKeys === false;\r\n      mergeObjects(outbound, payload, isForcingLowerKeys); // Shallow copy payload to outbound\r\n\r\n      // Apply first and second layers of mapping\r\n      outbound = TelemetryGlobals.dictionaryMapper.getEventMap(outbound, eventName);\r\n      outbound = TelemetryGlobals.dictionaryMapper.getGlobalMap(outbound);\r\n      lowerCaseObjectKeyValuePair(outbound, true, false); // Lowercase the keys\r\n\r\n      // Apply attribute rules\r\n      const rulesApplied = this.applyAttributeRules(outbound, eventName, profileName);\r\n      outbound = rulesApplied;\r\n\r\n      // Send rule failure events\r\n      if (rulesApplied.error)\r\n      {\r\n        const transportError = new TransportError();\r\n        transportError.transmit(eventName, payload, rulesApplied.error);\r\n      }\r\n\r\n      // Add event day index\r\n      const eventDayIndex = TelemetryGlobals.rulesManager.getDailyMaxTableCounter(profileName);\r\n      outbound['__event.day.index'] = eventDayIndex;\r\n\r\n      // Add throttle\r\n      outbound.__throttle_user_multiplier = emitter.throttleMultiplier || 1;\r\n\r\n      // Add default elements (UserID, contentVersion, etc)\r\n      mergeObjects(outbound, await TelemetryGlobals.engine.getDefaultDictionary(), true); // Lowercase keys\r\n\r\n      // C++ plugins (CSP, GA) log the event by looking for Hit.UniqueID\r\n      outbound['Hit.UniqueID'] = eventName;\r\n\r\n      // Add dataset names\r\n      this.addDataSetNames(outbound, emitter, eventDataSetNames);\r\n\r\n      // Add queue time\r\n      const now_time = new Date();\r\n      let timeStamp = unescape(outbound['__record.created']);\r\n      timeStamp = timeStamp.split(' ').join('T');\r\n\r\n      const create_time = isoDateToDate(timeStamp);\r\n\r\n      if (now_time && create_time)\r\n      {\r\n        outbound['__queue.time.milliseconds'] = `${now_time - create_time}`;\r\n      }\r\n\r\n      Logger.debug(`ready to send ${JSON.stringify(outbound)}`);\r\n\r\n      const result = await emitter.send(outbound); // HTTP request (send data off to analytics server)\r\n\r\n      Logger.debug(`ProfileName: ${profileName}. Result: ${result}`);\r\n      Logger.debug('******************************* done');\r\n\r\n      // TODO: Impelement queue for offline purposes, process when connetion is re-established\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply attribute rules\r\n   * @param {Object} message - Outbound payload\r\n   * @param {String} eventName - The event\r\n   * @param {String} profileName - The corresponding profile to the event\r\n   */\r\n  applyAttributeRules(message, eventName, profileName)\r\n  {\r\n    const attributeRules = TelemetryGlobals.eventManager.getAttributeRules(eventName);\r\n    if (!attributeRules)\r\n    {\r\n      return message;\r\n    }\r\n\r\n    // Deep copy the attribute rules and map them\r\n    let mappedRules = {};\r\n    mergeObjects(mappedRules, attributeRules);\r\n\r\n    // Normalizing the rules to post global mappings and then apply the rules after normalization.\r\n    // Message should be normalized prior to reaching here\r\n    mappedRules = TelemetryGlobals.dictionaryMapper.getEventMap(mappedRules, eventName);\r\n    mappedRules = TelemetryGlobals.dictionaryMapper.getGlobalMap(mappedRules);\r\n    lowerCaseObjectKeyValuePair(mappedRules, true, false); // Lowercase the keys only\r\n\r\n    let defaults = ['uniqueid', 'hit.uniqueid', 'event.category', 'event.action', 'tracker.type', '__transport.name', '__record.created', '__caller.name'];\r\n    defaults = defaults.concat(this.getProfileDefaultAttribute(profileName));\r\n\r\n    let cleanMessage = {}; // Variable to contain cleansed data\r\n\r\n    // Ignoring strict attribute rule implementation for profile_csis_ga\r\n    if (this.getProfile(profileName).ignoreAttributeRules)\r\n    {\r\n      // Fixed shallow copy object to deep copy\r\n      // For error / automation logging, it should be a deep copy\r\n      cleanMessage = JSON.parse(JSON.stringify(message));\r\n    }\r\n    else\r\n    {\r\n      // Create a new object (cleanMessage) that includes default and rule defined items only\r\n      Object.keys(message).forEach((messageKey) =>\r\n      {\r\n        const isDefault = defaults.includes(messageKey);\r\n\r\n        if (isDefault || mappedRules[messageKey])\r\n        {\r\n          cleanMessage[messageKey] = message[messageKey];\r\n        }\r\n        else if (messageKey.substring(0, 2) !== '__')\r\n        {\r\n          cleanMessage[messageKey] = '[ruleMismatch]';\r\n        }\r\n      });\r\n    }\r\n\r\n    Logger.log(`cleanMessage: ${JSON.stringify(cleanMessage)}`);\r\n\r\n    // Apply event rules\r\n    Object.keys(mappedRules).forEach((ruleKey) =>\r\n    {\r\n      const rule = mappedRules[ruleKey];\r\n\r\n      if (rule.optional && (cleanMessage[ruleKey] === null))\r\n      {\r\n        Logger.log(`applyAttributeRules: optional field ${ruleKey} was skipped`);\r\n        return;\r\n      }\r\n\r\n      cleanMessage[ruleKey] = TelemetryGlobals.rulesManager.apply(cleanMessage[ruleKey], rule);\r\n    });\r\n\r\n    return cleanMessage;\r\n  }\r\n}\r\n","import Logger from './logger';\r\nimport Transport from './transport';\r\nimport { normalizePayload } from './utils';\r\nimport { TelemetryGlobals } from './telemetry_globals';\r\n\r\nexport default class EventHandler\r\n{\r\n  constructor()\r\n  {\r\n    this.transport = new Transport();\r\n  }\r\n\r\n  handleEvent(event)\r\n  {\r\n    // TODO: find out what event type should be\r\n    event.type = 'UWP_Event';\r\n\r\n    Logger.debug(`process Analytics.v1.AddRecord event: ${JSON.stringify(event)}`);\r\n\r\n    const eventName = event.unique_id || event.UniqueIdentifier; // Latter option for API.v2\r\n    let payload = normalizePayload(event.payload || event.data);\r\n\r\n    if (!payload)\r\n    {\r\n      Logger.warn(`event ${eventName}: Unable to extract message payload; using an empty one`);\r\n      payload = {};\r\n    }\r\n\r\n    if (event.type)\r\n    {\r\n      payload['Tracker.Type'] = event.type; // This is for backwards compatibility with Orion\r\n    }\r\n\r\n    // Different versions of the API produces different cases for the tracker type\r\n    if (payload['Tracker.Type'] && (typeof payload['Tracker.Type'] === 'string'))\r\n    {\r\n      payload['Tracker.Type'] = payload['Tracker.Type'].toLowerCase();\r\n    }\r\n\r\n    // Add record creation time if it doesn't exist (case of MsgBus API)\r\n    if (payload['__record.created'] === null)\r\n    {\r\n      payload['__record.created'] = new Date().toISOString();\r\n    }\r\n\r\n    payload.hit_event_id = eventName;\r\n\r\n    Logger.debug(`ready to transmit ${JSON.stringify(payload)}`);\r\n    Logger.logRawTrack(eventName, JSON.stringify(payload));\r\n\r\n    const profileNames = TelemetryGlobals.eventManager.getProfileNames(eventName);\r\n\r\n    if (!profileNames)\r\n    {\r\n      Logger.log(`Rejected event ${eventName}: missing configuration`);\r\n      // Don't send event, just log it since it's a warning\r\n      Logger.logAutomationError(eventName,\r\n        JSON.stringify(payload),\r\n        JSON.stringify({\r\n          level: 'warning',\r\n          type: { rejected: `${eventName} is missing configuration/profile` }\r\n        }));\r\n      return;\r\n    }\r\n\r\n    this.transport.transmit(eventName, payload, profileNames, TelemetryGlobals.eventManager.getDataSetNames(eventName));\r\n  }\r\n}\r\n","import Logger from './logger';\r\n\r\nexport default class RulesManager\r\n{\r\n  constructor()\r\n  {\r\n    this.dailyMaxTable = {};\r\n  }\r\n\r\n  notNull(value, meta) { return (value != null); }\r\n\r\n  inRange(value, meta) { return (value >= meta.min) && (value <= meta.max); }\r\n\r\n  equal(value, meta) { return (value == String(meta)); }\r\n\r\n  greater(value, meta) { return (value > meta); }\r\n\r\n  greaterEqual(value, meta) { return (value >= meta); }\r\n\r\n  less(value, meta) { return (value < meta); }\r\n\r\n  lessEqual(value, meta) { return (value <= meta); }\r\n\r\n  notEqual(value, meta) { return (value != String(meta)); }\r\n\r\n  startsWith(value, meta) { return !value.indexOf(meta); }\r\n\r\n  endsWith(value, meta) { return value.indexOf(meta, value.length - meta.length) !== -1; }\r\n\r\n  contains(value, meta) { return value.indexOf(meta) !== -1; }\r\n\r\n  regex(value, meta)\r\n  {\r\n    try\r\n    {\r\n      let re = new RegExp(meta);\r\n      // New regex suport, with flags\r\n      if (meta.expr && meta.flags)\r\n      {\r\n        re = new RegExp(meta.expr, meta.flags);\r\n      }\r\n      return re.test(value);\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.warn(`rules.regex exception: ${e.message}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  in(value, meta) { for (const i in meta) { if (value == String(meta[i])) return true; } return false; }\r\n\r\n  isType(value, meta) { return (typeof value === meta); }\r\n\r\n  isEqual(value, meta) { return value == meta; }\r\n\r\n  not(value, meta)\r\n  {\r\n    return !(this[meta.ruleName](value, meta.meta));\r\n  }\r\n\r\n  or(value, meta)\r\n  {\r\n    for (const i in meta)\r\n    {\r\n      if (this[meta[i].ruleName](value, meta[i].meta)) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  and(value, meta)\r\n  {\r\n    for (const i in meta)\r\n    {\r\n      if (!this[meta[i].ruleName](value, meta[i].meta)) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // value == date as ISO string or Date(), meta == delta in milliseconds\r\n  date_earlier(value, meta)\r\n  {\r\n    let value_time = value;\r\n    if (typeof value === 'string')\r\n    {\r\n      // convert to date\r\n      value_time = new Date(value);\r\n    }\r\n    if (!(value_time instanceof Date))\r\n    {\r\n      Logger.debug(`date_earlier: invalid input value type is '${typeof value}'`);\r\n      return false; // can't compare if the input is not a date\r\n    }\r\n\r\n    const now_time = new Date();\r\n    Logger.debug(`date_earlier: compare (now - value = ${now_time - value_time}) < ${meta}`);\r\n    return (now_time - value_time) < meta;\r\n  }\r\n\r\n  // value == date as ISO string or Date(), meta == delta in milliseconds\r\n  date_later(value, meta)\r\n  {\r\n    let value_time = value;\r\n    if (typeof value === 'string')\r\n    {\r\n      // convert to date\r\n      value_time = new Date(value);\r\n    }\r\n    if (!(value_time instanceof Date))\r\n    {\r\n      Logger.debug(`date_later: invalid input value type is '${typeof value}'`);\r\n      return false; // can't compare if the input is not a date\r\n    }\r\n\r\n    const now_time = new Date();\r\n    Logger.debug(`date_later: compare (now - value = ${now_time - value_time}) > ${meta}`);\r\n    return (now_time - value_time) > meta;\r\n  }\r\n\r\n  // Throttling rules, if it returns true means stop the event, false means send the event.\r\n  // Sample - random sample / probability of being sent, meta is between 0 to 1\r\n  sample(name, meta) { return Math.random() > meta; }\r\n\r\n  getDailyMaxTableCounter(profileName)\r\n  {\r\n    const targetDailyMaxTable = this.dailyMaxTable[profileName];\r\n    if (!targetDailyMaxTable)\r\n    {\r\n      return null;\r\n    }\r\n\r\n    return targetDailyMaxTable.counter;\r\n  }\r\n\r\n  // Daily - daily maximum events for each name, calculated based on a 24 hour intervals since first one\r\n  dailyMax(name, meta)\r\n  {\r\n    // time interval, 24 hours == 86400000, this timeInterval is all that needs to be replaced if there is a weeklyMax, monthlyMax, etc.\r\n    const timeInterval = 86400000;\r\n    const currentTimeMs = Date.now();\r\n\r\n    // If this is the first one, add entry in table and send the event OR If it's been 24 hours, reset the counter and send the event\r\n    if ((!this.dailyMaxTable[name]) || (currentTimeMs - this.dailyMaxTable[name].startTimeMs > timeInterval))\r\n    {\r\n      this.dailyMaxTable[name] = {\r\n        counter: 1,\r\n        startTimeMs: currentTimeMs\r\n      };\r\n      return false;\r\n    }\r\n\r\n    this.dailyMaxTable[name].counter++;\r\n\r\n    // If it's less the limit per day, then send the event\r\n    if (this.dailyMaxTable[name].counter < meta)\r\n    {\r\n      return false;\r\n    }\r\n\r\n    Logger.warn(`dailyMax: reached the maximum for the day for ${name}, max: ${meta} current: ${this.dailyMaxTable[name].counter}`);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Evaluates if a value passes a rule\r\n   * @param {Any} value - Value being evaluated\r\n   * @param {Object} ruleConfig - Rules\r\n   * @return true if passed, false otherwise or invalid ruleConfig\r\n   */\r\n  evaluate(value, ruleConfig)\r\n  {\r\n    try\r\n    {\r\n      if (!ruleConfig || !ruleConfig.ruleName)\r\n      {\r\n        return false;\r\n      }\r\n\r\n      return this[ruleConfig.ruleName](value, ruleConfig.meta);\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(`rules.evaluate: ${e.message}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // This function is a specific version of evaluate just for event attributes\r\n  apply(value, ruleConfig)\r\n  {\r\n    try\r\n    {\r\n      if (!ruleConfig || !ruleConfig.ruleName) return value;\r\n\r\n      // corner case rule 'override' that will return meta\r\n      if (ruleConfig.ruleName === 'override')\r\n      {\r\n        // log if the override is passed something, it should be passed nothing\r\n        if (value != null)\r\n        {\r\n          Logger.warn(`Using override value: replacing ${value} with ${ruleConfig.meta}`);\r\n        }\r\n        return ruleConfig.meta;\r\n      }\r\n\r\n      if (this[ruleConfig.ruleName](value, ruleConfig.meta))\r\n      {\r\n        return value;\r\n      }\r\n\r\n      if (((value === undefined) || (value === null)) && ruleConfig.optional)\r\n      {\r\n        return '[not assigned]';\r\n      }\r\n\r\n      if (ruleConfig.onMismatch === undefined)\r\n      {\r\n        return '[ruleMismatch]';\r\n      }\r\n      return ruleConfig.onMismatch;\r\n    }\r\n    catch (e)\r\n    {\r\n      if (!ruleConfig.onError)\r\n      {\r\n        return '[ruleError]';\r\n      }\r\n      return ruleConfig.onError;\r\n    }\r\n  }\r\n}\r\n","import { TelemetryGlobals } from './telemetry_globals';\r\nimport { generateGUIDFromHash, processMD5Hash } from './utils';\r\nimport DataCollector from './data_collector';\r\nimport DictionaryMapper from './dictionary_mapper';\r\nimport DataSetManager from './dataset_manager';\r\nimport EventManager from './event_manager';\r\nimport EventHandler from './event_handler';\r\nimport Logger from './logger';\r\n// JSON data files\r\nimport data_items from './Data/data_items.json';\r\nimport dictionary from './Data/dictionary.json';\r\nimport events from './Data/events.json';\r\nimport profiles from './Data/profile.json';\r\nimport datasets_catalog from './Data/datasets_catalog.json';\r\nimport RulesManager from './rules_manager';\r\n\r\nexport default class engine\r\n{\r\n  constructor(jsonLocation, context = {}, externalLogger = null)\r\n  {\r\n    this.initCalled = true;\r\n    this.userID = null;\r\n    this.geoInfo = null;\r\n\r\n    // TODO: properly set these\r\n    if (typeof jsonLocation === 'object')\r\n    {\r\n      // use it directly\r\n    }\r\n    else if (typeof jsonLocation === 'string')\r\n    {\r\n      // fetch json\r\n    }\r\n\r\n    // Start data collectors and other start up functions\r\n    if (externalLogger) TelemetryGlobals.externalLogger = externalLogger;\r\n    TelemetryGlobals.dataCollector = new DataCollector(data_items);\r\n    TelemetryGlobals.dictionaryMapper = new DictionaryMapper(dictionary);\r\n    TelemetryGlobals.eventManager = new EventManager(events);\r\n    TelemetryGlobals.datasetManager = new DataSetManager(datasets_catalog);\r\n    TelemetryGlobals.eventHandler = new EventHandler();\r\n    TelemetryGlobals.rulesManager = new RulesManager();\r\n    TelemetryGlobals.profiles = profiles;\r\n    TelemetryGlobals.engine = this;\r\n\r\n    // Update initial context\r\n    for (const contextKey of Object.keys(context))\r\n    {\r\n      this.updateContext(contextKey, context[contextKey]);\r\n    }\r\n  }\r\n\r\n  setUrl(url)\r\n  {\r\n    TelemetryGlobals.url = url;\r\n  }\r\n\r\n  sendEvent(unique_id, payload)\r\n  {\r\n    if (!this.initCalled) return;\r\n    TelemetryGlobals.eventHandler.handleEvent({ unique_id, payload });\r\n  }\r\n\r\n  updateContext(item, value)\r\n  {\r\n    TelemetryGlobals.storage.set(item, value);\r\n    TelemetryGlobals.dataCollector.markDataExpired(item);\r\n  }\r\n\r\n  getContextId()\r\n  {\r\n    // step1: check if we already loaded the value\r\n    if (this.userID && this.userID !== '[unknown]')\r\n    {\r\n      return this.userID;\r\n    }\r\n\r\n    // step2: if not loaded, check if stored in registry\r\n    this.userID = TelemetryGlobals.storage.get('Analytics.ContextId');\r\n    if (this.userID) return this.userID;\r\n\r\n    // Reaching this line means that we have not created the user id\r\n    // step3: create user id by hashing mircrosoft machine guid\r\n\r\n    // The Microsoft Machine Guid must have been collected first\r\n    const microsoftMachineGuid = TelemetryGlobals.storage.get('Device.Microsoft.Machine.Guid');\r\n    let isUsingMicrosoftMachineGuid = false;\r\n\r\n    if (microsoftMachineGuid && microsoftMachineGuid !== '[ruleMismatch]')\r\n    {\r\n      try\r\n      {\r\n        const hash = processMD5Hash(microsoftMachineGuid);\r\n        this.userID = generateGUIDFromHash(hash);\r\n        isUsingMicrosoftMachineGuid = true;\r\n        Logger.log(`microsoftMachineGuid was hashed to create uid: ${this.userID}`);\r\n      }\r\n      catch (e)\r\n      {\r\n        Logger.error(`An error was caught when hashing microsoftMachineGuid: ${e.message}`);\r\n      }\r\n    }\r\n    else\r\n    {\r\n      Logger.warn('Machine Guid is missing');\r\n    }\r\n\r\n    // step4: send analytics event\r\n    // Only send the event if value was stored fine\r\n    const eventLabel = isUsingMicrosoftMachineGuid ? 'Hashed microsoft machine guid' : 'Created a new GUID';\r\n\r\n    // Send event\r\n    Logger.log('Sending analytics_new_user_created event');\r\n\r\n    TelemetryGlobals.eventHandler.handleEvent({\r\n      UniqueIdentifier: 'analytics_new_user_created',\r\n      type: 'event',\r\n      payload: {\r\n        'Event.Action': 'ClientId.Created',\r\n        'Event.Category': 'Analytics.Content',\r\n        'Event.Label': eventLabel,\r\n        'Sub.Category': 'LifeCycle',\r\n        'Tracker.Type': 'event',\r\n      }\r\n    });\r\n\r\n    return this.userID;\r\n  }\r\n\r\n  async getDefaultDictionary()\r\n  {\r\n    // Not using geo info for now\r\n    // const geoInfo = this.geoInfo || await this.queryGeoInfo(); // TODO: refetch geo info when it expires\r\n    // const { geoid, isQA } = geoInfo;\r\n\r\n    return {\r\n      'Application.Name': 'Analytics.Content',\r\n      'Hit.UserID': this.userID,\r\n      'Analytics.Content.Version': '1.0.1',\r\n      'Analytics.bootstrapFileVersion': null,\r\n      'device.geo.id': null,\r\n      'device.env.qa': null,\r\n      'analytics.sdk.version': null,\r\n      product_analytics_dataitems_intest: null,\r\n    };\r\n  }\r\n\r\n  async queryGeoInfo()\r\n  {\r\n    try\r\n    {\r\n      const funcUrl = 'https://prd-mcafee-mosaic-pub.azurewebsites.net/api/geoiplookup?code=rXirGSARC5aMI8vaT2FIgrd9xrI/y2rtWqKNdjmHccR3n8oZEmdkMA==';\r\n      const res = await fetch(funcUrl, {\r\n        headers: {\r\n          method: 'GET',\r\n        }\r\n      });\r\n      const geoId = res.headers.get('x-geoid');\r\n      const isQA = res.headers.get('x-qae');\r\n\r\n      const geoInfo = {\r\n        queryDate: (new Date()).toISOString(),\r\n        geoid: geoId ? geoId.replace(/_/g, '') : '',\r\n        isQA: isQA ? isQA.replace(/_/g, '') : '',\r\n      };\r\n\r\n      // To be used next time\r\n      this.geoInfo = geoInfo;\r\n\r\n      return geoInfo;\r\n    }\r\n    catch (e)\r\n    {\r\n      Logger.error(`queryGeoInfoUWP:  ${e.message}`);\r\n      return {};\r\n    }\r\n  }\r\n}\r\n","import BackgroundCommon from '@extension/common/background_common';\r\nimport TelemetryEngine from '@mcafee/wa-telemetry';\r\n\r\nexport default class StandAloneTelemetryWrapper extends TelemetryEngine\r\n{\r\n  constructor(jsonLocation, context = {}, externalLogger = null)\r\n  {\r\n    super(jsonLocation, context, externalLogger);\r\n  }\r\n\r\n  sendEvent(uniqueId, payload)\r\n  {\r\n    if (!BackgroundCommon.isPersonalPolicyEnabled() || !BackgroundCommon.isActivityPolicyEnabled())\r\n    {\r\n      return;\r\n    }\r\n\r\n    super.sendEvent(uniqueId, payload);\r\n  }\r\n}\r\n","// Variables for storing search results in the storage\r\nexport const StoredSearchVariables = {\r\n  SUGGESTION_URL: 'https://us.search.yahoo.com/sugg/gossip/gossip-us-partner?output=fxjson&appid=mca&source=yahoo_mcafee_searchassist&command=',\r\n  STORED_SEARCHES: 'STORED_SEARCHES',\r\n  MAX_STORED_SEARCHES: 50,\r\n  SHOW_MAX_RESULTS: 5, // secure search returns 10 but we cut it to top 5\r\n  SEARCH_RESULT_TTL: 1000 * 60 * 30,\r\n};\r\n","import { StoredSearchVariables } from './constants';\r\n\r\nconst { SUGGESTION_URL,\r\n  MAX_STORED_SEARCHES,\r\n  SHOW_MAX_RESULTS,\r\n  SEARCH_RESULT_TTL } = StoredSearchVariables;\r\n\r\nexport default class SearchSuggest\r\n{\r\n  constructor(httpService)\r\n  {\r\n    this.httpService = httpService;\r\n    this.storedSearches = new Map();\r\n  }\r\n\r\n  getUrl(searchTerm)\r\n  {\r\n    return `${SUGGESTION_URL}${searchTerm}`;\r\n  }\r\n\r\n  /**\r\n   * Retrieve search results from the cache\r\n   *\r\n   * @param {String} searchTerm\r\n   */\r\n  async retrieveSearchTerm(searchTerm)\r\n  {\r\n    let results = null;\r\n    if (this.hasSearchTerm(searchTerm))\r\n    {\r\n      results = this.storedSearches.get(searchTerm).searchResults;\r\n    }\r\n    else\r\n    {\r\n      results = await this.getSearchSuggestions(searchTerm);\r\n    }\r\n    return results;\r\n  }\r\n\r\n  async getSearchSuggestions(searchTerm)\r\n  {\r\n    try\r\n    {\r\n      let searchResults = [];\r\n      const response = await this.httpService.sendHttpRequest({ method: 'GET', url: this.getUrl(searchTerm), headers: {} });\r\n      const responseJson = await response.json();\r\n\r\n      if (responseJson)\r\n      {\r\n        searchResults = responseJson[1].slice(0, SHOW_MAX_RESULTS);\r\n        this.storedSearches.set(searchTerm, {\r\n          timeCached: Date.now(),\r\n          searchResults\r\n        });\r\n      }\r\n\r\n      return searchResults;\r\n    }\r\n    catch (error)\r\n    {\r\n      throw new Error(`HttpService failure: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks the cache to see if request had already been made before\r\n   *\r\n   * @param {String} searchTerm\r\n   */\r\n  hasSearchTerm(searchTerm)\r\n  {\r\n    return this.storedSearches.has(searchTerm);\r\n  }\r\n\r\n  /**\r\n   * Set a timer to clean up the cache every 30 minutes\r\n   */\r\n  checkCache()\r\n  {\r\n    if (this.storedSearches.size > MAX_STORED_SEARCHES * 0.5)\r\n    {\r\n      this.cleanPreviousSearches();\r\n    }\r\n  }\r\n\r\n  cleanPreviousSearches()\r\n  {\r\n    this.storedSearches.forEach((searchResultObj, searchTerm, searchMap) =>\r\n    {\r\n      if (Date.now() > searchResultObj.timeCached + SEARCH_RESULT_TTL)\r\n      {\r\n        searchMap.delete(searchTerm);\r\n      }\r\n    });\r\n  }\r\n}\r\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { LocalStorageVariables } from '@extension/common/cache_store_variables';\r\nimport { BackgroundGlobals } from '@extension/background/background_globals';\r\n\r\nexport default class TyposquattingCache\r\n{\r\n  constructor()\r\n  {\r\n    this.cacheTyposquatting = LocalStorageVariables.CACHE_TYPOSQUATTING.name;\r\n    this.urlMap = new Map();\r\n  }\r\n\r\n  checkCache()\r\n  {\r\n    const cache = BackgroundGlobals.cacheStore.get(this.cacheTyposquatting, {});\r\n\r\n    if (Object.keys(cache).length >= BackgroundGlobals.TYPOSQUATTING_MAX_CACHE)\r\n    {\r\n      this.cleanTypoCache(cache);\r\n    }\r\n  }\r\n\r\n  cleanTypoCache(cache)\r\n  {\r\n    for (const [keys, value] of Object.entries(cache))\r\n    {\r\n      if (value.timeOfExpiry <= Date.now())\r\n      {\r\n        delete (cache[keys]);\r\n      }\r\n    }\r\n    BackgroundGlobals.cacheStore.set(this.cacheTyposquatting, cache);\r\n  }\r\n\r\n  addEntry(domain, value)\r\n  {\r\n    const cache = BackgroundGlobals.cacheStore.get(this.cacheTyposquatting, {});\r\n    const timeOfExpiry = Date.now() + BackgroundGlobals.TYPOSQUATTING_EXPIRY;\r\n    cache[domain] = { ...value, timeOfExpiry };\r\n    BackgroundGlobals.cacheStore.set(this.cacheTyposquatting, cache);\r\n  }\r\n\r\n  getEntry(domain)\r\n  {\r\n    const cache = BackgroundGlobals.cacheStore.get(this.cacheTyposquatting, {});\r\n    if (cache[domain])\r\n    {\r\n      const updatedTime = Date.now() + BackgroundGlobals.TYPOSQUATTING_EXPIRY;\r\n      cache[domain].timeOfExpiry = updatedTime;\r\n      BackgroundGlobals.cacheStore.set(this.cacheTyposquatting, cache);\r\n    }\r\n    return cache[domain];\r\n  }\r\n\r\n  clearEntries()\r\n  {\r\n    BackgroundGlobals.cacheStore.clear(this.cacheTyposquatting);\r\n  }\r\n\r\n  getAllEntries()\r\n  {\r\n    return BackgroundGlobals.cacheStore.get(this.cacheTyposquatting, {});\r\n  }\r\n\r\n  checkRequest(requestdata)\r\n  {\r\n    const listOfPromises = [];\r\n    requestdata.forEach((value) =>\r\n    {\r\n      if (this.urlMap.has(value))\r\n      {\r\n        listOfPromises.push(this.urlMap.get(value));\r\n      }\r\n    });\r\n    return listOfPromises;\r\n  }\r\n\r\n  addRequest(requestdata, promise)\r\n  {\r\n    requestdata.forEach((value) =>\r\n    {\r\n      this.urlMap.set(value, promise);\r\n    });\r\n  }\r\n\r\n  deleteRequest(requestdata)\r\n  {\r\n    requestdata.forEach((value) =>\r\n    {\r\n      this.urlMap.delete(value);\r\n    });\r\n  }\r\n}\r\n","// Background\nimport { BackgroundGlobals } from '@extension/background/background_globals';\nimport ListenerManager from '@extension/background/listeners/listener_manager';\nimport WasmGenerator from '@extension/background/wasm/wasm_generator';\nimport LocalDispatcher from '@extension/background/dispatchers/local_dispatcher';\nimport NativeMessageDispatcherV1 from '@extension/background/dispatchers/native/native_message_dispatcher_v1';\nimport NativeWSSMessageDispatcher from '@extension/background/dispatchers/native/native_wss_message_dispatcher';\nimport ScheduleManager from '@extension/background/schedulers/schedulemanager';\nimport { schedulers } from '@extension/background/schedulers/schedulers';\nimport { CacheStore } from '@extension/background/cache_store';\nimport GarbageCollector from '@extension/background/garbage_collector';\nimport WebRequestDispatcher from '@extension/background/dispatchers/webrequest_dispatcher';\nimport { EngineDownloadHelper } from '@extension/background/schedulers/enginedownloadtask';\nimport StandAloneTelemetryWrapper from '@extension/background/standAloneTelemetryWrapper';\n// Common\nimport { extension } from '@extension/common/webextension';\nimport { BrowserType } from '@extension/common/constants';\nimport { Logger } from '@extension/common/logger';\nimport BackgroundCommon from '@extension/common/background_common';\nimport BrowserAction from '@extension/background/browser_action';\nimport UrlParser from '@extension/common/url_parser';\nimport SearchSuggest from '@mcafee/wa-search-suggestion/index';\nimport HttpService from '@extension/common/http_service';\n\nimport { LocalStorageVariables } from '@extension/common/cache_store_variables';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getBrowserInfo } from '@extension/utilities/utils';\n// Typosquatting Cache\nimport TyposquattingCache from '@extension/background/typosquatting_cache';\nimport BackgroundUtils from '@extension/background/background_utils';\nimport MTIInitializer from '@extension/background/mti_initializer';\n\n// Background script to be running in the chrome process. This takes care of making GTI requests.\n\n/**\n * TODO: Comment\n */\nclass Background\n{\n  processActiveTab()\n  {\n    /**\n     * Handles all returned tabs from the \"tabs\" API call.\n     * @param {Object[]} tabs - Array of \"Tab\" objects\n     */\n    function processTabCb(tabs)\n    {\n      if (!tabs.length) return;\n\n      const [originTab] = tabs;\n      const { url, id } = originTab;\n\n      if (BackgroundCommon.isProperWebURL(url))\n      {\n        WebRequestDispatcher.onHeadersReceived(url, id, 0, undefined);\n        WebRequestDispatcher.onNavigateComplete(url, id, 0);\n      }\n    }\n\n    const queryInfo = {\n      active: true,\n      currentWindow: true\n    };\n\n    extension.tabs.query(queryInfo, processTabCb);\n  }\n\n  toUUIDBrowserType(browserType)\n  {\n    let bType = '';\n\n    switch (browserType)\n    {\n      case BrowserType.FIREFOX: bType = 'X';\n        break;\n      case BrowserType.CHROME: bType = 'Y';\n        break;\n      case BrowserType.EDGE: bType = 'Z';\n        break;\n      default: bType = 'U';\n        break;\n    }\n    return bType;\n  }\n\n  /**\n   * Setup standalone telemetry\n   */\n  async initStandaloneTelemetry()\n  {\n    const deviceId = BackgroundGlobals.cacheStore.get(LocalStorageVariables.EXTN_UUID2.name, '');\n    const affid = BackgroundGlobals.cacheStore.get(LocalStorageVariables.WA_AFFID.name, 0);\n    const arch = await new Promise((resolve) => chrome.runtime.getPlatformInfo((info) => resolve(info.arch.replace('-', '_'))));\n    const browserInfo = getBrowserInfo();\n    const contextVars = {\n      device_id: deviceId,\n      hit_session_id: uuidv4(),\n      hit_session_start_time: new Date().toISOString(),\n      operating_system: browserInfo.platform,\n      locale: extension.i18n.getUILanguage().toLowerCase(),\n      wss_installed: 'unknown',\n      browser_version: browserInfo.version,\n      browser_type: browserInfo.browser,\n      device_cpu_architecture: arch,\n      affid,\n    };\n\n    BackgroundGlobals.telemetryEngine = new StandAloneTelemetryWrapper(null, contextVars, Logger);\n  }\n\n  /**\n   * Register all the listeners created for the background script.\n   */\n  initListeners()\n  {\n    BackgroundGlobals.listenerManager = new ListenerManager();\n    const listeners = BackgroundGlobals.listenerManager.getListeners();\n\n    for (const listener of listeners)\n    {\n      listener.init();\n    }\n  }\n\n  async submain()\n  {\n    BackgroundGlobals.scheduleManager = new ScheduleManager();\n\n    const nativeDispatcher = new NativeMessageDispatcherV1();\n    nativeDispatcher.init();\n\n    const wssNativeDispatcher = new NativeWSSMessageDispatcher();\n    wssNativeDispatcher.init();\n\n    // Local dispatcher dispatches most of the calls locally and delegates few calls such as telemetry,\n    // settings, native logging to native if nativeDispatcher is available.\n    BackgroundGlobals.messageDispatcher = new LocalDispatcher(nativeDispatcher);\n\n    // settings, WSS native logging to native if wssNativeDispatcher is available.\n    BackgroundGlobals.wssMessageDispatcher = new LocalDispatcher(wssNativeDispatcher);\n    // Scheduler\n    BackgroundGlobals.schedules = schedulers;\n    BackgroundGlobals.scheduleManager.init();\n\n    this.initListeners();\n\n    // The initial tab at startup is not firing the navigate event with tab Id.\n    // This is required to get the icon set for the browserAction.\n    // Below getting the active tab at startup and then firing the beforeNavigate and Navigate events to the dispatcher.\n    this.processActiveTab();\n  }\n\n  onInstall()\n  {\n    // Trigger FF Policy page on Firefox browser\n    chrome.runtime.onInstalled.addListener(({ reason }) =>\n    {\n      if (reason === 'install')\n      {\n        BackgroundUtils.focusOrCreateTab(chrome.runtime.getURL('html/ff_policy.html'));\n      }\n    });\n  }\n\n  onBrowserStartUp()\n  {\n    chrome.runtime.onStartup.addListener(() =>\n    {\n      BackgroundGlobals.cacheStore.clearSessionVariables();\n    });\n  }\n\n  // The entry point for background script. Here all listeners are registered.\n  // The message dispatcher is initialized. This will take care of initializing the native communication layer or the standalone layer.\n  async main()\n  {\n/////////////////////////////////////\n/////////////////////\n//////////////\n\n    BackgroundGlobals.cacheStore = new CacheStore();\n    await BackgroundGlobals.cacheStore.init();\n\n    // Initialize Extension UUID\n    if (!BackgroundGlobals.cacheStore.get(LocalStorageVariables.EXTN_UUID2.name, ''))\n    {\n      const browser = this.toUUIDBrowserType(BackgroundGlobals.browserType);\n      BackgroundGlobals.cacheStore.set(LocalStorageVariables.EXTN_UUID2.name, `${browser}${uuidv4()}`);\n    }\n\n    BackgroundGlobals.tldParser = new UrlParser();\n    BackgroundGlobals.userAgentInBase64 = btoa(navigator.userAgent);\n    BackgroundGlobals.searchSuggest = new SearchSuggest(new HttpService());\n\n    this.onBrowserStartUp();\n\n    // Fetch Engine list\n    EngineDownloadHelper.getEngines();\n\n    // Init standalone telemetry\n    this.initStandaloneTelemetry();\n\n    // Init Typosquatting Cache\n    BackgroundGlobals.typoCache = new TyposquattingCache();\n\n    // Add all caches to the garbage collector\n    BackgroundGlobals.garbageCollector = new GarbageCollector();\n    BackgroundGlobals.garbageCollector.add(BackgroundGlobals.searchSuggest);\n    BackgroundGlobals.garbageCollector.add(BackgroundGlobals.typoCache);\n\n    // Browser Action icon\n    BackgroundGlobals.browserAction = new BrowserAction();\n\n    // AMWA-11850 CPSIR-83 - Secret code that is appended to image requests to not allow external access to image files\n    BackgroundGlobals.WA_IMAGE_SECRET = Math.floor(Math.random() * 982451653 + 982451653).toString(36);\n\n    const wasm = await WasmGenerator.generateWASM();\n    BackgroundGlobals.wasm = wasm;\n    BackgroundGlobals.firefoxInternalUUID = BackgroundGlobals.browserType === BrowserType.FIREFOX ? extension.i18n.getMessage('@@extension_id') : '';\n\n    try\n    {\n      const result = await BackgroundGlobals.wasm.init(BackgroundGlobals.firefoxInternalUUID);\n      if (result === '0')\n      {\n        Logger.log(`WASM initiation: ${result}`);\n        await MTIInitializer.init();\n        this.submain();\n      }\n    }\n    catch (error)\n    {\n      Logger.error(error);\n    }\n  }\n}\n\nconst bkobj = new Background();\nbkobj.main();\n"],"names":["leafPrototypes","getProto","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","Object","getPrototypeOf","obj","t","value","mode","this","__esModule","then","ns","create","r","def","current","indexOf","getOwnPropertyNames","forEach","key","d","definition","o","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","SocialMediaTypes","NONE","LINKEDIN","INSTAGRAM","YOUTUBE","FACEBOOK","TWITTER","REDDIT","SocialMediaAllTypes","values","reduce","sum","SocialMediaActions","TOGGLE_ON","TOGGLE_OFF","ANNOTATION_ENABLE_ALL","ANNOTATION_DISABLE_ALL","ANNOTATION_ENABLE","ANNOTATION_DISABLE","GET","SearchAnnotationActions","SET","AnnotationOptions","ONLY_SECURE_SEARCH","ALL","iterator","keys","EngineType","NonZeroSocialMediaTypes","CacheStoreActions","CLEAR","LocalStorageVariables","BLOCK_PAGE_PHISHING_FIRST_VARIANT_COUNT","name","type","BLOCK_PAGE_RED_FIRST_VARIANT_COUNT","BLOCK_PAGE_WHITELIST","BLOCK_PAGE_YELLOW_FIRST_VARIANT_COUNT","CRYPTO_WHITELIST","ENGINE_DOWNLOAD_TASK","ENGINES","ENGINES_FUTURE_TIME","ENGINES_VERSION","EXTENSION_LOGGING","options","USE_NATIVE_LOGGER","EXTN_UUID2","IFRAME_BLOCK_FIRST_TIME","LAST_HEARTBEAT_SENT","POPUP_STATS","POST_INSTALLATION_PAGE_SHOWED","RAT_DETECTION_WHITELIST","SEARCH_ANNOTATION_OPTION","SMA_ANNOTATION_OPTIONS","SMA_USER_TOGGLE","TELEMETRY_HEARTBEAT_TASK","TYPOSQUATTING_WHITELIST","CACHE_TYPOSQUATTING","CACHE_GTI","CACHE_TAB_DATA","USER_NATIVE_STATS","WHITELIST_FLAG","DWS_INFO","DWS_WHITELIST","DWS_UNIQUE_EMAILS","APS_TOAST_FIRST_TIME","APS_FULL_MSG_SHOWN_ARRAY","FF_POLICY_PERSONAL_COLLECTION","FF_POLICY_ACTIVITY_COLLECTION","FF_POLICY_LAST_SHOWN","WA_AFFID","APS_TOGGLE_SETTING","AJ_TOAST","AJ_APS_ENABLE","HTI_THROTTLE","IS_HTI","CacheStorageVariables","RAT_DETECTION_SHOWING","FORM_INFO","SAVE_MULTI_STEP_LOGIN","APS_EMAIL_LINKS","WSS_EMAIL","TabData","static","blockedIframes","cryptoBlockData","tabDomainTrusted","getResetValues","reset","tabId","update","BackgroundGlobals","cacheStore","getDefaultValues","set","newTabData","cache","delete","currentTabData","setTabBlockPageData","blockPageData","addBlockedFrame","push","getBlockedFrames","resetBlockedFrames","BlockState","GREEN","YELLOW","RED","UNKNOWN","HACKERSAFE","TYPOSQUATTING","PHISHING","BrowserType","FIREFOX","CHROME","EDGE","BuildSettings","BROWSER_TYPE","DEBUG_MODE","EXTENSION_VERSION","LOG_LEVEL","YEAR","WPSBlockPageType","Color","DISABLED","ExecuteCommands","RAISE_NEW_TAB_EVENT","UPDATE_CACHE_STATS","BrowseActionColors","Score","SEARCH_EXTENSION_STORE_URLS","CH","ED","KEY_CODES_RANGE","start","end","Array","from","slice","BackgroundConstants","TrustedDomains","Set","NativeSettingsPreprocess","trim","split","FF","IE","suffixBrowserMap","SCOPE","SYSTEM","USER","SETTINGS_TYPE","INT","INT64","BOOL","STRING","NativeConstants","_browser","getBrowserSuffix","NativeSettings","DEV_MODE","scope","AFF_ID","BINARY_VERSION","EXTENSION_VERSION_CH","writeOnly","EXTENSION_VERSION_FF","EXTENSION_VERSION_ED","USER_AGENT","SUGGESTION_URL","SCRIPT_GENERATED_DEFAULT_SS_URL","SECURE_SEARCH_REGEXES","preprocess","PreprocessSecureSearchRegEx","SHOW_SEARCH_SETTINGS","SECURE_SEARCH_TOAST_STAMP","SECURE_SEARCH_ANNOTATION_ONLY","SECURE_SEARCH_SHOW_ICONS","SECURE_SEARCH_CHOICE","SS_DEF","ANNOTATIONS_CHOICE_EXPLICIT","CURRENT_SAO_IN_EXTENSION","FF_EXTENSION_LAST_TOAST_TIME","FF_EXTENSION_TOAST_COUNT","CHECKLIST_START_INGORE_DATE_AV","CHECKLIST_START_IGNORE_DATE_FW","CHECKLIST_IGNORE_DURACTION","CHECKLIST_GRACE_PERIOD_AV","CHECKLIST_GRACE_PERIOD_FW","CHECKLIST_GRACE_PERIOD_DURATION","CRYPTOJACKING_DISABLED","PAGES_SCANNED","PAGES_BLOCKED","DOWNLOADS_SCANNED","DOWNLOADS_BLOCKED","CRYPTO_BLOCKED","BLOCKPAGE_WHITELIST","TS_WHITELIST","CSP_ID_SETTING","UNINSTALL_SURVEY_ENABLED","UNINSTALL_SURVEY_URL","RAT_DETECTION_ENABLED","IDPS_FEATURE_ENABLED","APS_COHORT","ALT_TRIGGER","IFRAME_FORM_CHECK_ENABLED","ANNOTATION_JOURNEY_COHORT","ANNOTATION_JOURNEY_TOAST","MTI_CLIENT_ID","isTrustCheckRequired","ExtensionTelemetryUrl","scheduleManager","schedules","isNativeConnected","telemetryEngine","postInstallationPage","listenerManager","firefoxInternalUUID","shadowMode","browserType","ffViewports","garbageCollector","typoCache","logger","loglevel","messageDispatcher","port","tabData","tabIdToLastClickTime","Map","useNativeLogger","wasm","userAgentInBase64","typoSquattingServer","tldParser","cryptoBlacklist","trustedDomains","nativeSettings","searchSuggest","ratBlacklist","domain","urls","updatedByNative","wssMessageDispatcher","wssNativeClient","WSS_INSTALLED","isWPSInstalled","searchEngines","enginesVersionUrl","engineCheckInterval","AUTO_PLAY_NOTIFICATION_ENABLED","ALLOW_LOCALHOST","IDPS_AUTH_URL","IDPS_BREACH_COUNT_URL","IDPS_CSP_CLIENT_ID","IDPS_IS_ENTITLED","IDPS_PROVISION_ID","IDPS_LOGIN_DOMAIN","UA_CLIENT","TYPOSQUATTING_MAX_CACHE","TYPOSQUATTING_EXPIRY","WA_IMAGE_SECRET","apsUrlList","shopping","paths","email","selector","apsAnimationTimeout","downloadUrls","wpsRequestedSettings","permittedContentTypes","SUPPORTED_WEBSITE_LIST","isHTI","mtiRequestor","gtiServer","htiServer","cspClientId","UrlParser","uri","parts","length","cleanURI","endsWith","startsWith","getURI","paramName","qpos","params","substring","index","position","url","test","URL","hostname","p","decodeURIComponent","replace","ForegroundGlobals","LogLevels","INFO","ERROR","WARN","DEBUG","LogTypes","ProcessTypes","BACKGROUND","CONTENT","TELEMETRY","SMART_NATIVE_CLIENT","ProcessStyleMap","DEFAULT","message","logType","process","includes","chrome","storage","local","isBackground","details","processType","extensionType","consoleLog","state","processLog","async","logLevel","getLogLevel","logMessage","Date","toLocaleString","hour","minute","hour12","styleRegular","hightlight","console","error","log","uniqueHighlight","context","level","getStorageLogLevelAsync","Number","isInteger","storageLocalGetAsync","Promise","resolve","storageLogLevel","storeVariable","cleanDomain","getCleanURI","whitelist","isArray","inputDomain","toLowerCase","storageDomain","domains","domainsToBeAdded","isDomainInWhitelist","updatedList","concat","domainsToBeRemoved","filter","whitelistedDomain","clear","featureStatsTypes","FeatureStats","cacheFeatureStats","read","featureStats","pagesScanned","pagesBlocked","downloadsScanned","downloadsBlocked","cryptoBlocked","cacheStats","assign","BlockPageCommon","statusOfBlocking","blockPageUrl","filename","resolveBlockPage","runtime","getURL","blockPage","typeOfBlockPage","topUrl","blockedUrl","overriden","sendBlockPageEvent","referrer","blockUrl","wpsBlockType","convertWABlockTypeToWPS","topURL","InjectorCommon","keepInjecting","maxTries","object","file","frameId","pingRequest","command","pingCommand","execHandler","currentTries","execResp","executeScriptPromise","lastError","setTimeout","request","timeout","messageSender","sendMessagePromise","optional","tabs","sendMessage","response","scripting","executeScript","target","frameIds","files","Injector","injectObjects","objectsToInject","getCheckSuccessObjects","injectedFiles","getInjectDetailsByFrameId","filesToInject","main","success","previouslyInjected","runAfter","updateInjectDetailsByFrameId","retryExecuteScript","objectPromises","classObject","check","all","injectDetailsByFrameId","newData","injectDetails","BackgroundCommands","ContentCommands","SideBarCommands","ExternalCommands","InjectBase","constructor","InjectCryptoBlock","super","ANNOTATION","BackgroundIPC","BackgroundCommons","ContextTelemetry","TelemetryEventNames","Utils","Commands","CommonConstants","extension","SearchEngineHelper","prevLink","Logger","ResourceManager","callback","BackgroundCommon","categories","includeDescription","getRes","l10nId","getResString","res","getCategoryStrings","categoryId","newCategory","description","promises","category","imageName","imagePath","size16","size20","size32","size40","color","toImagePaths","annotationItem","imageClass","toColor","annItem","colorVal","isPhishingURI","isNaN","trust","escape","urlSplit","isSiteAdvisorUrl","isExtensionUrl","isPropertyWebURL","number","decimal","toFixed","initialEpochInSeconds","timePassedinSeconds","getTime","rules","rule","condition","urlFilter","addRules","id","resourceTypes","action","CryptojackingListener","onBeforeRequest","isPersonalPolicyEnabled","tData","tabURL","domainURL","getDomain","add","notifyCryptoBlock","blockRequest","init","bind","types","uninit","cryptoMinerScript","miner","reverse","join","contentToInject","inject","addToWhitelist","bypassCache","BrowserAction","path","resolveColorToPath","err","HttpService","onHttpResponse","ok","status","statusText","reject","Error","sendHttpRequest","headers","body","method","fetch","Typosquatting","whitelistStore","baseUrl","locale","http","timerId","expiryTimer","race","clearTimeout","text","JSON","parse","promisesToRun","catch","parseUrlToObject","payload","result","argument","typoDomain","brandName","unescape","experience","typoRedirect","originalUrl","addEntry","getParam","payloadDecrypted","wasm_typosquat_decrypt","item","checkRequest","domainData","getEntry","req","promise","wasm_typosquat_sha256","checkSum","sendAndReceiveRequest","processResponse","responseDomain","deleteRequest","addRequest","isInWhitelist","SearchEngine","engines","socialMediaToggle","socialMediaOption","secureSearchRegExes","updateSocialMedia","engine","socialMediaType","enabled","checkEngineRegEx","engineRegexes","reindex","RegExp","getSecureEngineName","engineRegexesString","getEngineForUrl","secureEngineName","engineData","find","secureurlre","ssRegEx","issecuresearch","urlre","getEngines","FEATURE_TAB_ID","BLOCK_PAGE","BROWSER_ACTION_CLICKED","BROWSER_NAVIGATE","CRYPTOJACKING_BLOCK","DARK_WEB_SCAN","DOWNLOAD_BLOCK","GET_SEARCH_EXTENSION","PROFILE_INFO","REMOTE_ACCESS_TROJAN","SEARCH_SUGGEST_BLOCK_PAGE","SEARCH_SUGGEST","SECURE_SEARCH_HIT","SIDEBAR_PANEL","SITE_REPORT","SMA_REPUTATION","TOAST","WSS_ANALYTICS","APS","EVENT_NAME","IMPRESSION_BALLOON","IMPRESSION_HOVER","CLOSE_BALLOON","TOAST_CLOSE","BALLOON","ToastTypes","ImpressionNames","InteractionTypes","LEARN_MORE_CLICKED","WHITELISTED","MAIN","ACKNOWLEDGED","PageLevel","SETTING_TABS","TelemetryColor","TelemetryBlockState","SearchType","TelemetryTerms","ACTION","CLICK","KEYDOWN","RETURN_KEY_CODE","SHOW","SEARCH_SUGGEST_KEY_CODES","MISC","LOADED","CHECKED","ACTION_PANEL","ACCEPTED","DECLINED","SETTINGS_TAB_PREFIX","PREFERENCE","SEARCH_ENGINE","GOOGLE","YAHOO","SOCIAL_MEDIA","CommonTelemetry","colorStr","blockState","blockStateStr","tabName","tabNameStr","TelemetryMessageModifiers","_options","TELEMETRY_HANDLERS","initializeTelemetryHandler","fetchTelemetryHandlers","identifier","handlers","handler","trigger","sendTelemetry","isFromBackground","messages","template","analyticsSDK","interaction_type","colour","toTelemetryBlockState","style","blockPageStyle","_event_name","browser","browserTypeToString","badge_count","count","is_shown","crypto_miner","process_name","file_name","ui_type","tab","toTelemetrySettingTab","search_type","selected","type_tag","typeTag","provider_type","engineName","block_state","site_categories","siteCategories","displayUrl","site","triggerType","action_type","provider","toastData","toastType","metadata","eventAction","flow_id","flowId","sequence","gotItButton","HandlePromise","customCallback","data","defaultCallback","handlePromiseMessage","requestData","referer","commandId","bIncludeSearchEngines","val","showInNewTab","x","y","telemetry","frameUrls","extension_id","showed","searchTerm","setting","username","completeLogin","personal","activity","func","wait","immediate","args","callNow","ua","navigator","userAgent","digestMessage","msgUint8","TextEncoder","encode","hashBuffer","crypto","subtle","digest","Uint8Array","map","b","toString","padStart","triggerAction","permittedActionList","containerMeta","selectedTag","query","addEventListener","sendMessages","cb","document","querySelector","readyState","documentElement","doScroll","event","spec","telemetryMessage","shouldSendMessage","worthyAction","whitelistedKeys","eventCode","keyCode","stringify","sendTelemetryMessages","NativeSetValues","nativeDispatcher","dispatcher","settings","send","setValues","BackgroundUtils","urlToFocus","currentWindow","active","requestId","newRequestData","tabIdData","requestIdData","REQUEST_TYPE","REQUEST_NAME","NativeGenericRequest","processMessage","request_type","requestType","requestName","processAction","handleSecureSearchToast","handleWSSInstallFlag","handleSettingChange","post_accept_action","postAcceptAction","POST_ACCEPT_ACTION","REDIRECT_STORE","REDIRECT_EXTENSION_PAGE","focusOrCreateTab","extensionPage","toExtensionPage","wss_installed","wssInstalled","settingName","settingValue","handleAnnotationJourneyToast","FeatureSettings","survey","showAnnotationsOnSSOnly","showIcons","searchAnnotationOption","isValidSAO","setCurrentSAOInExtensionNativeSettings","setSecureSearchAnnotationOnlyNativeSettings","setSecureSearchShowIconsNativeSettings","resetNativeSetting","uninstallSurvey","annotationOptions","supportedExtensions","WebBoost","SearchExtension","NewTabExtension","AutomationExtension","EdgeWebAdvisorExtension","ChromeWebAdvisorExtension","ExternalExtensions","extnId","extnName","LoggerSettings","location","protocol","GTICommands","GTIConstants","reputationTTL","maxGTIQuestionLength","globalSafeModeFlag","contentType","prn","sdkv","pev","gtiId","customerId","maxCacheRecords","reputationAlarmName","clientIdGuid","cspid","categoryMapGtiToHti","GTIGlobals","gtiRequestor","serverUrl","productVersion","GTIBackgroundListener","promisesToComplete","onMessage","addListener","sender","sendResponse","executeCommand","checkCacheOnly","post","cloneObject","STORAGE_TYPE","session","Storage","storageVariables","storageType","onChangeListener","variableName","populateCacheValues","initListeners","StorageHelper","onChanged","hasListener","db","defaultValue","getInternal","cachedValue","arguments","warn","setInternal","remove","variableNames","handleResponse","fetchReponse","GTIResponse","annotationMap","GTIResponseBuilder","gtiResponse","gtiCache","cachedItems","requestdata","addCachedItem","buildLinkInfo","linkInfo","convertGTItoHTI","rep","cat","ttl","flag","ufg","prepareFromCacheResponse","cacheInfo","prepareFromGTIResponse","respObj","respIndex","a","aflag","setReputation","prepareResponse","fncallback","GTI_UPO_FLAGS","None","SkipCustomKeywords","SkipCustomSites","SkipWebDatabaseNotKeywords","SkipWebDatabaseKeywords","SkipPatterns","SkipCGIPatterns","SkipEmbeddedURLs","SkipTrustedSourceQuery","All","GtiClientInfo","rid","cliid","pv","affid","cid","GtiQueryItems","op","uop","catset","GtiBody","ci","q","GTIStorageVariables","GTICache","urlMap","setAlarmCacheClean","alarms","delayInMinutes","onAlarm","alarmInfo","cleanReputationCache","entries","now","timeCached","listOfPromises","has","getReputation","cache_entry","GTIRequestor","httpService","wasm_gti_hmac_sha1","setGlobals","globalValues","getCache","getTelemetryData","telemetryData","uag","btoa","refurl","prepareBody","builder","rID","questIndex","startIndex","qmd","splice","makeGTIRequest","json","generateRequestId","Math","floor","random","msgBody","headersData","xdate","toUTCString","Authorization","toResponse","fullRequestData","reputation","generateHeaders","e","BackgroundGTIRequestor","getType","HTICommands","HTIConstants","productId","cacheControl","cspTokenUrl","urlReputation","urlEverGreen","HTIGlobals","htiRequestor","HTIBackgroundListener","ScheduleManager","schedulers","alarmListener","getAlarmListener","setTTL","alarm","taskName","task","run","setLastRunTime","scheduleTask","expiry","reinit","getTTL","getLastRunTime","lr","taskToScheduleName","lowestNextRun","lastRunTime","nextRunTime","freq","frequency","runImmediatelyInitially","taskNextFreq","alarmInterval","parseInt","clearAlarms","clearListeners","removeListener","stop","getTask","taskKey","HTIResponse","HTIResponseBuilder","reputationCache","htiResponse","htiCache","prepareFromHTIResponse","HTIStorageVariables","CACHE_HTI","CSP_TOKEN_HTI","EVER_GREEN_URLS","CSP_TOKEN_HTI_REFRESH","EVER_GREEN_URL_REFRESH","HTICacheLogic","cacheEntries","everGreenUrls","cachedUrlData","processUrl","isExpired","repCache","urlObject","hasChildPath","flags","urlToCache","trimwww","pathname","filteredCache","cacheObject","cacheObj","cached","checkCacheForFQDN","fqdn","fqdnSplit","checkCacheForRootDomain","domainToCheck","getIncrementalSubdomain","reverseFqdn","reverseFqdnResult","i","eguObject","cacheTTL","content","eguCachedEntry","urlRep","HTICache","urlQueryMap","cacheLogic","currentTime","accessToken","access_token","ScheduledTaskBase","fsetTTL","retryIntervals","retryIndex","getCSPKeys","appKey","sharedKey","grant_type","client_id","claims","csp_client_id","fetchToken","get_wa_app_key","get_wa_shared_key","getNextRetryInterval","reqParams","HttpMethod","Body","ClientId","WA","authContext","generate_value_for_ac","initBody","ac","ak","cd","st","sv","cspToken","tokenData","access_token_ttl","token_type","everGreenTask","fifteenMinutes","retryInterval","everGreenURLs","fetchEverGreenURLs","cacheid","HTIRequestor","requestUrls","urlWithoutParams","base64URL","requestPromise","urlResult","urlCacheObject","BackgroundHTIRequestor","MTIInitializer","getClientId","cspId","shouldUseHTIPackage","updateHTIFlag","initHtiPackage","initGtiPackage","prevHTIThrottle","randVal","ceil","NativeBrowserTypes","NativeMessages","Info","Err","Warn","Debug","ConnectionState","SmartNativeClient","connectionString","onExternalEventCb","onNativeEventCb","onDisconnectEventCb","handshakeSettings","onConnectHandler","onExternalMessage","onNativeMessage","onDisconnectEvent","nativeConnectionString","_connectedToExtension","_extensionId","_callbackMap","_callbackId","_nativeCallbackMap","_forwardExtensionId","_port","_logger","_onConnectExternal","_onMessageExternal","_onMessage","_onDisconnect","_onDisconnectHighPriorityExtension","_connectedExtensions","_connectedToNative","_handshakeSettings","_nativeConnectionStatus","_initExtensionList","onConnectExternal","onMessageExternal","_connect","_isSupported","extensionId","extensions","_isHigherPriority","extensionid","_addConnectedExtension","_removeConnectedExtension","_log","disconnect","lport","connect","onDisconnect","_sendDisconnect","_incrementCallbackId","bRet","forwardingsupported","connectedToNative","forwardMessage","ret","callbackId","_nativePostMessage","exception","_logException","nCallback","forwardid","eventPort","tempConnectionStatus","_toBrowserType","logtype","msg","debug","_toDisconnectMessage","discmessage","browser_type","extn_id","disconnectmsg","handshake","_toHandshakeMessage","extn_version","getManifest","version","user_agent","_sendhandshake","_isNativeConnected","tries","connected","connectNative","hpAliveMsg","ilower","pingMsg","_postMessageInternal","postMessage","getConnectedExtensions","isConnected","isConnectedToExtensionIndex","ExtensionCommands","GET_VALUES_RESPONSE","EXECUTE_COMMAND","REDIRECT_URL","REFRESH","RESTART","LOGMSG","HANDSHAKE_GREETING","EXTENSION_STATE_RESPONSE","GENERIC_NATIVE_REQUEST","DOWNLOAD_SCAN_RESULT","DELETE_FILE_RESULT","NativeCommands","NativeMessageDispatcherV1","browserStartSent","nativeClient","portNames","portIndex","sendInitialSettings","browserMap","cacheStorage","userToggleOption","smaOption","updateSettings","updateNativeSettings","toNativeSettingNames","updateBackgroundGlobals","names","actualName","nativeObj","ajAPSEnable","handleNativeSettings","setupFeatures","updateContext","cacheWhitelist","jsettings","getValues","connectToPort","localStorageAffidValue","application","setting_subscription_regex","currentExtId","requestedExtId","management","uninstallSelf","getSubscriberInfo","wssEmail","autoPlayVideoSite","blockPageArray","typosquatArray","blockPageWhitelist","typosquatWhitelist","getExtensionStatus","onExtStatusRetrievedCb","isWhiteListed","extension_state","process_type","extension_type","log_level","handleNativeHandshake","getInitialSettings","getNativeCache","SetXYViewport","xView","yView","X","Y","command_id","genericNativeRequest","processInwardMessage","nativeMessage","commandName","redirect_url","isPropertRedirectUrl","nativeResponse","VERB","PAYLOAD","getList","messageOptions","jsonMsg","responseObject","onDownloadFinished","installExtension","redirectUrl","isActivityPolicyEnabled","extensionStatusUpdate","lastUrl","last_url","resultArray","responseElement","nextUrl","cacheItem","pushCacheToNative","gtiString","cache_data","product","attribute","valid","error_message","onTabClose","mfwResetNativeSettings","ANNOTATION_OPTIONS","none","onlySecureSearch","InjectAnnotation","sma","WhitelistTypes","WhitelistStoreMappings","CRYPTOJACKING","IFRAME","RAT_DETECTION","WhitelistActions","ADD","REMOVE","InjectRATDetection","isProperWebURL","getDomainVisitedDetails","updateRatDetectionShowingFlag","whitelistNoCallback","isDomainWhitelisted","whitelistedList","whitelistItem","storeVariables","allTabDomains","currentTabDomain","InjectIframeBanner","InjectIframeBlock","InjectAutoPlayDetection","InjectFormCheck","idpsFeatureEnabled","isSupported","isChromeBrowser","isBrowserEN","InjectFormDetection","InjectIDPS","isDWSWhitelisted","formInfoCache","getFormInfo","removeFormInfo","dwsInfo","getCachedDWSInfo","shownCount","has24HoursElapsed","hash","updatedCache","info","lastShown","oneDayInMiliseconds","BALLOON_TRIGGER_TYPE","InjectAPSBalloon","isSignUp","balloonTriggerType","apsEmailLinkIndexFound","isRemoteAccessSite","isShoppingSite","isFinancialSite","isPageRedirectedFromEmail","saveAPSDetails","apsShoppingList","apsEmailLinks","pop","apsInfo","rating","fullMsgShown","apsDomainsShownFM","apsDetails","InjectSiteListener","InjectAPSToast","InjectAPSObserver","isSupportedEmail","apsEmailList","emailUrl","WebRequestDispatcher","results","WebRequestHelper","toUrlReputation","handleUrlReputation","sendRespectiveTelemetry","onSSHitTelemetry","onEngineSearch","handleTopFrameNavigateComplete","getSettingsData","getURLReputation","isTopFrame","whitelisted","isSafeUrl","removeSearchTermOnEngineUrl","tabDomain","makeMTIRequest","isWhitelisted","annotationDetails","toBlockState","handleTyposquatting","whitelistVal","ts","lookupTypoSquatFromServer","isBlocked","increasePageScannedCounter","setIcon","checkWhitelistedBlockpage","pageLevel","telemetryContext","qUrl","blockPageStatus","toBlockPageUrl","bState","WPSBlockType","pageStyle","urlObj","host","searchParams","sendEvent","hit_label_2","enginetype","secure_search","Url","attributes","ExternalMessageListener","waOnBrowser","done","cryptoListener","getListener","ListenerTypes","CRYPTO","property","clearCache","clearEntries","propname","findAndApplyProperties","unusedSelectors","selectors","matched","_","store","bkGlobals","MemoryUsage","performance","memory","usedJSHeapSize","findItem","oindex","isMatched","oitem","findex","fitem","found","sindex","UnifiedAuthClient","authAAI","ea","encryptedEmail","uauth_aes_encrypt","webAppLoginUrl","encodeURIComponent","ContentGlobals","ContentGlobalManager","cGlobals","crfParams","weights","classes","transition_probs","FormDetection","timeoutId","MessageListener","getDomainName","srcvideo","link","substr","bwhitelisted","siteReportUrl","tabInfo","tabinfo","isFrameBlocked","last_event","anyBlockedIframes","unblockAllIframes","anyBlockedCryptoScripts","getPopupData","searchAnnotation","socialMediaAnnotation","resetSettings","savedLogins","updatedSavedLogins","storedEmails","dwsCache","savedInfo","launchLoginFlow","formPreCheckPassed","signUpFormDetected","showSidebarMain","getWeights","getExceptions","getCrfParams","OnChangedDownloadListener","downloadDelta","previous","items","finalUrl","onCreated","downloadItem","onTabCreatedHandler","shouldSendNewTabEvent","pendingUrl","onTabUpdatedHandler","toBrowserActionColor","redirectIfNotBlocked","onTabRemoveHandler","cleanRatDomainsShowing","TabListener","extensionURL","howToWorkUrls","WebRequestListener","onBeforeSendHeaders","onSendHeaders","onNavigateComplete","onHeadersReceived","onErrorOccurred","requestHeaders","setRequestData","responseHeaders","lname","lval","getRequestData","deleteRequestData","deconstructUrl","initiator","requestFilters","BrowserActionListener","sidebarTelemetry","actionClickTelemetry","browserAction","TAB","MESSAGE","WEB_REQUEST","DOWNLOAD","BROWSER_ACTION","EXTERNAL_MESSAGE","ListenerManager","listeners","listenerType","getListeners","size","fetchFile","heap","fill","getObject","idx","heap_next","takeObject","dropObject","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","getStringFromWasm0","ptr","len","subarray","addHeapObject","WASM_VECTOR_LEN","cachedTextEncoder","encodeString","encodeInto","arg","view","buf","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","cachegetInt32Memory0","getInt32Memory0","Int32Array","__wbg_adapter_16","arg0","arg1","arg2","_dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__he1ef291dda6206af","handleError","f","apply","__wbindgen_exn_store","notDefined","what","initiate","_uuid","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","_msg","cipher","_req_params","get_product_key","_product","_key_name","ptr1","len1","input","imports","wbg","__wbindgen_object_drop_ref","__wbindgen_string_new","__wbg_call_3ed288a247f13ea5","__wbg_fetchFile_d67988fa46b8401a","__wbg_then_842e65b843962f56","__wbindgen_cb_drop","original","cnt","__wbindgen_string_get","__wbg_error_8ff19d586a987aef","__wbg_error_5bd12f214e606440","__wbg_log_e8ba7b992c7ad0eb","__wbg_self_f865985e662246aa","self","__wbg_crypto_bfb05100db79193b","__wbg_msCrypto_f6dddc6ae048b7e2","msCrypto","__wbindgen_is_undefined","__wbg_static_accessor_MODULE_39947eb3fe77895f","__wbg_require_c59851dfa0dc7e78","require","__wbg_newwithlength_8f0657faca9f1422","__wbindgen_throw","__wbg_resolve_a9a87bdd64e9e62c","__wbg_then_ce526c837d07b68f","__wbg_new0_0ff7eb5c1486f3ec","__wbg_toISOString_779f1216e525b3f6","toISOString","__wbg_slice_9cf884e0fc969901","__wbg_random_f1dabdd9f148bad5","__wbg_floor_ecd9cd89028e4982","__wbg_randomFillSync_d90848a552cbd666","randomFillSync","__wbg_subarray_da527dbd24eafb6b","__wbg_getRandomValues_57e4008f45f0e105","getRandomValues","__wbg_length_0acb1cf9bbaf8519","__wbindgen_memory","__wbg_buffer_7af23f65f6c64548","__wbg_new_cc9018bd6f283b6f","__wbg_set_f25e869e4565d2a2","__wbg_new_37705eed627d5ed9","state0","arg3","wasm_bindgen__convert__closures__invoke2_mut__h821434c694c09150","__wbg_adapter_39","__wbindgen_closure_wrapper98","dtor","real","__wbindgen_export_2","makeMutClosure","Request","instance","Response","WebAssembly","instantiateStreaming","bytes","arrayBuffer","instantiate","Instance","load","__wbindgen_wasm_module","WasmGenerator","wasmBinary","binary","WSSExtensionCommands","SUBSCRIBE","WSSNativeCommands","SubRequestTypes","NativeWSSMessageDispatcher","wssClient","connectToWssPort","sendSubscribeRequest","sendGetSettingsRequest","wssResponse","getWssParams","provision_id","provisionId","entitled_products","entitedProducts","sub_request_type","app_id","processHandshake","setRequestType","newValue","setSettings","strSettingValue","InjectSidebarMain","triggerSidebarMain","triggerForegroundPage","subcommand","componentData","sidebarMainData","LocalDispatcher","nativeDisp","topDomain","srcVideo","site_domain","video_url","coordinate_x","coordinate_y","stats","settingsData","whitelistedLinks","apsToggle","ajToast","ffpolicy","repResponse","redirectURI","file_path","mime_type","ext_side_ui","searchOption","secureSearchOnly","secureSearchIcons","telemetry_data","tabUrl","brefreshPage","responseCb","retrieveSearchTerm","urlOjb","href","override","subrequestpayload","eventtype","top_url","blocked_url","EngineDownloadHelper","fetchEngine","engineJSON","searchengines","ex","serverUpdate","fetchVersion","isNewerVersion","currentVersion","newVersion","curSplits","newSplits","minLength","curVer","newVer","setUrl","CacheStore","onChangedListener","getOnChangedListener","variable","LocalStorage","oldValue","getMultiple","setMultiple","clearSessionVariables","GarbageCollector","collection","setCleanUpTimer","setInterval","checkCache","TelemetryGlobals","dataCollector","dictionaryMapper","eventManager","datasetManager","eventHandler","profiles","rulesManager","externalLogger","EXTN_TELEMETRY","LOG_COLOR","mergeObjects","destination","source","lowerCaseKeys","newKey","lowerCaseObjectKeyValuePair","isKeyLowered","isValueLowered","arrayIncludes","array","itemTocheck","getCommonElements","arrayOne","arrayTwo","element","removeItemFromArray","itemName","isoDateToDate","year","month","day","second","UTC","OperationsManager","operationConfig","_isValidValue","_logWarn","_logError","param","findObjectSize","InstalledYear","InstalledMonth","InstalledDate","String","_getDaysBetween","multiple","roundUp","roundDown","one_hour_ms","one_minute_ms","one_day_ms","difference_ms","dateValue","setUTCSeconds","date2","date1","one_day","date2_ms","date1_ms","Ivalue","dateToISO","stringToDate","DataCollector","data_items","farmers","refreshers","harvestQueue","expiredItems","expiryQueue","operationExpiredItems","rawDataStore","definitions","subscribedMsgs","createFarmers","createRefreshers","markDataExpired","itemsList","buff","expiredDataPoints","updateCache","operationExpiredDatapoints","createCollection","markDataExpiredIfEq","markDataOperationExpired","operationOnly","loadSingleItem","itemDefinition","harvest","postOperationValue","processOperation","postRuleValue","setRefreshers","refresh","harvestValue","refreshConfig","retrieveFromDataStore","dataIems","data_collector_engine","harvestIfEq","harvestTimeout","operationTimeout","harvestIfEqWithTimeout","inputVal","UWPStorage","DictionaryMapper","eventMap","profile","profileMap","global","globalMap","profileMapStringified","flippedProfileMap","getEventMap","eventKey","getGlobalMap","getProfileMap","profileKey","getProfileMapStringified","getFlippedProfileMap","mappingTable","toMap","inPlace","newMap","lowerAttribute","newAttribute","preconfigured_detections","device","event_id","to","DataSetManager","datasetCatalog","cachedData","datasets","datasetsCatalog","watchList","logDebug","createWatchList","logError","dataset","isDirty","checkForChange","Dataset","initialize","datasetName","datasetWatchList","storedObjName","oldDatasetContent","newDatasetContent","getContent","watchListNewValues","escapedRuleMismatchStr","escapedUnknown","escapedNotAssigned","escapedBracketNull","changedValueEvents","eventInfo","sendContextChangedEvent","sendAnalyticsDetectEvent","record","UniqueIdentifier","handleEvent","detections","from_exp","to_exp","logInfo","logWarn","dirty","config","setRefresh","createDatasetRefreshTimer","useEngineDefaultTimeout","timeoutInterval","EventManager","events","getProfileNames","profileNames","getAttributeRules","attributeRules","getPriority","priority","getDataSetNames","setEvent","getThrottleRule","throttleRule","TransportBase","dictionary","transportConfig","transportMapper","eh","apiVersion","servicebusNamespace","eventHubPath","sharedAccessKey","sharedAccessName","sharedAccessToken","tokenCreationTime","appendDottedKeys","eventData","attributesToConvert","attr","saName","saKey","encoded","round","signature","textEncoder","importKey","sign","fromCharCode","eventDataStr","cleanEventData","sanitizeEventData","mappedEventData","sendStatusCode","uniqueId","token","createSharedAccessToken","Host","BrokerProperties","PartitionKey","getContextId","sanitizedEvent","setup","tokenRefreshTime","updateURL","replacementKey","replacementValue","aws_api_gateway","apikey","partitionKey","awsPayload","Data","apiKey","dns","gateway","Emitter","enableRules","maxDimensionLength","throttleMultiplier","transportConfiguration","transport_config","transportType","transport","outbound","isEnabled","sanitize","sourceType","evaluate","entry","priorityConfig","eventThrottle","profileThrottle","BaseTransmitter","emitters","isEventThrottled","eventName","applyThrottle","isProfileThrottled","profileName","getProfile","getEmitter","addEmitter","transportProfile","getProfileDefaultAttribute","defaults","addDataSetNames","emitter","dataSetNames","allDataSetNames","mergeDataSets","TransportError","generate","errorMessage","ruleMismatch","ruleError","rejected","timeNow","applyAttributeRules","getDailyMaxTableCounter","__throttle_user_multiplier","getDefaultDictionary","now_time","timeStamp","create_time","messageName","Transport","eventDataSetNames","eventThrottled","isPriorityCritical","profileThrottled","forceLowerCaseKeys","rulesApplied","transmit","eventDayIndex","mappedRules","cleanMessage","ignoreAttributeRules","messageKey","ruleKey","EventHandler","unique_id","recordPayload","normalizedPayload","objKey","normalizePayload","hit_event_id","RulesManager","dailyMaxTable","notNull","meta","inRange","min","max","equal","greater","greaterEqual","less","lessEqual","notEqual","contains","regex","re","expr","in","isType","isEqual","not","ruleName","or","and","date_earlier","value_time","date_later","sample","targetDailyMaxTable","counter","dailyMax","currentTimeMs","startTimeMs","ruleConfig","onMismatch","onError","jsonLocation","initCalled","userID","geoInfo","contextKey","microsoftMachineGuid","isUsingMicrosoftMachineGuid","string","RotateLeft","lValue","iShiftBits","AddUnsigned","lX","lY","lX4","lY4","lX8","lY8","lResult","c","s","z","F","GG","G","HH","H","II","I","WordToHex","lByte","lCount","WordToHexValue","WordToHexValue_temp","k","AA","BB","CC","DD","utftext","n","Utf8Encode","lWordCount","lMessageLength","lNumberOfWords_temp1","lNumberOfWords","lWordArray","lBytePosition","lByteCount","ConvertToWordArray","processMD5Hash","hashStr","uid","data1","data2","data3","toUpperCase","generateGUIDFromHash","eventLabel","product_analytics_dataitems_intest","funcUrl","geoId","isQA","queryDate","geoid","StandAloneTelemetryWrapper","MAX_STORED_SEARCHES","SHOW_MAX_RESULTS","SEARCH_RESULT_TTL","STORED_SEARCHES","SearchSuggest","storedSearches","getUrl","hasSearchTerm","searchResults","getSearchSuggestions","responseJson","cleanPreviousSearches","searchResultObj","searchMap","randomUUID","rnds8","rng","byteToHex","unsafeStringify","arr","rnds","TyposquattingCache","cacheTyposquatting","cleanTypoCache","timeOfExpiry","updatedTime","getAllEntries","bkobj","processActiveTab","originTab","toUUIDBrowserType","bType","deviceId","arch","getPlatformInfo","browserInfo","match","exec","platformMatch","platform","getBrowserInfo","contextVars","device_id","hit_session_id","hit_session_start_time","operating_system","browser_version","device_cpu_architecture","listener","wssNativeDispatcher","onInstall","onInstalled","reason","onBrowserStartUp","onStartup","initStandaloneTelemetry","generateWASM","submain"],"sourceRoot":""}